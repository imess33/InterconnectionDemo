<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2017.2.1 (Build 801U)" ts="2018-12-06 14:04:32">
<Class name="HIP.BO.IOTOperation">
<Description>
获取HIP信息</Description>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64683,60049.748321</TimeChanged>
<TimeCreated>64463,61594.964001</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="GetPatientBasicInfo">
<Description>
通过患者ID获取患者基本信息</Description>
<FormalSpec>PatientId:HIP.MSG.reqGetPatient,*PatientInfo:HIP.MSG.resGetPatient</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   Set PatientInfo = ##class(HIP.MSG.resGetPatient).%New()
   Set tPatient = ##class(CDR.Patient).%OpenId(PatientId.PID)
   Set PatientInfo.Patient=tPatient
   Quit $$$OK
]]></Implementation>
</Method>

<Method name="SaveReceivedOrder">
<Description>
保存医嘱信息</Description>
<FormalSpec>reqOrderReceiver:BeConnected.Service.OrderReciver.Msg.reqOrderReceiver,*respOrderReceiver:BeConnected.Service.OrderReciver.Msg.respOrderReceiver</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s tSC = $$$OK
	try {
		s respOrderReceiver = ##class(BeConnected.Service.OrderReciver.Msg.respOrderReceiver).%New()
		s respOrderReceiver.MsgId = $SYSTEM.Util.CreateGUID()
		s respOrderReceiver.TargetMsgId = reqOrderReceiver.OrderReveriver.MsgId
		s cdt = $zdt($h,8,1)
		s respOrderReceiver.MsgCreateDatetime = $e(cdt,1,8)_$e(cdt,10,11)_$e(cdt,13,14)_$e(cdt,16,17)
		
		s patientId = reqOrderReceiver.OrderReveriver.PatientId
		if (patientId = "") s patientId = $SYSTEM.Util.CreateGUID()
		s sc = ##class(CDR.Patient).ukMPIIDExists(patientId,.id)
		if (sc) {
			s patient = ##class(CDR.Patient).%OpenId(id)
		}else{ 
	//		s IDNo = reqOrderReceiver.OrderReveriver.PatientIdCard
	//		s sc = ##class(CDR.Patient).ukIDNoExists(IDNo,.id)
	//		if (sc) {
	//			s patient = ##class(CDR.Patient).%OpenId(id)
	//		}else {
				s patient = ##class(CDR.Patient).%New()
				s patient.MPIID = patientId
	//		}
		}
		s patient.Phone = reqOrderReceiver.OrderReveriver.PatientTelecom
		s patient.PatientStatus = reqOrderReceiver.OrderReveriver.PatientStatus
		s patient.IDNo = reqOrderReceiver.OrderReveriver.PatientIdCard
		s patient.LastName = reqOrderReceiver.OrderReveriver.PatientName
		s patient.Gender = reqOrderReceiver.OrderReveriver.PatientGenderCode
		s patient.BirthTime = $zdh(reqOrderReceiver.OrderReveriver.BirthDate,8)
		
		s patient.HealthRecordNumber = reqOrderReceiver.OrderReveriver.HealthDocumentId
		s patient.HealthCardNumber = reqOrderReceiver.OrderReveriver.HealthCardId
		s patient.OutpatientID = reqOrderReceiver.OrderReveriver.OutPatientId
		s patient.InpatientID = reqOrderReceiver.OrderReveriver.InPatientId
	
		s sc = patient.%Save()
		if ($$$ISERR(sc)) { 
			s respOrderReceiver.Acknowledgement = "AE"
			s respOrderReceiver.AcknowledgementDetail = $system.Status.GetOneErrorText(sc)
			Quit:$$$ISERR(sc)
		}
		
		s EncounterId = reqOrderReceiver.OrderReveriver.EncounterId
		if (EncounterId = "") s EncounterId = $SYSTEM.Util.CreateGUID()
		s sc = ##class(CDR.Encounter).ukEncounterNoExists(EncounterId,.eid)
		#dim encounter As CDR.Encounter
		if (sc) {
			s encounter = ##class(CDR.Encounter).%OpenId(eid)
		}else{ 
			s encounter = ##class(CDR.Encounter).%New()
			s encounter.EncounterNumber = EncounterId
			s encounter.PatientId = patientId
			s encounter.Patient = patient
		}
		s encounter.Status = reqOrderReceiver.OrderReveriver.EncounterStatus
		s encounter.ServiceDeliveryLocationBedCode = reqOrderReceiver.OrderReveriver.ServiceDeliveryLocationBedCode
		s encounter.ServiceDeliveryLocationBedName = reqOrderReceiver.OrderReveriver.ServiceDeliveryLocationBedName
		s encounter.ServiceDeliveryLocationRoomCode = reqOrderReceiver.OrderReveriver.ServiceDeliveryLocationRoomCode
		s encounter.ServiceDeliveryLocationRoomName = reqOrderReceiver.OrderReveriver.ServiceDeliveryLocationRoomName
		s encounter.ServiceProviderDepartmentCode = reqOrderReceiver.OrderReveriver.ServiceProviderDepartmentCode
		s encounter.ServiceProviderDepartmentName = reqOrderReceiver.OrderReveriver.ServiceProviderDepartmentName
		s encounter.ServiceProviderWardCode = reqOrderReceiver.OrderReveriver.ServiceProviderWardCode
		s encounter.ServiceProviderWardName = reqOrderReceiver.OrderReveriver.ServiceProviderWardName
		s sc = encounter.%Save()
		if ($$$ISERR(sc)) { 
			s respOrderReceiver.Acknowledgement = "AE"
			s respOrderReceiver.AcknowledgementDetail = $system.Status.GetOneErrorText(sc)
			Quit:$$$ISERR(sc)
		}
		#Dim Med As CDR.Medication
		s Medid = reqOrderReceiver.OrderReveriver.OrderId
		if (Medid = "") s Medid = $SYSTEM.Util.CreateGUID()
		//OrderId
		s sc = ##class(CDR.Medication).ukOrderIdExists(Medid,.mid)
		if (sc) {
			s Med = ##class(CDR.Medication).%OpenId(mid)
		}else{ 
			s Med = ##class(CDR.Medication).%New()
			s Med.OrderId = Medid
			s Med.Encounter = encounter
			s Med.EncounterId = EncounterId
		}
		
		s Med.OrderCategory = reqOrderReceiver.OrderReveriver.OrderTypeCode
		s Med.OrderItemDesc = reqOrderReceiver.OrderReveriver.OrderItemText
		s b = reqOrderReceiver.OrderReveriver.EffectiveStart
		s:(b'="") Med.StartDateTime = $zdt($zdth($e(b,1,8)_" "_$e(b,9,10)_":"_$e(b,11,12)_":"_$e(b,13,14),8,1),3,1)
		s b = reqOrderReceiver.OrderReveriver.EffectiveEnd
		s:(b'="") Med.EndDateTime =  $zdt($zdth($e(b,1,8)_" "_$e(b,9,10)_":"_$e(b,11,12)_":"_$e(b,13,14),8,1),3,1)
		s Med.RateAmount = $e(reqOrderReceiver.OrderReveriver.RateTime,1,*-2)
		s Med.RateTimeUnit = $e(reqOrderReceiver.OrderReveriver.RateTime,*-1,*)
		s Med.RateTimeUnit = reqOrderReceiver.OrderReveriver.RateTimeUnit
		s Med.Route = reqOrderReceiver.OrderReveriver.RouteCode
		s Med.DoseQuantity = reqOrderReceiver.OrderReveriver.DoseQuantity
		s Med.SumDoseQuantity = reqOrderReceiver.OrderReveriver.SumDoseQuantity
		s Med.ValidDays = reqOrderReceiver.OrderReveriver.ValidDays
		s Med.DosageForm = reqOrderReceiver.OrderReveriver.DosageFormCode
		s Med.DrugProduct = reqOrderReceiver.OrderReveriver.DrugName
		s Med.StrengthVolume = reqOrderReceiver.OrderReveriver.Dose
		s Med.StrengthVolumeUnits = reqOrderReceiver.OrderReveriver.DoseUnits
		s b = reqOrderReceiver.OrderReveriver.CreateDatetime
		s:(b'="") Med.CreationTime = $zdt($zdth($e(b,1,8)_" "_$e(b,9,10)_":"_$e(b,11,12)_":"_$e(b,13,14),8,1),3,1)
		s Med.OrderedBy = reqOrderReceiver.OrderReveriver.OrderByName
		s Med.OrderByCode = reqOrderReceiver.OrderReveriver.OrderById
		s Med.practitioner =  reqOrderReceiver.OrderReveriver.OrderByName
		s Med.OrderBySign = reqOrderReceiver.OrderReveriver.OrderBySign
		s Med.ConsultationDepartment = reqOrderReceiver.OrderReveriver.CreateDepartementName
		s Med.CreateDepartementCode = reqOrderReceiver.OrderReveriver.CreateDepartementCode
		s Med.VerifiedBy = reqOrderReceiver.OrderReveriver.OrderAuditName
		s Med.OrderAuditId = reqOrderReceiver.OrderReveriver.OrderAuditId
		s Med.OrderAuditSign = reqOrderReceiver.OrderReveriver.OrderAuditSign
		s b = reqOrderReceiver.OrderReveriver.OrderAuditDatetime
		s:(b'="") Med.OrderAuditDatetime = $zdt($zdth($e(b,1,8)_" "_$e(b,9,10)_":"_$e(b,11,12)_":"_$e(b,13,14),8,1),3,1)
		s Med.Comments = reqOrderReceiver.OrderReveriver.OrderNote
		s Med.OrderNoteStatus = reqOrderReceiver.OrderReveriver.OrderNoteStatus
		s sc = Med.%Save()
		if ($$$ISERR(sc)) { 
			s respOrderReceiver.Acknowledgement = "AE"
			s respOrderReceiver.AcknowledgementDetail = $system.Status.GetOneErrorText(sc)
			Quit:$$$ISERR(sc)
		}
		s respOrderReceiver.Acknowledgement="AA"
	} Catch ex{
		s respOrderReceiver.Acknowledgement = "AE"
		s respOrderReceiver.AcknowledgementDetail = ex.Data
		s tSC = ex.AsStatus()
	}
	
   Quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="HIP.MSG.reqGetPatient"> 
		<Method>GetPatientBasicInfo</Method>
	</MapItem>
	<MapItem MessageType="BeConnected.Service.OrderReciver.Msg.reqOrderReceiver"> 
		<Method>SaveReceivedOrder</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="HIP.BO.SQL2HIS">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64282,42070.998824</TimeChanged>
<TimeCreated>64125,42788.28186</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
SELECT 
BLBH 病历编号, JZXH 就诊序号, BRID 病人ID,BLLX 病历类型, BLLB 病历类别代码,(SELECT LBMC FROM PORTAL_EMR.EMR_KBM_BLLB B WHERE A.BLLB=B.LBBH) BLLBMC病历类别名称, BLMC 病历名称, DLLB, DLJ, MBLB, MBBH, JLSJ 记录时间, CJSJ 创建时间, WCSJ, SXYS 书写医生代码,(SELECT YGXM FROM BSOFT.GY_YGDM B WHERE B.YGDM=A.SXYS) SXYSName, SXKS 书写科室代码,(SELECT KSMC FROM BSOFT.GY_KSDM C WHERE C.KSDM=A.SXKS ) SXKSName, BRKS 病人科室, BLZT 病历状态, SYBZ, BZMBBH, BLBBZ, BLPF
FROM BSOFT.OMR_BL01 A where BLZT=0
*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
SELECT D.BLNR 病历内容,
A.BLBH 病历编号,JZHM 就诊号码,BRBH 住院号,BLLX 病历类型, A.BLLB 病历类别编码,(SELECT LBMC FROM PORTAL_EMR.EMR_KBM_BLLB B WHERE A.BLLB=B.LBBH) BLLBMC病历类别名称, BLMC 病历名称, BLZM, DLLB, DLJ, MBLB, MBBH, ZXSJ 书写时间,CJSJ 创建时间, WCSJ, SXYS 书写医生代码,(SELECT YGXM FROM BSOFT.GY_YGDM B WHERE B.YGDM=A.SXYS) SXYSName, BRKS 书写科室代码,(SELECT KSMC FROM BSOFT.GY_KSDM C WHERE C.KSDM=A.BRKS) BRKSName, CJKS, BLZT, BRXM, BRZD, SSYS, SYBZ, BZMBBH, BLYM, YMJL
FROM PORTAL_EMR.EMR_BL_BL01 A,PORTAL_EMR.EMR_BL_BL02 D WHERE A.BLBH=D.BLBH and (BLZT=0 or BLZT=1) 
*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*  预约挂号
SELECT D.JZXH 就诊序号,BRXM 病人姓名,SFZH 身份证号,MZHM 门诊号码,A.YYXH 预约序号, YYMM 预约密码, A.BRID 病人ID, GHRQ 挂号日期, A.KSDM 科室代码,(SELECT KSMC
FROM BSOFT00.GY_KSDM C WHERE C.KSDM=A.KSDM) KSName, ZBLB 值班类别, A.YSDM 医生代码, (SELECT YGXM FROM BSOFT00.GY_YGDM C WHERE C.YGDM=A.YSDM) YGName,YYLB 预约
类别, GHBZ 挂号标志, YYRQ 预约日期, A.JZXH 就诊顺序号, A.SBXH 识别序号, ZCID, DJGH 预约工号, A.YYSDB 预约开始时间, A.YYSDE 预约结束时间, A.SDJL 时段记录
FROM BSOFT00.MS_YYGH A,BSOFT00.MS_BRDA B,BSOFT00.YS_MZ_JZLS D where a.brid=b.brid AND A.SBXH=D.GHXH
*/
]]></Content>
</UDLText>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.SQL.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="GetPatient">
<Description>
同步患者信息</Description>
<FormalSpec>pRequest:HIP.MSG.reqGetPatient,*pResponse:HIP.MSG.resGetPatient</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		//set AllergyExist=0
		Set pResponse = ##class(HIP.MSG.resGetPatient).%New()
		//Set tSQL= "SELECT BRID,MZHM,brxm,brxb,SFZH,CSNY FROM  BSOFT.MS_BRDA WHERE BRID =?"
		
		If pRequest.PatientSource="O"
		{
			Set tSQL= "SELECT BRID,MZHM,BRXM,FYZH 医疗证号,SFZH,BRXZ 病人性质,BRXB,CSNY,HYZK,ZYDM,MZDM,XXDM,GMYW 过敏药物,DWXH 单位序号, DWMC, DWDH, DWYB 单位邮编, HKDZ, JTDH, HKYB 户口邮编,CZRQ 初诊日期, JZKH 就诊卡号, BRLX FROM BSOFT.MS_BRDA WHERE BRID =? and (length(SFZH)=15 or length(SFZH )=18)"
			Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.PID)
			If tRS.Next()
			{
				Set tPatient=##class(CDR.Patient).ukIDNoOpen(pRequest.PNID)
				set:('$ISOBJECT(tPatient)) tPatient=##class(CDR.Patient).%New()
				set tPatient.MPIID ="OP"_tRS.Get("BRID")  //门诊住院病人ID
				set tPatient.OutpatientID =tRS.Get("MZHM")
				set tPatient.IDNo =tRS.Get("SFZH")
				set tPatient.FirstName =tRS.Get("BRXM")
				set tPatient.Gender =tRS.Get("BRXB")
				if tRS.Get("CSNY")'=""
				{
					set tPatient.BirthTime =$ZDH(tRS.Get("CSNY"),3)
				}			
				//
				set tPatient.MaritalStatus=tRS.Get("HYZK")     // HYZK 婚姻状况
				//set tPatient.Occupation=tRS.Get("ZYDM")        // ZYDM 职业代码			
				set tPatient.Race=tRS.Get("MZDM")              // MZDM 民族代码
				set tPatient.Blood=tRS.Get("XXDM")             // XXDM 血型代码			
				set tPatient.Addresses=tRS.Get("DWMC")         // DWMC 单位名称（住址）			
				set tPatient.PatientNumbers=tRS.Get("DWDH")    // DWDH 单位电话（患者号码）			
				set tPatient.Citizenship=tRS.Get("HKDZ")       // HKDZ 户口地址(籍贯)
				set tPatient.ContactInfo=tRS.Get("JTDH")       // JTDH 家庭电话
				
				//set tPatient.Allergies=tRS.Get("GMYW") // GMYW  过敏 
				/*
				IF tRS.Get("GMYW")'=""
				{
					SET tAllergy=##class(CDR.Allergy).%New()
					set tAllergy.Allergy=tRS.Get("GMYW")
					do tPatient.Allergies.Insert(tAllergy)
				}  
				*/
			}
		}
		Elseif pRequest.PatientSource="I"
		{
			 
			Set tSQL= "SELECT ZYH, ZYHM, BAHM, MZHM, BRXZ, GFZH, BRXM, BRXB, CSNY, SFZH, HYZK,ZYDM, SFDM, JGDM, "
			_"MZDM, GJDM, DWBH, GZDW, DWDH, DWYB, HKDZ, HKYB, LXRM, LXGX,LXDZ, LXDH, PZHM, SBHM, DBRM, DBGX, "
			_"ZZTX, DBBZ, BRKS, BRBQ, BRCH, DJRQ, RYRQ, CYRQ, CYPB, CYFS, CZGH, RYQK, BRQK, HLJB, YSDM, BRXX, "
			_"HZKS, JCKS, MZYS, ZYYS, ZSYS, ZZYS,QZRQ, KSRQ, JSRQ, JSCS, JZRQ, HZRQ, XGPB, BAPB, BRGL, BRKL, BZ, "
			_"BRQM, JTDH, YBKH, JZKH,SZYS, ZLXZ, SPJE, SJZY, DJBZ, DJID, DJJE, YSJS, ZKZT, GWYBZ, YBJG, RYLB, RYJB, "
			_"YBSH, JBGR, CWBZ, CWGR, QFBZ, FDJE, TJGR, TZGR, TYGR, YZYSBH, ZYGR, YBHS, BLQR, LSQFJE, LSJBGJ, LSGWYGRJE,LSBCYL, "
			_"LSJBGR, GWYQFJE, BCYLFDJE, SHGH, HSGH, DEBZ, BDBL, JSLB, NHH, SXZZBR, SXZZYY, SYDC, DZBZ, MZJZ, BCJE, BAOXIAO_TYPE, "
			_"BRXM_BABY, BRXB_BABY, CSNY_BABY, CODE_BABY, CSNY_CHILD, SFZ, SFQK, JZKLB, JZDJID, SHXH, SHRQ, HSRQ, REYBSH, ID, BAPFBZ, "
			_"BAPFXH FROM BSOFT.ZY_BRRY WHERE ZYH=?"
			
			 
			Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.PID)
			If tRS.Next()
			{
				Set tPatient=##class(CDR.Patient).ukIDNoOpen(pRequest.PNID)
				set:('$ISOBJECT(tPatient)) tPatient=##class(CDR.Patient).%New()
				set tPatient.MPIID ="IP"_tRS.Get("ZYH")  //门诊住院ID
				
				set tPatient.InpatientID=tRS.Get("ZYHM")  //住院病人 住院号
				
				set tPatient.IDNo =tRS.Get("SFZH")
				set tPatient.FirstName =tRS.Get("BRXM")
				set tPatient.Gender =tRS.Get("BRXB")
				if tRS.Get("CSNY")'=""
				{
					set tPatient.BirthTime =$ZDH(tRS.Get("CSNY"),3)
				}			
				//
				set tPatient.Blood=tRS.Get("BRXX")   // BRXX 病人血型
				set tPatient.MaritalStatus=tRS.Get("HYZK")     // HYZK 婚姻状况
				//set tPatient.Occupation=tRS.Get("ZYDM")        // ZYDM 职业代码			
				set tPatient.Race=tRS.Get("MZDM")              // MZDM 民族代码
				set tPatient.Blood=tRS.Get("BRXX ")             // BRXX  病人血型			
				set tPatient.Addresses=tRS.Get("GZDW")         // GZDW 工作单位（住址）			
				set tPatient.PatientNumbers=tRS.Get("DWDH")    // DWDH 单位电话（患者号码）			
				set tPatient.Citizenship=tRS.Get("HKDZ")       // HKDZ 户口地址(籍贯)
				set tPatient.ContactInfo=tRS.Get("JTDH")       // JTDH 家庭电话				
				
			}
		}
		Else
		{
		}
		Set:($IsObject(tPatient)) pResponse.Patient= tPatient
		 
		
	}
	catch(e)
	{
		
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetEncounter">
<Description>
同步就诊</Description>
<FormalSpec>pRequest:HIP.MSG.reqGetEncounter,*pResponse:HIP.MSG.resGetEncounter</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetEncounter).%New()
		If pRequest.EncounterSource="O"
		{
		
		Set tSQL= "SELECT JZXH, GHXH 挂号序号,BRBH, KSDM, YSDM, ZYZD 主要诊断, "
		_"KSSJ, JSSJ, JZZT, YYXH 复诊预约序号, FZRQ 复诊日期, GHFZ, GHKS,"_
		" YSXM, GHKSMC,JZLX  FROM BSOFT.YS_MZ_JZLS WHERE JZXH =?"
		 
		
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.EncounterID)
		If tRS.Next()
		{
			Set tEncounter=##class(CDR.Encounter).ukEncounterNoOpen("OP"_pRequest.EncounterID)
			set:('$ISOBJECT(tEncounter)) tEncounter=##class(CDR.Encounter).%New()
			set tEncounter.EncounterNumber ="OP"_tRS.Get("JZXH") // JZXH 就诊序号
			set tEncounter.PatientNo=pRequest.PatientNo
			SET tEncounter.Type="O" //就诊类型			
			Set tEncounter.Class = "O"  //outpatient(门诊病人)
			set tEncounter.Status ="finished" //tRS.Get("JZZT")      //"finished"   // JZZT 就诊状态
			set tEncounter.PatientId ="OP"_tRS.Get("BRBH")   //tRS.Get("BRBH")             // BRBH 病人ID
			
			set tEncounter.AdmissionLocationNo =tRS.Get("GHKS")  // KSDM 科室代码  
			set tEncounter.AdmissionLocation =tRS.Get("GHKSMC")  // GHKSMC 挂号科室名称
			// AdmissionType 就诊入院类型
			//出院科室
			set tEncounter.DischargeLocationNo =tRS.Get("GHKS")     //  GHKS 科室代码 (出院科室)
			set tEncounter.DischargeLocation =tRS.Get("GHKSMC")     //  GHKS 科室代码 (出院科室)
			
			/// 接诊医生 Property AdmittingClinician
			set tEncounter.AdmittingClinicianNo =tRS.Get("YSDM")   // YSDM 医生代码
			set tEncounter.AdmittingClinician =tRS.Get("YSXM")   // YSXM 医生姓名
			
			/// 参与医生  Property AttendingClinicians As %String;
             //Property AttendingCliniciansNo As %String;
            /// 会诊医生 Property ConsultingClinicians As %String;
            /// 转诊医生 Property ReferringClinician As %String;
            
            /// 帐号  Property AccountNumber        //  JZKH  就诊卡号            
			set tEncounter.AdmissionTime=tRS.Get("KSSJ")         //  KSSJ 开始时间(入院时间) 
			//if tRS.Get("JSSJ")=""
			//{
			set tEncounter.DischargeTime=tRS.Get("KSSJ")         //  JSSJ 结束时间(出院时间)
			//}
			//else
			//{
				//set tEncounter.DischargeTime=tRS.Get("JSSJ")         //  JSSJ 结束时间(出院时间)
			//}
			 
			set tEncounter.LastModified=$Zd($h,3)_" "_$zt($P($h,",",2))
			set tEncounter.LastModifiedBy=$UserName
			/// 预住院号 Property PreAdmissionNumber As %String(MAXLEN = 220);
            set tEncounter.AdmissionSource="自行来" /// 入院来源: 转诊、自行来、救护车、新生儿 Property AdmissionSource As %String;
            /// 入院原因 Property AdmitReason As %String;
           	set tEncounter.HealthCareFacility=^HIPSetting("HomeFacility")  /// 医疗机构 Property HealthCareFacility As %String; 
            /// 就诊描述 Property VisitDescription As %String;
            /// 是否再入院 Property IsReadmission As %Boolean [ InitialExpression = 0 ];
			 
			set tEncounter.Patient=##class(CDR.Patient).ukIDNoOpen(pRequest.PatientNID)
		}
		}
		elseif pRequest.EncounterSource="I"
		{
			
		Set tSQL= "SELECT ZYH, ZYHM, BAHM, MZHM 门诊号码, BRXZ 病人性质, GFZH 公费证号, BRXM 病人姓名," 
		_"BRXB 病人性别, CSNY 出生年月, SFZH 身份证号, HYZK 婚姻状况, ZYDM 职业代码," 
		_"SFDM 省份代码, JGDM 籍贯代码, MZDM 民族代码, GJDM 国籍代码, DWBH 单位编号," 
		_"GZDW 工作单位, DWDH 单位电话, DWYB 单位邮编, HKDZ 户口地址, HKYB 户口邮编, "
		_"LXRM 联系人名, LXGX 联系关系, LXDZ 联系地址, LXDH 联系电话, PZHM 凭证号码, SBHM 社保号码, DBRM 担保人名, DBGX 担保关系, ZZTX 在职退休, DBBZ 大保病种,"
		_" BRKS,(SELECT KSMC FROM BSOFT.GY_KSDM C WHERE C.KSDM=A.BRKS) BRKSName, BRBQ,"
        _"(SELECT KSMC FROM BSOFT.GY_KSDM C WHERE C.KSDM=A.BRBQ) BRBQName , BRCH 病从床号, DJRQ 登记日期, RYRQ, CYRQ, CYPB 出院判别, CYFS, CZGH 操作工员, RYQK, BRQK, HLJB 护理级别, YSDM 饮食代码, BRXX, "
		_"HZKS 会诊科室, JCKS 借床科室, MZYS,(SELECT YGXM FROM BSOFT.GY_YGDM B WHERE B.YGDM=A.MZYS) MZYSName, ZYYS 住院医师, ZSYS 主任医师, ZZYS,(SELECT YGXM FROM BSOFT.GY_YGDM B WHERE B.YGDM=A.ZZYS) ZZYSName, QZRQ 确诊日期, KSRQ,JSRQ, JSCS 结算次数, JZRQ 结帐日期, "
		_"HZRQ 汇总日期, XGPB 修改判别, BAPB 病案判别, BRGL 病人关联, BRKL 病人口令, BZ 备注, BRQM 病人全名, JTDH 家庭电话, YBKH 医保卡号, JZKH, SZYS,(SELECT YGXM FROM BSOFT.GY_YGDM B WHERE B.YGDM=A.SZYS) SZYSName, ZLXZ 治疗小组, "
		_"SPJE 审批金额, SJZY 数据转移, DJBZ 冻结标志, DJID 冻结ID号, DJJE, YSJS, ZKZT, GWYBZ, YBJG, RYLB, RYJB, YBSH, JBGR, CWBZ, CWGR, QFBZ, FDJE, TJGR, TZGR, TYGR, "
		_"YZYSBH, ZYGR, YBHS, BLQR, LSQFJE, LSJBGJ, LSGWYGRJE, LSBCYL, LSJBGR, GWYQFJE, BCYLFDJE, SHGH, HSGH, DEBZ, BDBL, JSLB, NHH, SXZZBR, SXZZYY, SYDC, DZBZ, MZJZ, "
		_"BCJE, BAOXIAO_TYPE, BRXM_BABY, BRXB_BABY, CSNY_BABY, CODE_BABY, CSNY_CHILD, SFZ, SFQK, JZKLB, JZDJID, SHXH, SHRQ, HSRQ, REYBSH, ID, BAPFBZ, BAPFXH"
		_" FROM BSOFT.ZY_BRRY A WHERE ZYH=?"
					
		/* 
		 
		 */	
		
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.EncounterID)
		If tRS.Next()
		{
			Set tEncounter=##class(CDR.Encounter).ukEncounterNoOpen("IP"_pRequest.EncounterID)
			set:('$ISOBJECT(tEncounter)) tEncounter=##class(CDR.Encounter).%New()
			set tEncounter.EncounterNumber ="IP"_tRS.Get("ZYH") // ZYH 住院就诊序号
			SET tEncounter.Type="I" //就诊类型			
			Set tEncounter.Class = "I"  //Inpatient(住院病人)
			set tEncounter.Status ="finished"
			set tEncounter.PatientId =tRS.Get("ZYH")             // ZYH  病人ID
			set tEncounter.PatientNo =tRS.Get("ZYHM")             // ZYHM  病人住院号码
			set tEncounter.AdmissionLocation=tRS.Get("BRKSName")  // GHKSMC 挂号科室名称
			set tEncounter.AdmissionLocationNo=tRS.Get("BRKS")   // BRKS 病人科室 （入院科室）
			
			set tEncounter.AdmittingClinician =tRS.Get("ZZYSName")   // YSXM 医生姓名
			set tEncounter.AdmittingClinicianNo =tRS.Get("ZZYS")     //  SZYS 收治医生(就诊医生)
			
			set tEncounter.AttendingClinicians=tRS.Get("SZYSName")     //  MZYS 门诊医师(参与医生)
			set tEncounter.AttendingCliniciansNo=tRS.Get("SZYS")     //  MZYS 门诊医师(参与医生)
			
			set tEncounter.DischargeLocation =tRS.Get("BRBQName")     //  BRKS 病人科室 (出院科室)
			set tEncounter.DischargeLocationNo =tRS.Get("BRBQ")     //  BRKS 病人科室 (出院科室)
			
			set tEncounter.AdmissionTime=tRS.Get("KSRQ")         //  KSRQ 开始日期, (入院时间) 
			set tEncounter.DischargeTime=tRS.Get("JSRQ")         //  JSRQ 结算日期(出院时间)  
			 
			set tEncounter.AdmitReason=tRS.Get("BRQK")            //  BRQK 病人情况（入院原因）
			set tEncounter.VisitDescription=tRS.Get("RYQK")        // RYQK 入院情况,(入院描述)
			
			set tEncounter.EncounterMRN=tRS.Get("BAHM") // BAHM 病案号码  (病历号)
			
			set tEncounter.DischargeDisposition=tRS.Get("CYFS") // CYFS 出院方式 (出院原因)
			
			set tEncounter.AccountNumber=tRS.Get("JZKH") // JZKH 就诊卡号 (帐号) 
			set tEncounter.LastModified=$Zd($h,3)_" "_$zt($P($h,",",2))
			set tEncounter.LastModifiedBy=$UserName
			
			/// 预住院号 Property PreAdmissionNumber As %String(MAXLEN = 220);
            set tEncounter.AdmissionSource="自行来"   /// 入院来源: 转诊、自行来、救护车、新生儿 Property AdmissionSource As %String;
            /// 入院原因 Property AdmitReason As %String;
            set tEncounter.HealthCareFacility=^HIPSetting("HomeFacility")   //Set ^HIPSetting("HomeFacility")="NKZY" ^QPTestLog($I(^QPTestLog))"海医附二"   /// 医疗机构 Property HealthCareFacility As %String; 
            /// 就诊描述 Property VisitDescription As %String;
            /// 是否再入院 Property IsReadmission As %Boolean [ InitialExpression = 0 ];
			 
			set tEncounter.Patient=##class(CDR.Patient).ukIDNoOpen(pRequest.PatientNID)
		}
		
	}
	else
	{
	}
	
	Set:($IsObject(tEncounter)) pResponse.Encounter= tEncounter
	
	}
	catch(e)
	{
		
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetDocument">
<Description>
从数据源同步临床文档</Description>
<FormalSpec>pRequest:HIP.MSG.reqGetDocument,*pResponse:HIP.MSG.resGetDocument</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetDocument).%New()		
		//Set ^QPTestLog($I(^QPTestLog))="Started with: "_pRequest.DocumentNo
		if pRequest.EncounterSource="O"
		{   
			Set tSQL= "SELECT A.BLBH , JZXH , BRID,BLLX , BLLB ,"
			Set tSQL= tSQL_" (SELECT LBMC FROM PORTAL_EMR.EMR_KBM_BLLB B WHERE A.BLLB=B.LBBH) BLLBMC," 
			Set tSQL= tSQL_" BLMC , DLLB, DLJ, MBLB, MBBH, JLSJ , CJSJ , WCSJ, SXYS ,"
			Set tSQL= tSQL_" (SELECT YGXM FROM BSOFT.GY_YGDM B WHERE B.YGDM=A.SXYS) SXYSName, SXKS ,"
			Set tSQL= tSQL_" (SELECT KSMC FROM BSOFT.GY_KSDM C WHERE C.KSDM=A.SXKS ) SXKSName, BRKS , BLZT , SYBZ, BZMBBH, BLBBZ, BLPF,"
			Set tSQL= tSQL_" BLNR_TXT"
			Set tSQL= tSQL_" FROM BSOFT.OMR_BL01 A, BSOFT.OMR_BL02 D"
			Set tSQL= tSQL_" WHERE A.BLBH=D.BLBH"
			Set tSQL= tSQL_" AND (BLZT=0 or BLZT=1)"
			Set tSQL= tSQL_" AND A.BLBH=?"
			Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.DocumentNo)
			//Set ^QPTestLog($I(^QPTestLog))="ExecuteQuery with : "_tRet
			If tRS.Next()
			{
				try
				{
				Set tDocument=##class(CDR.Document).ukDocumentNoOpen("OP"_pRequest.DocumentNo)
				If ('$ISOBJECT(tDocument))
				{
					Set tDocument=##class(CDR.Document).%New()
					set tDocument.DocumentNumber="OP"_pRequest.DocumentNo
				}
				//就诊序号
				Set tDocument.Encounter= ##class(CDR.Encounter).ukEncounterNoOpen("OP"_tRS.Get("JZXH"))
				//病历名称
				Set tDocument.DocumentName=tRS.Get("BLMC")
				//如果是出院小结,DocumentType="DS"
				Set tDocument.DocumentType=tRS.Get("BLLBMC")
				//创建时间
				Set tDocument.DocumentTime=tRS.Get("CJSJ")
				Set tDocument.Clinician=tRS.Get("SXYSName")
				//记录时间
				Set tDocument.CreationTime=tRS.Get("JLSJ")
				Set tDocument.Creator=tRS.Get("SXYSName")
				//Set tDocument.AuthorizationTime=tRS.Get("")
				//病历状态
				Set tDocument.Status=$Case(tRS.Get("BLZT"),0:"正常", 1:"封存")
				Set tDocument.NoteText=tRS.Get("BLNR_TXT")  
				//Set tDocument.Stream=tRS.Get("")
				//Set tDocument.FileType=tRS.Get("")
				//Set tDocument.DocumentURL=tRS.Get("")
				//Set ^QPTestLog($I(^QPTestLog))="value updated"	
				}
				Catch(e)
				{
					Set ^QPTestLog($I(^QPTestLog))=e
				}      
			}
		}
		elseif pRequest.EncounterSource="I"
		{
			///  SELECT D.BLNR 病历内容, A.BLBH 病历编号,JZHM ,BRBH 住院号,BLLX 病历类型, A.BLLB 病历类别编码,(SELECT LBMC FROM PORTAL_EMR.EMR_KBM_BLLB B WHERE A.BLLB=B.LBBH) BLLBMC病历类别名称, BLMC 病历名称, BLZM, DLLB, DLJ, MBLB, MBBH, ZXSJ 书写时间,CJSJ 创建时间, WCSJ, SXYS 书写医生代码,(SELECT YGXM FROM BSOFT.GY_YGDM B WHERE B.YGDM=A.SXYS) SXYSName, BRKS 书写科室代码,(SELECT KSMC FROM BSOFT.GY_KSDM C WHERE C.KSDM=A.BRKS) BRKSName, CJKS, BLZT, BRXM, BRZD, SSYS, SYBZ, BZMBBH, BLYM, YMJL FROM PORTAL_EMR.EMR_BL_BL01 A,PORTAL_EMR.EMR_BL_BL02 D WHERE A.BLBH=D.BLBH and (BLZT=0 or BLZT=1)
			
			Set tSQL= "SELECT D.BLNR ,A.BLBH ,JZHM ,BRBH ,BLLX ," 
			Set tSQL= tSQL_" A.BLLB,"
			Set tSQL= tSQL_" (SELECT LBMC FROM PORTAL_EMR.EMR_KBM_BLLB B WHERE A.BLLB=B.LBBH) BLLBMC ," 
			Set tSQL= tSQL_" BLMC , BLZM, DLLB, DLJ, MBLB, MBBH, ZXSJ ,CJSJ , "
			Set tSQL= tSQL_" WCSJ, SXYS ,"
			Set tSQL= tSQL_" (SELECT YGXM FROM BSOFT.GY_YGDM B WHERE B.YGDM=A.SXYS) SXYSName, BRKS ,"
			Set tSQL= tSQL_" (SELECT KSMC FROM BSOFT.GY_KSDM C WHERE C.KSDM=A.BRKS) BRKSName, CJKS, BLZT, BRXM, "
			Set tSQL= tSQL_" BRZD, SSYS, SYBZ, BZMBBH, BLYM, YMJL"
			Set tSQL= tSQL_" FROM PORTAL_EMR.EMR_BL_BL01 A,PORTAL_EMR.EMR_BL_BL02 D" 
			Set tSQL= tSQL_" WHERE A.BLBH=D.BLBH "
			Set tSQL= tSQL_"   AND (BLZT=0 or BLZT=1)"
			Set tSQL= tSQL_"   AND A.BLBH=?" 
			
			#dim tRS as EnsLib.SQL.GatewayResultSet
			
			Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.DocumentNo)
			Set ^QPTestLog($I(^QPTestLog))="ExecuteReult:"_tRet
			If tRS.Next()
			{
				Set tDocument=##class(CDR.Document).ukDocumentNoOpen("IP"_pRequest.DocumentNo)
				If ('$ISOBJECT(tDocument)) 
				{
					Set tDocument=##class(CDR.Document).%New()
					Set tDocument.DocumentNumber = "IP"_pRequest.DocumentNo
				}
				//就诊号码
				Set tDocument.Encounter= ##class(CDR.Encounter).ukEncounterNoOpen("IP"_tRS.Get("JZHM"))
				//病历名称
				Set tDocument.DocumentName=tRS.Get("BLMC")
				//如果是出院小结,DocumentType="DS"
				if tRS.Get("BLLB")=51 
				{
					Set tDocument.DocumentType="DS"
				}
				else
				{
					Set tDocument.DocumentType=tRS.Get("BLLBMC")
				}
				//创建时间
				Set tDocument.DocumentTime=tRS.Get("CJSJ")
				Set tDocument.Clinician=tRS.Get("SXYSName")
				//记录时间
				Set tDocument.CreationTime=tRS.Get("ZXSJ")
				Set tDocument.Creator=tRS.Get("SXYSName")
				//Set tDocument.AuthorizationTime=tRS.Get("")
				//病历状态
				Set tDocument.Status=$Case(tRS.Get("BLZT"),0:"正常", 1:"封存")
				//Set tDocument.NoteText=tRS.Get("BLNR_TXT") 
				//病历内容 
				Set tDocument.Stream= tRS.GetStream("BLNR")
				Set tDocument.FileType=tRS.Get("HTML")
				//Set tDocument.DocumentURL=tRS.Get("")	
				Set ^QPTestLog($I(^QPTestLog))="loop done"
			}
		}
		else
		{
		}
		
		Set:($IsObject(tDocument)) pResponse.Document=tDocument
	}
	catch(e)
	{
	}
	 
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAppointment">
<Description>
从数据源同步预约</Description>
<FormalSpec>pRequest:HIP.MSG.reqGetAppointment,*pResponse:HIP.MSG.resGetAppointment</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetAppointment).%New()		
			
		Set tSQL= "SELECT D.JZXH ,BRXM ,SFZH ,MZHM ,"
		Set tSQL= tSQL_" A.YYXH , YYMM , A.BRID , GHRQ , A.KSDM ,"
		Set tSQL= tSQL_" (SELECT KSMC FROM BSOFT.MS_GHKS C WHERE C.KSDM=A.KSDM) KSName,"
		Set tSQL= tSQL_"  ZBLB , A.YSDM ," 
		Set tSQL= tSQL_" (SELECT YGXM FROM BSOFT.GY_YGDM C WHERE C.YGDM=A.YSDM) YGName,YYLB, "
		Set tSQL= tSQL_"  GHBZ , YYRQ , A.JZXH , A.SBXH , "
		Set tSQL= tSQL_" ZCID, DJGH , A.YYSDB , A.YYSDE , A.SDJL"
		Set tSQL= tSQL_" FROM BSOFT.MS_YYGH A,BSOFT.MS_BRDA B,BSOFT.YS_MZ_JZLS D "
		Set tSQL= tSQL_" where a.brid=b.brid AND A.SBXH=D.GHXH"
		Set tSQL= tSQL_" AND A.YYXH=?"
		
		Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.AppointmentId)
		//Set ^QPTestLog($I(^QPTestLog))="ExecuteQuery with : "_tRet
		//$$$TRACE("ExecuteQuery with : "_tRet)
		If tRS.Next()
		{
			try
			{
			Set tAppointment=##class(CDR.Appointment).ukAppointmentIDOpen(pRequest.AppointmentId)
			If ('$ISOBJECT(tAppointment))
			{
				Set tAppointment=##class(CDR.Appointment).%New()
			}
			
			set tAppointment.Patient=##class(CDR.Patient).ukIDNoOpen(pRequest.PatientNID)
			if '$IsObject(tAppointment.Patient)
			{
				$$$LOGWARNING("Patient with NID"_pRequest.PatientNID_" does not exist when processing appointment:"_tRS.Get("YYXH"))
			}
				
			//就诊序号
			if tRS.Get("JZXH")'=""
			{
				Set tAppointment.Encounter= ##class(CDR.Encounter).ukEncounterNoOpen("OP"_tRS.Get("JZXH"))
				if '$IsObject(tAppointment.Encounter)
				{
					$$$LOGWARNING("Encounter with No:"_tRS.Get("JZXH")_" does not exist when processing appointment:"_tRS.Get("YYXH"))
				}
			}
			//Set tAppointment.NoShow=tRS.Get("")
			//预约类别
			Set tAppointment.Reason=$Case(tRS.Get("YYLB"),1:"现场",2:"电话",3:"网上",4:"微信",:"其它")
			//预约序号
			Set tAppointment.PlacerApptId=tRS.Get("YYXH")
			Set tAppointment.FillerApptId=tRS.Get("YYXH")
			//Set tAppointment.Status=tRS.Get("")
			//Set tAppointment.Type=tRS.Get("")
			//Set tAppointment.Priority=tRS.Get("")
			//预约开始时间
			Set tAppointment.TimeStart=tRS.Get("YYSDB")
			//预约结束时间
			Set tAppointment.TimeEnd=tRS.Get("YYSDE")
			//Set tAppointment.Duration=tRS.Get("")
			//值班类别- 作为备注
			Set tAppointment.Comment=tRS.Get("ZBLB")
			//医生名称
			Set tAppointment.CareProvider=tRS.Get("YGName")
			//科室名称
			Set tAppointment.Location=tRS.Get("KSName")
			//预约工号
			Set tAppointment.EnteredBy=tRS.Get("DJGH")
			//Set tAppointment.EnteredAt=tRS.Get("")
			//Set tAppointment.EnteredOn=tRS.Get("")
			//记录时间
			//Set ^QPTestLog($I(^QPTestLog))="value updated"	
			}
			Catch(e)
			{
				$$$LOGERROR("when processing appointment:"_tRS.Get("YYXH")_" has error:"_$SYSTEM.Status.Error(e.Code,e.Data))
			}      
		}
		
		Set:($IsObject(tAppointment)) pResponse.Appointment=tAppointment
	}
	catch(e)
	{
	}
	 
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
Method GetPatient(pRequest As HIP.MSG.reqGetPatient, Output pResponse As HIP.MSG.resGetPatient) As %Status
{
	try
	{
		//set AllergyExist=0
		Set pResponse = ##class(HIP.MSG.resGetPatient).%New()
		//Set tSQL= "SELECT BRID,MZHM,brxm,brxb,SFZH,CSNY FROM  BSOFT.MS_BRDA WHERE BRID =?"
		
		If pRequest.PatientSource="O"
		{
			Set tSQL= "SELECT BRID,MZHM,BRXM,FYZH 医疗证号,SFZH,BRXZ 病人性质,BRXB,CSNY,HYZK,ZYDM,MZDM,XXDM,GMYW 过敏药物,DWXH 单位序号, DWMC, DWDH, DWYB 单位邮编, HKDZ, JTDH, HKYB 户口邮编,CZRQ 初诊日期, JZKH 就诊卡号, BRLX FROM BSOFT.MS_BRDA WHERE BRID =? and (length(SFZH)=15 or length(SFZH )=18)"
			Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.PID)
			If tRS.Next()
			{
				Set tPatient=##class(CDR.Patient).ukIDNoOpen(pRequest.PNID)
				set:('$ISOBJECT(tPatient)) tPatient=##class(CDR.Patient).%New()
				set tPatient.MPIID ="OP"_tRS.Get("BRID")  //门诊住院病人ID
				set tPatient.OutpatientID =tRS.Get("MZHM")
				set tPatient.IDNo =tRS.Get("SFZH")
				set tPatient.FirstName =tRS.Get("BRXM")
				set tPatient.Gender =tRS.Get("BRXB")
				if tRS.Get("CSNY")'=""
				{
					set tPatient.BirthTime =$ZDH(tRS.Get("CSNY"),3)
				}			
				//
				set tPatient.MaritalStatus=tRS.Get("HYZK")     // HYZK 婚姻状况
				//set tPatient.Occupation=tRS.Get("ZYDM")        // ZYDM 职业代码			
				set tPatient.Race=tRS.Get("MZDM")              // MZDM 民族代码
				set tPatient.Blood=tRS.Get("XXDM")             // XXDM 血型代码			
				set tPatient.Addresses=tRS.Get("DWMC")         // DWMC 单位名称（住址）			
				set tPatient.PatientNumbers=tRS.Get("DWDH")    // DWDH 单位电话（患者号码）			
				set tPatient.Citizenship=tRS.Get("HKDZ")       // HKDZ 户口地址(籍贯)
				set tPatient.ContactInfo=tRS.Get("JTDH")       // JTDH 家庭电话
				
				//set tPatient.Allergies=tRS.Get("GMYW") // GMYW  过敏 
				IF tRS.Get("GMYW")'=""
				{
					SET tAllergy=##class(CDR.Allergy).%New()
					set tAllergy.Allergy=tRS.Get("GMYW")
					do tPatient.Allergies.Insert(tAllergy)
				}  
			}
		}
		Elseif pRequest.PatientSource="I"
		{
			 
			Set tSQL= "SELECT ZYH, ZYHM, BAHM, MZHM, BRXZ, GFZH, BRXM, BRXB, CSNY, SFZH, HYZK,ZYDM, SFDM, JGDM, "
			_"MZDM, GJDM, DWBH, GZDW, DWDH, DWYB, HKDZ, HKYB, LXRM, LXGX,LXDZ, LXDH, PZHM, SBHM, DBRM, DBGX, "
			_"ZZTX, DBBZ, BRKS, BRBQ, BRCH, DJRQ, RYRQ, CYRQ, CYPB, CYFS, CZGH, RYQK, BRQK, HLJB, YSDM, BRXX, "
			_"HZKS, JCKS, MZYS, ZYYS, ZSYS, ZZYS,QZRQ, KSRQ, JSRQ, JSCS, JZRQ, HZRQ, XGPB, BAPB, BRGL, BRKL, BZ, "
			_"BRQM, JTDH, YBKH, JZKH,SZYS, ZLXZ, SPJE, SJZY, DJBZ, DJID, DJJE, YSJS, ZKZT, GWYBZ, YBJG, RYLB, RYJB, "
			_"YBSH, JBGR, CWBZ, CWGR, QFBZ, FDJE, TJGR, TZGR, TYGR, YZYSBH, ZYGR, YBHS, BLQR, LSQFJE, LSJBGJ, LSGWYGRJE,LSBCYL, "
			_"LSJBGR, GWYQFJE, BCYLFDJE, SHGH, HSGH, DEBZ, BDBL, JSLB, NHH, SXZZBR, SXZZYY, SYDC, DZBZ, MZJZ, BCJE, BAOXIAO_TYPE, "
			_"BRXM_BABY, BRXB_BABY, CSNY_BABY, CODE_BABY, CSNY_CHILD, SFZ, SFQK, JZKLB, JZDJID, SHXH, SHRQ, HSRQ, REYBSH, ID, BAPFBZ, "
			_"BAPFXH FROM BSOFT.ZY_BRRY WHERE ZYH=?"
			
			 
			Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.PID)
			If tRS.Next()
			{
				Set tPatient=##class(CDR.Patient).ukIDNoOpen(pRequest.PNID)
				set:('$ISOBJECT(tPatient)) tPatient=##class(CDR.Patient).%New()
				set tPatient.MPIID ="IP"_tRS.Get("ZYH")  //门诊住院ID
				
				set tPatient.InpatientID=tRS.Get("ZYHM")  //住院病人 住院号
				
				set tPatient.IDNo =tRS.Get("SFZH")
				set tPatient.FirstName =tRS.Get("BRXM")
				set tPatient.Gender =tRS.Get("BRXB")
				if tRS.Get("CSNY")'=""
				{
					set tPatient.BirthTime =$ZDH(tRS.Get("CSNY"),3)
				}			
				//
				set tPatient.Blood=tRS.Get("BRXX")   // BRXX 病人血型
				set tPatient.MaritalStatus=tRS.Get("HYZK")     // HYZK 婚姻状况
				//set tPatient.Occupation=tRS.Get("ZYDM")        // ZYDM 职业代码			
				set tPatient.Race=tRS.Get("MZDM")              // MZDM 民族代码
				set tPatient.Blood=tRS.Get("BRXX ")             // BRXX  病人血型			
				set tPatient.Addresses=tRS.Get("GZDW")         // GZDW 工作单位（住址）			
				set tPatient.PatientNumbers=tRS.Get("DWDH")    // DWDH 单位电话（患者号码）			
				set tPatient.Citizenship=tRS.Get("HKDZ")       // HKDZ 户口地址(籍贯)
				set tPatient.ContactInfo=tRS.Get("JTDH")       // JTDH 家庭电话				
				
			}
		}
		Else
		{
		}
		Set:($IsObject(tPatient)) pResponse.Patient= tPatient
		 
		
	}
	catch(e)
	{
		
	}
	Quit $$$OK
}

Method GetEncounter(pRequest As HIP.MSG.reqGetEncounter, Output pResponse As HIP.MSG.resGetEncounter) As %Status
{
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetEncounter).%New()
		If pRequest.EncounterSource="O"
		{
		
		Set tSQL= "SELECT JZXH, GHXH 挂号序号,BRBH, KSDM, YSDM, ZYZD 主要诊断, "
		_"KSSJ, JSSJ, JZZT, YYXH 复诊预约序号, FZRQ 复诊日期, GHFZ, GHKS,"_
		" YSXM, GHKSMC,JZLX  FROM BSOFT.YS_MZ_JZLS WHERE JZXH =?"
		 
		
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.EncounterID)
		If tRS.Next()
		{
			Set tEncounter=##class(CDR.Encounter).ukEncounterNoOpen("OP"_pRequest.EncounterID)
			set:('$ISOBJECT(tEncounter)) tEncounter=##class(CDR.Encounter).%New()
			set tEncounter.EncounterNumber ="OP"_tRS.Get("JZXH") // JZXH 就诊序号
			set tEncounter.PatientNo=pRequest.PatientNo
			SET tEncounter.Type="O" //就诊类型			
			Set tEncounter.Class = "O"  //outpatient(门诊病人)
			set tEncounter.Status =tRS.Get("JZZT")      //"finished"   // JZZT 就诊状态
			set tEncounter.PatientId ="OP"_tRS.Get("BRBH")   //tRS.Get("BRBH")             // BRBH 病人ID
			
			set tEncounter.AdmissionLocationNo =tRS.Get("GHKS")  // KSDM 科室代码  
			set tEncounter.AdmissionLocation =tRS.Get("GHKSMC")  // GHKSMC 挂号科室名称
			// AdmissionType 就诊入院类型
			//出院科室
			set tEncounter.DischargeLocationNo =tRS.Get("GHKS")     //  GHKS 科室代码 (出院科室)
			
			/// 接诊医生 Property AdmittingClinician
			set tEncounter.AdmittingClinicianNo =tRS.Get("YSDM")   // YSDM 医生代码
			set tEncounter.AdmittingClinician =tRS.Get("YSXM")   // YSXM 医生姓名
			
			/// 参与医生  Property AttendingClinicians As %String;
             //Property AttendingCliniciansNo As %String;
            /// 会诊医生 Property ConsultingClinicians As %String;
            /// 转诊医生 Property ReferringClinician As %String;
            
            /// 帐号  Property AccountNumber        //  JZKH  就诊卡号            
			set tEncounter.AdmissionTime=tRS.Get("KSSJ")         //  KSSJ 开始时间(入院时间) 
			if tRS.Get("JSSJ")=""
			{
				set tEncounter.DischargeTime=tRS.Get("KSSJ")         //  JSSJ 结束时间(出院时间)
			}
			else
			{
				set tEncounter.DischargeTime=tRS.Get("JSSJ")         //  JSSJ 结束时间(出院时间)
			}
			 
			
			set tEncounter.LastModified=$Zd($h,3)_" "_$zt($P($h,",",2))
			set tEncounter.LastModifiedBy=$UserName
			/// 预住院号 Property PreAdmissionNumber As %String(MAXLEN = 220);
            /// 入院来源: 转诊、自行来、救护车、新生儿 Property AdmissionSource As %String;
            /// 入院原因 Property AdmitReason As %String;
           /// 医疗机构 Property HealthCareFacility As %String; 
           /// 就诊描述 Property VisitDescription As %String;
           /// 是否再入院 Property IsReadmission As %Boolean [ InitialExpression = 0 ];
			 
			set tEncounter.Patient=##class(CDR.Patient).ukIDNoOpen(pRequest.PatientNID)
		}
		}
		elseif pRequest.EncounterSource="I"
		{			
		Set tSQL= "SELECT ZYH, ZYHM, BAHM, MZHM 门诊号码, BRXZ 病人性质, GFZH 公费证号, BRXM 病人姓名," 
		_"BRXB 病人性别, CSNY 出生年月, SFZH 身份证号, HYZK 婚姻状况, ZYDM 职业代码," 
		_"SFDM 省份代码, JGDM 籍贯代码, MZDM 民族代码, GJDM 国籍代码, DWBH 单位编号," 
		_"GZDW 工作单位, DWDH 单位电话, DWYB 单位邮编, HKDZ 户口地址, HKYB 户口邮编, "
		_"LXRM 联系人名, LXGX 联系关系, LXDZ 联系地址, LXDH 联系电话, PZHM 凭证号码, SBHM 社保号码, DBRM 担保人名, DBGX 担保关系, ZZTX 在职退休, DBBZ 大保病种,"
		_" BRKS, BRBQ 病人病区 , BRCH 病从床号, DJRQ 登记日期, RYRQ, CYRQ, CYPB 出院判别, CYFS, CZGH 操作工员, RYQK, BRQK, HLJB 护理级别, YSDM 饮食代码, BRXX, "
		_"HZKS 会诊科室, JCKS 借床科室, MZYS, ZYYS 住院医师, ZSYS 主任医师, ZZYS 主治医师, QZRQ 确诊日期, KSRQ 开始日期, JSRQ 结算日期, JSCS 结算次数, JZRQ 结帐日期, "
		_"HZRQ 汇总日期, XGPB 修改判别, BAPB 病案判别, BRGL 病人关联, BRKL 病人口令, BZ 备注, BRQM 病人全名, JTDH 家庭电话, YBKH 医保卡号, JZKH, SZYS, ZLXZ 治疗小组, "
		_"SPJE 审批金额, SJZY 数据转移, DJBZ 冻结标志, DJID 冻结ID号, DJJE, YSJS, ZKZT, GWYBZ, YBJG, RYLB, RYJB, YBSH, JBGR, CWBZ, CWGR, QFBZ, FDJE, TJGR, TZGR, TYGR, "
		_"YZYSBH, ZYGR, YBHS, BLQR, LSQFJE, LSJBGJ, LSGWYGRJE, LSBCYL, LSJBGR, GWYQFJE, BCYLFDJE, SHGH, HSGH, DEBZ, BDBL, JSLB, NHH, SXZZBR, SXZZYY, SYDC, DZBZ, MZJZ, "
		_"BCJE, BAOXIAO_TYPE, BRXM_BABY, BRXB_BABY, CSNY_BABY, CODE_BABY, CSNY_CHILD, SFZ, SFQK, JZKLB, JZDJID, SHXH, SHRQ, HSRQ, REYBSH, ID, BAPFBZ, BAPFXH"
		_" FROM BSOFT.ZY_BRRY WHERE ZYH=?"
		 
		
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.EncounterID)
		If tRS.Next()
		{
			Set tEncounter=##class(CDR.Encounter).ukEncounterNoOpen("IP"_pRequest.EncounterID)
			set:('$ISOBJECT(tEncounter)) tEncounter=##class(CDR.Encounter).%New()
			set tEncounter.EncounterNumber ="IP"_tRS.Get("ZYH") // ZYH 住院就诊序号
			SET tEncounter.Type="I" //就诊类型			
			Set tEncounter.Class = "I"  //outpatient(门诊病人)
			set tEncounter.Status ="finished"
			set tEncounter.PatientId =tRS.Get("ZYH")             // ZYH  病人ID
			set tEncounter.PatientNo =tRS.Get("ZYHM")             // ZYHM  病人住院号码
			//set tEncounter.AdmissionLocation =tRS.Get("GHKSMC")  // GHKSMC 挂号科室名称
			set tEncounter.AdmissionLocationNo=tRS.Get("BRKS")   // BRKS 病人科室 （入院科室）
			//set tEncounter.AdmittingClinician =tRS.Get("YSXM")   // YSXM 医生姓名
			set tEncounter.AdmittingClinicianNo =tRS.Get("SZYS")     //  SZYS 收治医生(就诊医生)
			
			set tEncounter.AttendingCliniciansNo=tRS.Get("MZYS")     //  MZYS 门诊医师(参与医生)
			
			set tEncounter.DischargeLocationNo =tRS.Get("BRKS")     //  BRKS 病人科室 (出院科室)
			
			set tEncounter.AdmissionTime=tRS.Get("RYRQ")         //  KSSJ 开始时间(入院时间) 
			set tEncounter.DischargeTime=tRS.Get("CYRQ")         //  JSSJ 结束时间(出院时间)  
			
			set tEncounter.AdmitReason=tRS.Get("BRQK")            //  BRQK 病人情况（入院原因）
			set tEncounter.VisitDescription=tRS.Get("RYQK")        // RYQK 入院情况,(入院描述)
			
			 
			
			set tEncounter.EncounterMRN=tRS.Get("BAHM") // BAHM 病案号码  (病历号)
			
			set tEncounter.DischargeDisposition=tRS.Get("CYFS") // CYFS 出院方式 (出院原因)
			
			set tEncounter.AccountNumber=tRS.Get("JZKH") // JZKH 就诊卡号 (帐号) 
			set tEncounter.LastModified=$Zd($h,3)_" "_$zt($P($h,",",2))
			set tEncounter.LastModifiedBy=$UserName
			set tEncounter.Patient=##class(CDR.Patient).ukIDNoOpen(pRequest.PatientNID)
		}
		
	}
	else
	{
		
	}
	
	Set:($IsObject(tEncounter)) pResponse.Encounter= tEncounter
	
	}
	catch(e)
	{
		
	}
	Quit $$$OK
}
*/
]]></Content>
</UDLText>

<Method name="GetPatientIDByEncounterID">
<FormalSpec>pRequest:HIP.MSG.reqGetPatientIDByEncounterID,*pResponse:HIP.MSG.resGetPatientIDByEncounterID</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 //未使用
	try
	{   //EncounterSource
	
		Set pResponse = ##class(HIP.MSG.resGetPatientIDByEncounterID).%New()
		Set tSQL= "SELECT BRBH FROM BSOFT.YS_MZ_JZLS WHERE JZXH =?"
		
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.EncounterID)
		If tRS.Next()
		{
			set pResponse.PatientID=tRS.Get("BRBH")
		}
	}
	catch(e)
	{
		
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetPatientIDByRegistID">
<FormalSpec>pRequest:HIP.MSG.reqGetPatientIDByRegistID,*pResponse:HIP.MSG.resGetPatientID</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 ///未使用
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetPatientID).%New()
		Set tSQL= "SELECT BRID FROM BSOFT.MS_GHMX WHERE SBXH =?"

		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.RegistID)
		If tRS.Next()
		{
			set pResponse.PatientID=tRS.Get("BRID")
		}
	}
	catch(e)
	{
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetRegist">
<FormalSpec>pRequest:HIP.MSG.reqGetRegist,*pResponse:HIP.MSG.resGetRegist</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 ///未使用
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetRegist).%New()
		Set tSQL= "SELECT SBXH,BRID,GHSJ,YSDM,KSDM FROM BSOFT.MS_GHMX WHERE SBXH=?"
		
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.RegistID)
		If tRS.Next()
		{
			Set tRegist=##class(CDR.Regist).ukSBXHOpen(pRequest.RegistID)
			set:('$ISOBJECT(tRegist)) tRegist=##class(CDR.Regist).%New()
			set tRegist.SBXH =tRS.Get("SBXH")
			set tRegist.BRID =tRS.Get("BRID")
			Set tRegist.RegistTime =tRS.Get("GHSJ")
			set tRegist.YSDM =tRS.Get("YSDM")
			set tRegist.KSDM =tRS.Get("KSDM")
		}
		Set:($IsObject(tRegist)) pResponse.Regist= tRegist
	}
	catch(e)
	{
		
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetPatientNIDByPID">
<FormalSpec>pRequest:HIP.MSG.reqGetPatientNIDByPID,*pResponse:HIP.MSG.resGetPatientNIDByPID</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  ///未使用
	try
	{   ///EncounterSource
	Set pResponse = ##class(HIP.MSG.resGetPatientNIDByPID).%New()
	 if pRequest.PatientSource="O"
	 {
		  
		Set tSQL= "SELECT SFZH,MZHM from BSOFT.MS_BRDA where  BRID =? and (length(sfzh)=15 or length(sfzh)=18 )"
		
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.PID)
		If tRS.Next()
		{
			set pResponse.PatientNID=tRS.Get("SFZH")
			
			set pResponse.PatientNo=tRS.Get("MZHM")
		}
	 }
	 elseif pRequest.PatientSource="I"
	 {
		 Set pResponse = ##class(HIP.MSG.resGetPatientNIDByPID).%New()
		Set tSQL= "SELECT SFZH,ZYHM from BSOFT.ZY_BRRY where  ZYH =? and (length(sfzh)=15 or length(sfzh)=18 )"
		
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.PID)
		If tRS.Next()
		{
			set pResponse.PatientNID=tRS.Get("SFZH")
			
			set pResponse.PatientNo=tRS.Get("ZYHM")
		}
	 }
	 else
	 {
	 }
		
	}
	catch(e)
	{
		
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetDiagnosis">
<Description>
同步诊断</Description>
<FormalSpec>pRequest:HIP.MSG.reqGetDiagnosis,*pResponse:HIP.MSG.resGetDiagnosis</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetDiagnosis).%New()
		if pRequest.EncounterSource="O"
		{
			
		Set tSQL= "SELECT ICD10, JBMC,BRBH PID,JZXH,YSDM,(SELECT YGXM FROM BSOFT.GY_YGDM B WHERE B.YGDM=A.YSDM) YSName,ZDSJ from BSOFT.YS_MZ_JBZD A WHERE JLBH=?"
		
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.DiagnosisID)
		If tRS.Next()
		{
			Set tDiagnosis=##class(CDR.Diagnosis).ukDiagnosisNoOpen("OP"_pRequest.DiagnosisID)
			set:('$ISOBJECT(tDiagnosis)) tDiagnosis=##class(CDR.Diagnosis).%New()
			set tDiagnosis.DiagnosisId = "OP"_pRequest.DiagnosisID			
			set tDiagnosis.EncounterId="OP"_tRS.Get("JZXH")  //EncounterId
			set tDiagnosis.DiagnosisCode =tRS.Get("ICD10")
			set tDiagnosis.DiagnosisDesc =tRS.Get("JBMC")
			Set tDiagnosis.DiagnosingClinician =tRS.Get("YSName")
			set tDiagnosis.IdentificationTime =tRS.Get("ZDSJ")
			set tDiagnosis.OnsetTime=tRS.Get("ZDSJ")
			Set tDiagnosis.DiagnosisType="门诊诊断"    //   DiagnosisType
			
			
			Set tSQL2= "SELECT b.JBMC FROM BSOFT.YS_MZ_JZLS a,BSOFT.GY_JBBM b where zyzd=b.JBXH AND ZYZD<>0 AND  JZXH =?" 		
		    Set tRet2 = ..Adapter.ExecuteQuery(.tRS2,tSQL2,tRS.Get("JZXH"))
		    If tRS2.Next()
		    {
			    if tRS.Get("JBMC")=tRS2.Get("JBMC")
			    set tDiagnosis.IsPrimary=1
		    }
		    
			Set tDiagnosis.Encounter = ##class(CDR.Encounter).ukEncounterNoOpen("OP"_tRS.Get("JZXH"))
		}
		}
		elseif pRequest.EncounterSource="I"
		{
			//Set tSQL= "SELECT ICD10, JBMC,BRBH PID,JZXH,YSDM,ZDSJ from BSOFT.YS_MZ_JBZD WHERE JLBH=?"
		//Set tSQL= "SELECT ICD10, JBMC,BRBH PID,JZXH,YSDM,ZDSJ from BSOFT.YS_MZ_JBZD WHERE JLBH=?"
		
		Set tSQL="SELECT b.DTICD,JZHM,BRBH, ZDLB, JBZH 疾病组号, JBDM,a.JBMC, MSZD 描述诊断, ZGQK 转归情况, ZDYS,(SELECT YGXM FROM BSOFT.GY_YGDM c WHERE c.YGDM=a.ZDYS) YSName, ZDSJ, ZFBZ 作废标志, TJBZ 提交标志 FROM BSOFT.YS_ZY_JBZD a,BSOFT.GY_JBBM  b where a.JBDM=B.JBXH and JLBH=?"
		
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.DiagnosisID)
		If tRS.Next()
		{
			Set tDiagnosis=##class(CDR.Diagnosis).ukDiagnosisNoOpen("IP"_pRequest.DiagnosisID)
			set:('$ISOBJECT(tDiagnosis)) tDiagnosis=##class(CDR.Diagnosis).%New()
			set tDiagnosis.DiagnosisId = "IP"_pRequest.DiagnosisID
			set tDiagnosis.EncounterId="IP"_tRS.Get("JZHM")  //EncounterId
			set tDiagnosis.DiagnosisCode =tRS.Get("DTICD")               //JBDM 疾病代码
			set tDiagnosis.DiagnosisDesc =tRS.Get("JBMC")                // JBMC 疾病名称
			Set tDiagnosis.DiagnosingClinician =tRS.Get("YSName")               // ZDYS 诊断医生
			set tDiagnosis.IdentificationTime =tRS.Get("ZDSJ") 
			set tDiagnosis.OnsetTime=tRS.Get("ZDSJ")             // ZDSJ 诊断时间			
			Set tDiagnosis.DiagnosisType=tRS.Get("ZDLB") // ZDLB 诊断类别 DiagnosisType
			
			Set tSQL2="select b.JBMC from BSOFT.YS_ZY_JZJL a,BSOFT.GY_JBBM b  where a.ryzd=b.JBXH and  ryzd is not null AND JZHM=?"
		
		    Set tRet2 = ..Adapter.ExecuteQuery(.tRS2,tSQL2,tRS.Get("JZHM"))
		    If tRS2.Next()
		    {
			    if tRS.Get("JBMC")=tRS2.Get("JBMC")
			    set tDiagnosis.IsPrimary=1
		    }
		
			Set tDiagnosis.Encounter = ##class(CDR.Encounter).ukEncounterNoOpen("IP"_tRS.Get("JZHM"))
		}
		}
		else
		{
		}
		
		Set:($IsObject(tDiagnosis)) pResponse.Diagnosis= tDiagnosis
	}
	catch(e)
	{
		
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetOrder">
<Description>
同步药嘱</Description>
<FormalSpec>pRequest:HIP.MSG.reqGetOrder,*pResponse:HIP.MSG.resGetOrder</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetOrder).%New()		
		//Set ^QPTestLog($I(^QPTestLog))="Started with: "_pRequest.EncounterSource
		if pRequest.EncounterSource="O"
		{   
			
			Set tSQL= "SELECT e.YFMC,b.YFSB,b.cflx,a.SBXH,d.SFZH,b.JZXH JZXH,b.CFHM,b.CFLX,b.KFRQ,b.FYRQ,b.YSDM,(SELECT YGXM FROM BSOFT.GY_YGDM x WHERE x.YGDM=b.YSDM) YSName,b.KSDM,(SELECT KSMC FROM BSOFT.GY_KSDM y WHERE y.KSDM=b.KSDM) KSName,b.BRXM 病人姓名,b.BRID 病人ID,c.YPMC,a.CFSB, a.YPXH 药品序号, YPCD 药品产地, XMLX 项目类型, a.CFTS 处方贴数, YPSL,a.YPDJ 药品单价, HJJE 划价金额, YPZS 药品组数, YCSL 一次数量, FYGB 费用归并, ZFBL 自负比例,(SELECT XMMC FROM BSOFT.ZY_YPYF z WHERE z.YPYF=a.GYTJ) GYTJ, YPYF,(SELECT ZXZQ FROM BSOFT.GY_SYPC X WHERE A.YPYF=X.PCBM )||'天' Duration, YPZH 药品组号, a.YFGG, a.YFDW,a.YFBZ 药房包装, a.SJYL 实际用量, a.PSPB 皮试判别, YYTS, YCSL2 一次用量,XSSL 显示数量, MRCS 每日次数, a.CFBZ 处方标志, YCJL,PSJG 皮试结果, PLXH 排列序号,YBZFBL,ZBYP, a.XZYY, SYCS, NWARN, YFBZXX,YBSHJG,YBSHYJ  FROM BSOFT.MS_CF02 a,BSOFT.MS_CF01 b,BSOFT.YK_TYPK c,BSOFT.MS_BRDA d,BSOFT.yf_yflb e   where b.cfsb=a.cfsb and c.ypxh=a.ypxh and b.brid=d.brid and  b.yfsb=e.yfsb and  (length(d.sfzh)=15 or length(d.sfzh)=18) and b.JZXH is not null and b.cfbz=1 and a.sbxh=?"
			Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.OrderID)
			//Set ^QPTestLog($I(^QPTestLog))="ExecuteQuery with : "_tRet
			If tRS.Next()
			{
				//Set ^QPTestLog($I(^QPTestLog))="ExecuteQuery has value "
				Set tOrder=##class(CDR.Medication).ukOrderIdOpen("OP"_pRequest.OrderID)
				set:('$ISOBJECT(tOrder)) tOrder=##class(CDR.Medication).%New()


				set tOrder.OrderId="OP"_pRequest.OrderID
				set tOrder.OrderUnits=tRS.Get("YFDW")                // a. YFDW 药房单位 OrderUnits 医嘱单位  	      
				set tOrder.EncounterId="OP"_tRS.Get("JZXH")          //EncounterId
				      
				Set tOrder.PlacerId =tRS.Get("CFSB")               // a.CFSB 处方识别, 
				Set tOrder.FillerId =tRS.Get("CFSB")                // a.CFSB 处方识别,
				set tOrder.OrderItemCode=tRS.Get("YYNM")           //  c. YYNM  医院内码? (项目编码)
				set tOrder.OrderItemDesc =tRS.Get("YPMC")_"  "_tRS.Get("YFGG")        //c. YPMC 药品名称 + a. YFGG 药房规格  (医嘱名称)

				set tOrder.OrderCategory="MED"            /// 医嘱大类 OrderCategory
				set tOrder.OrderQuantity =tRS.Get("YPSL")            ///  YPSL 药品数量 OrderQuantity 医嘱数量
				Set tOrder.OrderedBy =tRS.Get("YSName")                       // b. YSDM 医生代码  (医嘱下达者)			
				set tOrder.EnteringOrganization =tRS.Get("KSName")             // b. KSDM 科室代码  (医嘱下达者)

				set tOrder.VerifiedBy =tRS.Get("FYGH")                 /// b. FYGH 发药工号 VerifiedBy 确认者
				/// CallbackNumber 召回号码(无)	        		
				set tOrder.StartDateTime=tRS.Get("KFRQ")                     // b. KFRQ 开方日期 （开始时间）
				set tOrder.EndDateTime=tRS.Get("KFRQ")                     // b. KFRQ 发药日期  （结束时间）			
				set tOrder.AuthorizationTime=tRS.Get("FYRQ")                     // b. FYRQ 发药日期 (确认时间)			


				///Specimen 样本 （无）
				/// SpecimenCollectedTime  样本采集时间 （无）
				/// SpecimenReceivedTime   样本收到时间 （无）
				/// ReassessmentTime       再评估时间 （无）

				set tOrder.Frequency=tRS.Get("YPYF")   //    ///   YPYF  药品用法  （ 执行频率）
				set tOrder.Duration=tRS.Get("YYTS")_"天"              /// YYTS 用药天数  执行间隔  	      
				set tOrder.practitioner=tRS.Get("YSDM")          // b. YSDM 医生代码  开立人（必填）
				set tOrder.prescription=tRS.Get("CFHM")           // b. CFHM 或 a. CFSB 处方识别
				set tOrder.Status="finished"

				/// Priority 医嘱优先级
				/// ConfidentialityCode 保密代码，例如VIP
				/// Condition 执行条件。例如血压低于110是否才执行
				Set tOrder.TextInstruction=tRS.Get("MESS")  /// MESS 药品说明 TextInstruction 医嘱指导 
				set tOrder.OrderGroup=tRS.Get("CFLX")    /// b. CFLX 处方类型  (医嘱类型)  医嘱分类
				/// OrderGroup Comments	
				Set tOrder.ConsultationDepartment =tRS.Get("KSDM")             // b. KSDM 科室代码   (下达科室)   	       

				Set tOrder.ReceivingLocation =tRS.Get("YFMC")    ///  b.YFSB 药房识别 ReceivingLocation 接收医嘱的科室
				/// VerifiedComments 验证说明
				
				///----ofMedication
				Set tOrder.NotGiven=1
				Set tOrder.ReasonNotGiven="111"
				//Set tOrder.Medication=11       //关联字典表
				Set tOrder.Device="11"           //给药设备 
				Set tOrder.DrugProduct="11"      //药品
			    Set tOrder.StrengthVolume="11"   //含量
				Set tOrder.StrengthVolumeUnits="11"      //含量单位
				Set tOrder.RateAmount="11"           //频率
				Set tOrder.RateUnits="11"           //频率单位			
				Set tOrder.RateTimeUnit="11"        //频率执行单位
				Set tOrder.DoseQuantity=tRS.Get("YCJL")      // YCJL 一次剂量 （剂量）
			    Set tOrder.MaxDoseQuantity="11"   //  最大剂量		    
				Set tOrder.NumberOfRefills="11"  // 加药数量		   
				Set tOrder.DoseUoM="11"           // 剂量单位
				Set tOrder.DosageForm="11"      // 剂型
			    Set tOrder.Route=tRS.Get("GYTJ")    //  GYTJ 给药途径 (给药途径)		    
			    Set tOrder.Indication="11"           // 用药指导
				Set tOrder.PharmacyStatus="11"      // 药品状态
			    Set tOrder.PrescriptionNumber=tRS.Get("CFHM")   // b. CFHM  处方号码
			    // Set tOrder.RefillNumber  药品再配数量
			    // Set tOrder.RefillDescription  药品再配描述
			    // Set tOrder.Dispenses  发药对象
			    // Set tOrder.Administrations  给药对象
				Set tOrder.Encounter= ##class(CDR.Encounter).ukEncounterNoOpen("OP"_tRS.Get("JZXH"))
			}
		}
		elseif pRequest.EncounterSource="I"
		{
			 ///  // (SELECT ZXZQ FROM BSOFT.GY_SYPC z WHERE a.SYPC=z.PCBM ) 
			Set tSQL= "SELECT JLXH,c.MESS,c.YYNM,c.YFDW, a.ZYH, YZMC, a.YPXH, a.YPCD 药品产地, XMLX 项目类型, YPLX 药品类型, MRCS 每日次数, YCJL, YCSL, MZCS 每周次数, KSSJ, QRSJ, TZSJ, a.YPDJ 药品单价,(SELECT XMMC FROM BSOFT.ZY_YPYF z WHERE z.YPYF=a.YPYF) YPYF,"
			_" a.YSGH,(SELECT YGXM FROM BSOFT.GY_YGDM x WHERE x.YGDM=a.YSGH) YSName, TZYS 停嘱医生, a.CZGH,(SELECT YGXM FROM BSOFT.GY_YGDM x WHERE x.YGDM=a.CZGH) CZGHName, a.FHGH,(SELECT YGXM FROM BSOFT.GY_YGDM x WHERE x.YGDM=a.FHGH) FHGHName, SYBZ 使用标志, SRKS,(SELECT KSMC FROM BSOFT.GY_KSDM y WHERE y.KSDM=a.SRKS) SRKSName, a.ZFPB 自负判别, YJZX 医技主项, YJXH 医技序号, TJHM 特检号码, ZXKS,(SELECT KSMC FROM BSOFT.GY_KSDM y WHERE y.KSDM=a.ZXKS) ZXKSName, APRQ 安排日期, "
			_"YZZH,a.SYPC,to_date(to_char(tzsj,'yyyy-mm-dd'),'yyyy-mm-dd')-to_date(to_char(kssj,'yyyy-mm-dd'),'yyyy-mm-dd')+1||'天' Duration, FYSX 发药属性, YEPB 婴儿判别, YFSB 药房识别, LSYZ, LSBZ 历史标志, "
			_"YZPB 医嘱判别, JFBZ 记费标志, BZXX 备注, HYXM 化验项目, a.FYFS 发药方式, a.TPN, YSBZ 医生医嘱标志, YSTJ 医生提交标志, FYTX 发药提醒, YZPX 医嘱排序, SQWH 申请文号, YSYZBH , SQID 申请ID, XML 申请单XML, SQDMC 申请单名称, "
			_"TSBZ , ZYBZ, a.YBBZ, ZTXH, ZTMC, YLBZ, TMBZ, PREMARK, BLBZ, ZFBZ, JCBZ, YFSSBZ, YEWYH, SAMPLETYPE, KJYWYYMD, a.YFBZ, LJYZ, YZZT, BYBZ, HSZXSJ, HSZXGH, YZGZBZ, KZSJ, JFRQ FROM BSOFT.ZY_BQYZ a,BSOFT.ZY_BRRY b,BSOFT.YK_TYPK c "
			_" where  a.zyh=b.zyh and a.ypxh=c.ypxh and  a.XMLX =1 and (length(b.sfzh)=15 or length(b.sfzh)=18) and  a.jlxh=?" 
			Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.OrderID)
			If tRS.Next()
			{
				Set tOrder=##class(CDR.Medication).ukOrderIdOpen("IP"_pRequest.OrderID)
				set:('$ISOBJECT(tOrder)) tOrder=##class(CDR.Medication).%New()

				s tOrder.OrderId="IP"_pRequest.OrderID	      
				set tOrder.EncounterId="IP"_tRS.Get("ZYH")  //EncounterId
				set tOrder.OrderUnits=tRS.Get("YFDW")    // c. YFDW 药房单位 OrderUnits 医嘱单位  

				Set tOrder.PlacerId =tRS.Get("JLXH")                    // JLXH  (医嘱下达系统)
				Set tOrder.FillerId =tRS.Get("JLXH")                 // JLXH  

				set tOrder.OrderItemCode=tRS.Get("YYNM")              //  c. YYNM  医院内码? (项目编码)
				set tOrder.OrderItemDesc =tRS.Get("YZMC")           // YZMC 医嘱名称  (医嘱名称)

				set tOrder.OrderCategory="MED"              /// 医嘱大类 OrderCategory
				set tOrder.OrderQuantity =tRS.Get("YCSL")            ///  YCSL 一次数量 OrderQuantity 医嘱数量
				Set tOrder.OrderedBy =tRS.Get("YSName")                       // YSGH 医生工号  (医嘱下达者)			
				set tOrder.EnteringOrganization =tRS.Get("SRKSName")             // b. KSDM 科室代码  (医嘱下达者)

				set tOrder.VerifiedBy =tRS.Get("FHGHName")                 /// FHGH 复核工号  VerifiedBy 确认者
				/// CallbackNumber 召回号码(无)	        
				set tOrder.StartDateTime=tRS.Get("KSSJ")                     // a. KSSJ 开始时间 （开始时间）
				set tOrder.EndDateTime=tRS.Get("TZSJ")                     // c. TZSJ 停嘱时间 （结束时间）
				set tOrder.AuthorizationTime=tRS.Get("QRSJ")                     //QRSJ 确认时间 (确认时间)	
					         			

				///Specimen 样本 （无）
				/// SpecimenCollectedTime  样本采集时间 （无）
				/// SpecimenReceivedTime   样本收到时间 （无）
				/// ReassessmentTime       再评估时间 （无）		 

				set tOrder.Frequency=tRS.Get("SYPC")           ///   SYPC 使用频次  （ 执行频率）
				set tOrder.Duration=tRS.Get("Duration")                        /// Duration  执行间隔	      
				set tOrder.practitioner=tRS.Get("CZGHName")          // a. CZGH 操作工号 开立人（必填）
				set tOrder.prescription=tRS.Get("YZZH")           //  YZZH 医嘱组号 
				set tOrder.Status="finished"

				/// Priority 医嘱优先级
				/// ConfidentialityCode 保密代码，例如VIP
				/// Condition 执行条件。例如血压低于110是否才执行
				Set tOrder.TextInstruction=tRS.Get("MESS")  /// MESS 药品说明 TextInstruction 医嘱指导 
				set tOrder.OrderGroup=tRS.Get("LSYZ")  // LSYZ 临时医嘱  (医嘱类型) LSYZ 临时医嘱
				/// OrderGroup Comments	
				Set tOrder.ConsultationDepartment =tRS.Get("SRKSName")             // SRKS 科室代码   (下达科室)   	       

				set tOrder.ReceivingLocation=tRS.Get("YFSB")   /// 药房识别   （ 接收医嘱的科室）
				/// VerifiedComments 验证说明

				///----ofMedication
				Set tOrder.NotGiven=1
				Set tOrder.ReasonNotGiven="111"
				//Set tOrder.Medication=11       //关联字典表
				Set tOrder.Device="11"           //给药设备 
				Set tOrder.DrugProduct="11"      //药品
				Set tOrder.StrengthVolume="11"   //含量
				Set tOrder.StrengthVolumeUnits="11"      //含量单位
				Set tOrder.RateAmount="11"           //频率
				Set tOrder.RateUnits="11"           //频率单位			
				Set tOrder.RateTimeUnit="11"        //频率执行单位
				Set tOrder.DoseQuantity=tRS.Get("YCJL")      // YCJL 一次剂量 （剂量）
				Set tOrder.MaxDoseQuantity="11"   //  最大剂量		    
				Set tOrder.NumberOfRefills="11"  // 加药数量		   
				Set tOrder.DoseUoM=tRS.Get("YPYF")            // 剂量单位
				Set tOrder.DosageForm=tRS.Get("YPYF")     // 剂型
				Set tOrder.Route=tRS.Get("YPYF")   //   YPYF 药品用法  ->给药途径		    
				Set tOrder.Indication=tRS.Get("MESS")          // 用药指导
				Set tOrder.PharmacyStatus="1"      // 药品状态
				Set tOrder.PrescriptionNumber=tRS.Get("JLXH")   // JLXH  处方号码
				// Set tOrder.RefillNumber  药品再配数量
				// Set tOrder.RefillDescription  药品再配描述
				// Set tOrder.Dispenses  发药对象
				// Set tOrder.Administrations  给药对象

				Set tOrder.Encounter= ##class(CDR.Encounter).ukEncounterNoOpen("IP"_tRS.Get("ZYH"))
			}
		}
		else
		{
		}
		
		Set:($IsObject(tOrder)) pResponse.Order=tOrder
		
	}
	catch(e)
	{
	}
	 
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetLabOrder">
<Description>
同步检验医嘱LabOrder </Description>
<FormalSpec>pRequest:HIP.MSG.reqGetLabOrder,*pResponse:HIP.MSG.resGetLabOrder</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetLabOrder).%New()		
		
		if pRequest.EncounterSource="O"
		{
			Set tSQL= "SELECT c.YYNM,c.FYMC,a.SBXH 识别序号, a.YJXH,JZXH,YLXH,SFZH,MZHM, a.XMLX 项目类型, YJZX 医技主项, YLDJ 医疗单价, YLSL, HJJE, a.FYGB 费用归并, ZFBL 自负比例, BZXX, YBZFBL, CLJLXH, FJBZ, ZTXH, ZTMC, XMZH, FJBJSL, YBSHJG, YBSHYJ,"_
            "b.FPHM 发票号码, b.MZXH 门诊序号, b.BRID 病人ID, b.BRXM 病人姓名, b.KDRQ, b.KSDM, b.YSDM, b.ZXRQ, b.ZXKS, b.ZXYS, b.ZXPB 执行判别 FROM BSOFT.MS_YJ02 a,BSOFT.MS_YJ01 b,BSOFT.GY_YLSF c,BSOFT.MS_BRDA d "_
            "where a.SBXH=? and a.yjxh=b.yjxh and  c.fyxh=a.ylxh and b.brid=d.brid and (length(d.sfzh)=15 or length(d.sfzh)=18) AND JZXH is not null"
            
            Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.LabOrderID)
			If tRS.Next()
			{
				Set tLabOrder=##class(CDR.LabOrder).ukOrderIdOpen("OP"_pRequest.LabOrderID)
				set:('$ISOBJECT(tLabOrder)) tLabOrder=##class(CDR.LabOrder).%New()
			 
				set tLabOrder.OrderId="OP"_pRequest.LabOrderID	  
				set tLabOrder.OrderUnits="次"                              // 医嘱单位 （无）    
				set tLabOrder.EncounterId="OP"_tRS.Get("JZXH")  //EncounterId      
		       	 
		       	Set tLabOrder.PlacerId =tRS.Get("KSDM")                      // KSDM  (医嘱下达系统)
				Set tLabOrder.FillerId =tRS.Get("ZXKS")                     //b. ZXKS 执行科室
		        set tLabOrder.OrderItemCode=tRS.Get("YYNM")       //  c. YYNM  医院内码? (项目编码)
		        set tLabOrder.OrderItemDesc =tRS.Get("FYMC")             // c. FYMC 项目名称  (医嘱名称)
		        
		        set tLabOrder.OrderCategory="LAB" /// 医嘱大类 OrderCategory
		        set tLabOrder.OrderQuantity =tRS.Get("YLSL") /// YLSL 医疗数量 OrderQuantity 医嘱数量
		        Set tLabOrder.OrderedBy =tRS.Get("YSDM")                       // b. YSDM 医生代码  (医嘱下达者)
				set tLabOrder.EnteringOrganization =tRS.Get("KSDM")             // b. KSDM 科室代码  (医嘱下达者)
				
				set tLabOrder.VerifiedBy =tRS.Get("ZXYS")        /// b. ZXYS 执行医师 VerifiedBy 确认者
		        /// CallbackNumber 召回号码(无)
		        set tLabOrder.StartDateTime=tRS.Get("KDRQ")                     // b. KDRQ 开单日期 （开始时间）
				set tLabOrder.EndDateTime=tRS.Get("ZXRQ")                     // b. ZXRQ 执行日期  （结束时间）
				set tLabOrder.AuthorizationTime=tRS.Get("ZXRQ")           /// b. ZXRQ 执行日期  确认时间-
				
				///Specimen 样本 （无）
				/// SpecimenCollectedTime  样本采集时间 （无）
				/// SpecimenReceivedTime   样本收到时间 （无）
				/// ReassessmentTime       再评估时间 （无）		
			    //s tLabOrder.Duration=""
		        //s tLabOrder.Frequency="" 
		        set tLabOrder.Status="finished"	       
		       
				/// Priority 医嘱优先级
				/// ConfidentialityCode 保密代码，例如VIP
				/// Condition 执行条件。例如血压低于110是否才执行
				/// TextInstruction 医嘱指导
				set tLabOrder.TextInstruction=""
				set tLabOrder.OrderGroup="1"  /// 无处方类型  (医嘱类型)  医嘱分类	       
				/// OrderGroup Comments
				       
				set tLabOrder.ConsultationDepartment=""      /// ConsultationDepartment 下达科室       
				set tLabOrder.ReceivingLocation=""            /// ReceivingLocation 接收医嘱的科室
				/// VerifiedComments 验证说明	       		 
				                     
				Set tLabOrder.Encounter= ##class(CDR.Encounter).ukEncounterNoOpen("OP"_tRS.Get("JZXH"))
		        
		       //Set:($IsObject(tOrder)) pResponse.Order=tOrder
			}
		}
		elseif pRequest.EncounterSource="I"
		{
			Set tSQL= "select b.ZYH,c.YYNM,c.FYMC,a.SBXH 识别序号, a.YJXH,YLXH 医疗序号, a.XMLX 项目类型, YJZX 医技主项, YLDJ 医疗单价, YLSL, a.FYGB 费用归并, ZFBL 自负比例, YZXH,TPLJ 医技图片, JFRQ 日期, a.ZXPB 执行判别, YZGZBZ,b.ZYH 住院号, b.ZYHM 住院号码, b.BRXM 病人姓名, "
			_"b.KDRQ, b.KSDM, b.YSDM, b.ZXRQ,b.ZXKS, b.ZXYS FROM BSOFT.YJ_ZY02 a,BSOFT.YJ_ZY01 b,BSOFT.GY_YLSF c "_
			"where a.sbxh=? and a.yjxh=b.yjxh and c.fyxh=a.ylxh" 
			Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.LabOrderID)
			If tRS.Next()
			{
				Set tLabOrder=##class(CDR.LabOrder).ukOrderIdOpen("IP"_pRequest.LabOrderID)
				set:('$ISOBJECT(tLabOrder)) tLabOrder=##class(CDR.LabOrder).%New()
				//*
				s tLabOrder.OrderId="IP"_pRequest.LabOrderID	
				set tLabOrder.OrderUnits="次" // OrderUnits 医嘱单位 （无）   // YZXH 医嘱序号    
				set tLabOrder.EncounterId="IP"_tRS.Get("ZYH")             // EncounterId
				Set tLabOrder.PlacerId =tRS.Get("KSDM")                   // (医嘱下达系统)
				Set tLabOrder.FillerId =tRS.Get("ZXKS")                   //b. ZXKS 执行科室      	
				//	
		      	set tLabOrder.OrderItemCode=tRS.Get("YYNM")             // c. YYNM  医院内码? (项目编码)
		      	set tLabOrder.OrderItemDesc =tRS.Get("FYMC")            // c. FYMC 项目名称  (医嘱名称)
		      	set tLabOrder.OrderCategory="LAB"             /// 医嘱大类 OrderCategory
		        set tLabOrder.OrderQuantity =tRS.Get("YLSL")           /// YLSL 医疗数量 OrderQuantity 医嘱数量
		        Set tLabOrder.OrderedBy =tRS.Get("YSDM")                       // b. YSDM 医生代码 (医嘱下达者)
				set tLabOrder.EnteringOrganization =tRS.Get("KSDM")             // b. KSDM 科室代码  (医嘱下达者)			
				set tLabOrder.VerifiedBy =tRS.Get("ZXYS")              /// b. ZXYS 执行医师  确认者
		        /// CallbackNumber 召回号码(无)
		        set tLabOrder.StartDateTime=tRS.Get("KDRQ")                     // b. KDRQ 开单日期 （开始时间）
				set tLabOrder.EndDateTime=tRS.Get("ZXRQ")                     // b. ZXRQ 执行日期 （结束时间）
				set tLabOrder.AuthorizationTime=tRS.Get("ZXRQ")         //b. ZXRQ  执行日期 (确认时间)	  确认时间-
		       
		       ///Specimen 样本 （无）
				/// SpecimenCollectedTime  样本采集时间 （无）
				/// SpecimenReceivedTime   样本收到时间 （无）
				/// ReassessmentTime       再评估时间 （无）			
				//set tLabOrder.Duration="日"
		       // set tLabOrder.Frequency="1" 
		        			
		       set tLabOrder.Status="finished"
		       
		       /// Priority 医嘱优先级
		       /// ConfidentialityCode 保密代码，例如VIP
		       /// Condition 执行条件。例如血压低于110是否才执行
		       set tLabOrder.TextInstruction=""  /// TextInstruction 医嘱指导
		       set tLabOrder.OrderGroup ="1"  // b. CFLX 处方类型  (医嘱类型)/// OrderGroup 医嘱分类
		       	       
		       /// OrderGroup Comments	       
		       set tLabOrder.ConsultationDepartment=tRS.Get("KSDM")      /// ConsultationDepartment 下达科室       
		       set tLabOrder.ReceivingLocation="11"            /// ReceivingLocation 接收医嘱的科室
		       /// VerifiedComments 验证说明
		       
		       Set tLabOrder.Encounter=##class(CDR.Encounter).ukEncounterNoOpen("IP"_tRS.Get("ZYH"))
			}
		}
		else
		{
		}
		
		Set:($IsObject(tLabOrder)) pResponse.LabOrder=tLabOrder
		
	}
	catch(e)
	{
	}
	 
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
Method GetDiagnosis(pRequest As HIP.MSG.reqGetDiagnosis, Output pResponse As HIP.MSG.resGetDiagnosis) As %Status
{
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetDiagnosis).%New()
		if pRequest.EncounterSource="O"
		{
			
		Set tSQL= "SELECT ICD10, JBMC,BRBH PID,JZXH,YSDM,ZDSJ from BSOFT.YS_MZ_JBZD WHERE JLBH=?"
		
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.DiagnosisID)
		If tRS.Next()
		{
			Set tDiagnosis=##class(CDR.Diagnosis).ukDiagnosisNoOpen("OP"_pRequest.DiagnosisID)
			set:('$ISOBJECT(tDiagnosis)) tDiagnosis=##class(CDR.Diagnosis).%New()
			set tDiagnosis.DiagnosisId = "OP"_pRequest.DiagnosisID			
			set tDiagnosis.EncounterId="OP"_tRS.Get("JZXH")  //EncounterId
			set tDiagnosis.DiagnosisCode =tRS.Get("ICD10")
			set tDiagnosis.DiagnosisDesc =tRS.Get("JBMC")
			Set tDiagnosis.DiagnosingClinician =tRS.Get("YSDM")
			set tDiagnosis.IdentificationTime =tRS.Get("ZDSJ")
			Set tDiagnosis.DiagnosisType="门诊诊断"    //   DiagnosisType
			Set tDiagnosis.Encounter = ##class(CDR.Encounter).ukEncounterNoOpen("OP"_tRS.Get("JZXH"))
		}
		}
		elseif pRequest.EncounterSource="I"
		{
			//Set tSQL= "SELECT ICD10, JBMC,BRBH PID,JZXH,YSDM,ZDSJ from BSOFT.YS_MZ_JBZD WHERE JLBH=?"
		//Set tSQL= "SELECT ICD10, JBMC,BRBH PID,JZXH,YSDM,ZDSJ from BSOFT.YS_MZ_JBZD WHERE JLBH=?"
		
		Set tSQL="SELECT JZHM,BRBH, ZDLB, JBZH 疾病组号, JBDM,JBMC, MSZD 描述诊断, ZGQK 转归情况, ZDYS, ZDSJ, ZFBZ 作废标志, TJBZ 提交标志 FROM BSOFT.YS_ZY_JBZD WHERE JLBH=?"
		
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.DiagnosisID)
		If tRS.Next()
		{
			Set tDiagnosis=##class(CDR.Diagnosis).ukDiagnosisNoOpen("IP"_pRequest.DiagnosisID)
			set:('$ISOBJECT(tDiagnosis)) tDiagnosis=##class(CDR.Diagnosis).%New()
			set tDiagnosis.DiagnosisId = "IP"_pRequest.DiagnosisID
			set tDiagnosis.EncounterId="IP"_tRS.Get("JZHM")  //EncounterId
			set tDiagnosis.DiagnosisCode =tRS.Get("JBDM")               //JBDM 疾病代码
			set tDiagnosis.DiagnosisDesc =tRS.Get("JBMC")                // JBMC 疾病名称
			Set tDiagnosis.DiagnosingClinician =tRS.Get("ZDYS")               // ZDYS 诊断医生
			set tDiagnosis.IdentificationTime =tRS.Get("ZDSJ")              // ZDSJ 诊断时间			
			Set tDiagnosis.DiagnosisType=tRS.Get("ZDLB") // ZDLB 诊断类别 DiagnosisType
			
			Set tDiagnosis.Encounter = ##class(CDR.Encounter).ukEncounterNoOpen("IP"_tRS.Get("JZHM"))
		}
		}
		else
		{
			
		}
		
		Set:($IsObject(tDiagnosis)) pResponse.Diagnosis= tDiagnosis
	}
	catch(e)
	{
		
	}
	Quit $$$OK
}


Method GetOrder(pRequest As HIP.MSG.reqGetOrder, Output pResponse As HIP.MSG.resGetOrder) As %Status
{
  
	try
	{
		 
		 	
		Set pResponse = ##class(HIP.MSG.resGetOrder).%New()		
		Set ^QPTestLog($I(^QPTestLog))="Started with: "_pRequest.EncounterSource
		if pRequest.EncounterSource="O"
		{   
			//Set tSQL= "SELECT a.SBXH,d.SFZH,c.YYNM,c.MESS,b.JZXH JZXH,b.CFHM,b.CFLX,b.YFSB,b.FYGH,b.KFRQ,b.FYRQ,b.YSDM,b.KSDM,b.BRXM 病人姓名,b.BRID 病人ID,c.YPMC,a.CFSB 处方识别, a.YPXH 药品序号, YPCD 药品产地, XMLX 项目类型, a.CFTS 处方贴数, YPSL,a.YPDJ 药品单价, HJJE 划价金额, YPZS 药品组数, YCSL 一次数量, FYGB 费用归并, ZFBL 自负比例, GYTJ 给药途径, YPYF, YPZH 药品组号, a.YFGG, a.YFDW,a.YFBZ 药房包装, a.SJYL 实际用量, a.PSPB 皮试判别, YYTS 用药天数, YCSL2 一次用量,XSSL 显示数量, MRCS 每日次数, a.CFBZ 处方标志, YCJL 一次剂量,PSJG 皮试结果, PLXH 排列序号,YBZFBL,ZBYP, a.XZYY, SYCS, NWARN, YFBZXX,YBSHJG,YBSHYJ  FROM BSOFT.MS_CF02 a,BSOFT.MS_CF01 b,BSOFT.YK_TYPK c,BSOFT.MS_BRDA d where b.cfsb=a.cfsb and c.ypxh=a.ypxh and b.brid=d.brid and (length(d.sfzh)=15 or length(d.sfzh)=18) and b.JZXH is not null and b.cfbz=1 and a.sbxh=?"
         
			Set tSQL= "SELECT e.YFMC,b.YFSB,b.cflx,a.SBXH,d.SFZH,b.JZXH JZXH,b.CFHM,b.CFLX,b.KFRQ,b.FYRQ,b.YSDM,b.KSDM,b.BRXM 病人姓名,b.BRID 病人ID,c.YPMC,a.CFSB 处方识别, a.YPXH 药品序号, YPCD 药品产地, XMLX 项目类型, a.CFTS 处方贴数, YPSL 药品数量,a.YPDJ 药品单价, HJJE 划价金额, YPZS 药品组数, YCSL 一次数量, FYGB 费用归并, ZFBL 自负比例, GYTJ 给药途径, YPYF 药品用法, YPZH 药品组号, a.YFGG 药房规格, a.YFDW 药房单位,a.YFBZ 药房包装, a.SJYL 实际用量, a.PSPB 皮试判别, YYTS 用药天数, YCSL2 一次用量,XSSL 显示数量, MRCS 每日次数, a.CFBZ 处方标志, YCJL 一次剂量,PSJG 皮试结果, PLXH 排列序号,YBZFBL,ZBYP, a.XZYY, SYCS, NWARN, YFBZXX,YBSHJG,YBSHYJ  FROM BSOFT.MS_CF02 a,BSOFT.MS_CF01 b,BSOFT.YK_TYPK c,BSOFT.MS_BRDA d,BSOFT.yf_yflb e   where b.cfsb=a.cfsb and c.ypxh=a.ypxh and b.brid=d.brid and  b.yfsb=e.yfsb and  (length(d.sfzh)=15 or length(d.sfzh)=18) and b.JZXH is not null and b.cfbz=1 and a.sbxh=?"
			Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.OrderID)
			Set ^QPTestLog($I(^QPTestLog))="ExecuteQuery with : "_tRet
			If tRS.Next()
			{
			Set ^QPTestLog($I(^QPTestLog))="ExecuteQuery has value "
			Set tOrder=##class(CDR.Medication).ukOrderIdOpen("OP"_pRequest.OrderID)
			set:('$ISOBJECT(tOrder)) tOrder=##class(CDR.Medication).%New()


			set tOrder.OrderId="OP"_pRequest.OrderID
			set tOrder.OrderUnits=tRS.Get("YFDW")                // a. YFDW 药房单位 OrderUnits 医嘱单位  	      
			set tOrder.EncounterId="OP"_tRS.Get("JZXH")          //EncounterId
			      
			Set tOrder.PlacerId =tRS.Get("KSDM")               // KSDM  (医嘱下达系统)
			Set tOrder.FillerId =tRS.Get("KSDM")               // KSDM   
			set tOrder.OrderItemCode=tRS.Get("YYNM")           //  c. YYNM  医院内码? (项目编码)
			set tOrder.OrderItemDesc =tRS.Get("YPMC")_"  "_tRS.Get("YFGG")        //c. YPMC 药品名称 + a. YFGG 药房规格  (医嘱名称)

			set tOrder.OrderCategory="Pharmacy(药品)"            /// 医嘱大类 OrderCategory
			set tOrder.OrderQuantity =tRS.Get("YPSL")            ///  YPSL 药品数量 OrderQuantity 医嘱数量
			Set tOrder.OrderedBy =tRS.Get("YSDM")                       // b. YSDM 医生代码  (医嘱下达者)			
			set tOrder.EnteringOrganization =tRS.Get("KSDM")             // b. KSDM 科室代码  (医嘱下达者)

			set tOrder.VerifiedBy =tRS.Get("FYGH")                 /// b. FYGH 发药工号 VerifiedBy 确认者
			/// CallbackNumber 召回号码(无)	        		
			set tOrder.StartDateTime=tRS.Get("KFRQ")                     // b. KFRQ 开方日期 （开始时间）
			set tOrder.EndDateTime=tRS.Get("KFRQ")                     // b. KFRQ 发药日期  （结束时间）			
			set tOrder.AuthorizationTime=tRS.Get("FYRQ")                     // b. FYRQ 发药日期 (确认时间)			


			///Specimen 样本 （无）
			/// SpecimenCollectedTime  样本采集时间 （无）
			/// SpecimenReceivedTime   样本收到时间 （无）
			/// ReassessmentTime       再评估时间 （无）

			set tOrder.Frequency=tRS.Get("YPYF")   //    ///   YPYF  药品用法  （ 执行频率）
			set tOrder.Duration="日"               /// Duration  执行间隔	      
			set tOrder.practitioner=tRS.Get("YSDM")          // b. YSDM 医生代码  开立人（必填）
			set tOrder.prescription=tRS.Get("CFHM")           // b. CFHM 或 a. CFSB 处方识别
			set tOrder.Status="finished"

			/// Priority 医嘱优先级
			/// ConfidentialityCode 保密代码，例如VIP
			/// Condition 执行条件。例如血压低于110是否才执行
			Set tOrder.TextInstruction=tRS.Get("MESS")  /// MESS 药品说明 TextInstruction 医嘱指导 
			set tOrder.OrderGroup=tRS.Get("CFLX")    /// b. CFLX 处方类型  (医嘱类型)  医嘱分类
			/// OrderGroup Comments	
			Set tOrder.ConsultationDepartment =tRS.Get("KSDM")             // b. KSDM 科室代码   (下达科室)   	       

			Set tOrder.ReceivingLocation =tRS.Get("YFMC")    ///  b.YFSB 药房识别 ReceivingLocation 接收医嘱的科室
			/// VerifiedComments 验证说明

			Set tOrder.Encounter= ##class(CDR.Encounter).ukEncounterNoOpen("OP"_tRS.Get("JZXH"))
	       
		}
			
		}
		
		elseif pRequest.EncounterSource="I"
		{
			  Set tSQL= "SELECT JLXH,c.MESS,c.YYNM,c.YFDW, a.ZYH, YZMC, a.YPXH, a.YPCD 药品产地, XMLX 项目类型, YPLX 药品类型, MRCS 每日次数, YCJL 一次剂量, YCSL, MZCS 每周次数, KSSJ, QRSJ, TZSJ, a.YPDJ 药品单价, YPYF 药品用法,"
			  _" YSGH, TZYS 停嘱医生, a.CZGH, FHGH, SYBZ 使用标志, SRKS, a.ZFPB 自负判别, YJZX 医技主项, YJXH 医技序号, TJHM 特检号码, ZXKS, APRQ 安排日期, "
			  _"YZZH,SYPC, FYSX 发药属性, YEPB 婴儿判别, YFSB 药房识别, LSYZ, LSBZ 历史标志, "
			  _"YZPB 医嘱判别, JFBZ 记费标志, BZXX 备注, HYXM 化验项目, a.FYFS 发药方式, a.TPN, YSBZ 医生医嘱标志, YSTJ 医生提交标志, FYTX 发药提醒, YZPX 医嘱排序, SQWH 申请文号, YSYZBH , SQID 申请ID, XML 申请单XML, SQDMC 申请单名称, "
			  _"TSBZ , ZYBZ, a.YBBZ, ZTXH, ZTMC, YLBZ, TMBZ, PREMARK, BLBZ, ZFBZ, JCBZ, YFSSBZ, YEWYH, SAMPLETYPE, KJYWYYMD, a.YFBZ, LJYZ, YZZT, BYBZ, HSZXSJ, HSZXGH, YZGZBZ, KZSJ, JFRQ FROM BSOFT.ZY_BQYZ a,BSOFT.ZY_BRRY b,BSOFT.YK_TYPK c "
			  _" where  a.zyh=b.zyh and a.ypxh=c.ypxh and  a.XMLX =1 and (length(b.sfzh)=15 or length(b.sfzh)=18) and  a.jlxh=?" 
			  Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.OrderID)
		If tRS.Next()
		{
			Set tOrder=##class(CDR.Medication).ukOrderIdOpen("IP"_pRequest.OrderID)
			set:('$ISOBJECT(tOrder)) tOrder=##class(CDR.Medication).%New()
		 
	      s tOrder.OrderId="IP"_pRequest.OrderID	      
	      set tOrder.EncounterId="IP"_tRS.Get("ZYH")  //EncounterId
	      set tOrder.OrderUnits=tRS.Get("YFDW")    // c. YFDW 药房单位 OrderUnits 医嘱单位  
	      
	      Set tOrder.PlacerId =tRS.Get("SRKS")                      // SRKS 输入科室  (医嘱下达系统)
			Set tOrder.FillerId =tRS.Get("ZXKS")                     // ZXKS 执行科室
	      
	       set tOrder.OrderItemCode=tRS.Get("YYNM")              //  c. YYNM  医院内码? (项目编码)
	        set tOrder.OrderItemDesc =tRS.Get("YZMC")           // YZMC 医嘱名称  (医嘱名称)
	        
	        set tOrder.OrderCategory="Pharmacy(药品)"              /// 医嘱大类 OrderCategory
	        set tOrder.OrderQuantity =tRS.Get("YCSL")            ///  YCSL 一次数量 OrderQuantity 医嘱数量
	        Set tOrder.OrderedBy =tRS.Get("YSGH")                       // YSGH 医生工号  (医嘱下达者)			
			set tOrder.EnteringOrganization =tRS.Get("SRKS")             // b. KSDM 科室代码  (医嘱下达者)
			
			set tOrder.VerifiedBy =tRS.Get("FHGH")                 /// FHGH 复核工号  VerifiedBy 确认者
	        /// CallbackNumber 召回号码(无)	        
			set tOrder.StartDateTime=tRS.Get("KSSJ")                     // a. KSSJ 开始时间 （开始时间）
			set tOrder.EndDateTime=tRS.Get("TZSJ")                     // c. TZSJ 停嘱时间 （结束时间）
			set tOrder.AuthorizationTime=tRS.Get("QRSJ")                     //QRSJ 确认时间 (确认时间)	
			
	       	
	         			
			
			///Specimen 样本 （无）
			/// SpecimenCollectedTime  样本采集时间 （无）
			/// SpecimenReceivedTime   样本收到时间 （无）
			/// ReassessmentTime       再评估时间 （无）		 
			
			set tOrder.Frequency=tRS.Get("SYPC")           ///   SYPC 使用频次  （ 执行频率）
			set tOrder.Duration="日"                        /// Duration  执行间隔	      
	       	set tOrder.practitioner=tRS.Get("CZGH")          // a. CZGH 操作工号 开立人（必填）
	        set tOrder.prescription=tRS.Get("YZZH")           //  YZZH 医嘱组号 
	        set tOrder.Status="finished"
	        
	        /// Priority 医嘱优先级
	       /// ConfidentialityCode 保密代码，例如VIP
	       /// Condition 执行条件。例如血压低于110是否才执行
	       Set tOrder.TextInstruction=tRS.Get("MESS")  /// MESS 药品说明 TextInstruction 医嘱指导 
	       set tOrder.OrderGroup=tRS.Get("LSYZ")  // LSYZ 临时医嘱  (医嘱类型) LSYZ 临时医嘱
	       /// OrderGroup Comments	
	       Set tOrder.ConsultationDepartment =tRS.Get("SRKS")             // SRKS 科室代码   (下达科室)   	       
	       
	       set tOrder.ReceivingLocation=tRS.Get("YFSB")   /// 药房识别   （ 接收医嘱的科室）
	       /// VerifiedComments 验证说明
	        
	        Set tOrder.Encounter= ##class(CDR.Encounter).ukEncounterNoOpen("IP"_tRS.Get("ZYH"))
		}
		}
		else
		{
			
		}
		
		  Set:($IsObject(tOrder)) pResponse.Order=tOrder
		
	}
	catch(e)
	{
		
	}
	 
	Quit $$$OK
}

/// LabOrder 
Method GetLabOrder(pRequest As HIP.MSG.reqGetLabOrder, Output pResponse As HIP.MSG.resGetLabOrder) As %Status
{
  
	try
	{
		 
		 	
		Set pResponse = ##class(HIP.MSG.resGetLabOrder).%New()		
		
		if pRequest.EncounterSource="O"
		{
			Set tSQL= "SELECT c.YYNM,c.FYMC,a.SBXH 识别序号, a.YJXH,JZXH,YLXH,SFZH,MZHM, a.XMLX 项目类型, YJZX 医技主项, YLDJ 医疗单价, YLSL, HJJE, a.FYGB 费用归并, ZFBL 自负比例, BZXX, YBZFBL, CLJLXH, FJBZ, ZTXH, ZTMC, XMZH, FJBJSL, YBSHJG, YBSHYJ,"_
            "b.FPHM 发票号码, b.MZXH 门诊序号, b.BRID 病人ID, b.BRXM 病人姓名, b.KDRQ, b.KSDM, b.YSDM, b.ZXRQ, b.ZXKS, b.ZXYS, b.ZXPB 执行判别 FROM BSOFT.MS_YJ02 a,BSOFT.MS_YJ01 b,BSOFT.GY_YLSF c,BSOFT.MS_BRDA d "_
            "where a.SBXH=? and a.yjxh=b.yjxh and  c.fyxh=a.ylxh and b.brid=d.brid and (length(d.sfzh)=15 or length(d.sfzh)=18) AND JZXH is not null"
                   Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.LabOrderID)
		If tRS.Next()
		{
			Set tLabOrder=##class(CDR.LabOrder).ukOrderIdOpen("OP"_pRequest.LabOrderID)
			set:('$ISOBJECT(tLabOrder)) tLabOrder=##class(CDR.LabOrder).%New()
		 
	      set tLabOrder.OrderId="OP"_pRequest.LabOrderID	  
	      set tLabOrder.OrderUnits="次"                              // 医嘱单位 （无）    
	      set tLabOrder.EncounterId="OP"_tRS.Get("JZXH")  //EncounterId      
	       	 
	       	 Set tLabOrder.PlacerId =tRS.Get("KSDM")                      // KSDM  (医嘱下达系统)
			Set tLabOrder.FillerId =tRS.Get("ZXKS")                     //b. ZXKS 执行科室
	        set tLabOrder.OrderItemCode=tRS.Get("YYNM")       //  c. YYNM  医院内码? (项目编码)
	        set tLabOrder.OrderItemDesc =tRS.Get("FYMC")             // c. FYMC 项目名称  (医嘱名称)
	        
	        
	        set tLabOrder.OrderCategory="LAB" /// 医嘱大类 OrderCategory
	        set tLabOrder.OrderQuantity =tRS.Get("YLSL") /// YLSL 医疗数量 OrderQuantity 医嘱数量
	        Set tLabOrder.OrderedBy =tRS.Get("YSDM")                       // b. YSDM 医生代码  (医嘱下达者)
			set tLabOrder.EnteringOrganization =tRS.Get("KSDM")             // b. KSDM 科室代码  (医嘱下达者)
			
			set tLabOrder.VerifiedBy =tRS.Get("ZXYS")        /// b. ZXYS 执行医师 VerifiedBy 确认者
	        /// CallbackNumber 召回号码(无)
	        set tLabOrder.StartDateTime=tRS.Get("KDRQ")                     // b. KDRQ 开单日期 （开始时间）
			set tLabOrder.EndDateTime=tRS.Get("ZXRQ")                     // b. ZXRQ 执行日期  （结束时间）
			set tLabOrder.AuthorizationTime=tRS.Get("ZXRQ")           /// b. ZXRQ 执行日期  确认时间-
			
			///Specimen 样本 （无）
			/// SpecimenCollectedTime  样本采集时间 （无）
			/// SpecimenReceivedTime   样本收到时间 （无）
			/// ReassessmentTime       再评估时间 （无）		
		    //s tLabOrder.Duration=""
	        //s tLabOrder.Frequency="" 
	        s tLabOrder.Status="finished"	       
	       
	       /// Priority 医嘱优先级
	       /// ConfidentialityCode 保密代码，例如VIP
	       /// Condition 执行条件。例如血压低于110是否才执行
	       /// TextInstruction 医嘱指导
	       set tLabOrder.TextInstruction=""
	       set tLabOrder.OrderGroup="1"  /// 无处方类型  (医嘱类型)  医嘱分类	       
	       /// OrderGroup Comments
	       	       
	       set tLabOrder.ConsultationDepartment=""      /// ConsultationDepartment 下达科室       
	       set tLabOrder.ReceivingLocation=""            /// ReceivingLocation 接收医嘱的科室
	       /// VerifiedComments 验证说明	       		 
			                     
			Set tLabOrder.Encounter= ##class(CDR.Encounter).ukEncounterNoOpen("OP"_tRS.Get("JZXH"))
	        
	       //Set:($IsObject(tOrder)) pResponse.Order=tOrder
		}
			
		}
		
		elseif pRequest.EncounterSource="I"
		{
			  Set tSQL= "select b.ZYH,c.YYNM,c.FYMC,a.SBXH 识别序号, a.YJXH,YLXH 医疗序号, a.XMLX 项目类型, YJZX 医技主项, YLDJ 医疗单价, YLSL, a.FYGB 费用归并, ZFBL 自负比例, YZXH,TPLJ 医技图片, JFRQ 日期, a.ZXPB 执行判别, YZGZBZ,b.ZYH 住院号, b.ZYHM 住院号码, b.BRXM 病人姓名, "
			  _"b.KDRQ, b.KSDM, b.YSDM, b.ZXRQ,b.ZXKS, b.ZXYS FROM BSOFT.YJ_ZY02 a,BSOFT.YJ_ZY01 b,BSOFT.GY_YLSF c "_
			  "where a.sbxh=? and a.yjxh=b.yjxh and c.fyxh=a.ylxh" 
			  Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.LabOrderID)
		If tRS.Next()
		{
			Set tLabOrder=##class(CDR.LabOrder).ukOrderIdOpen("IP"_pRequest.LabOrderID)
			set:('$ISOBJECT(tLabOrder)) tLabOrder=##class(CDR.LabOrder).%New()
		 //*
	      s tLabOrder.OrderId="IP"_pRequest.LabOrderID	
	      set tLabOrder.OrderUnits="次"   // OrderUnits 医嘱单位 （无）   // YZXH 医嘱序号    
	      set tLabOrder.EncounterId="IP"_tRS.Get("ZYH")             // EncounterId
	      Set tLabOrder.PlacerId =tRS.Get("KSDM")                   // (医嘱下达系统)
	      Set tLabOrder.FillerId =tRS.Get("ZXKS")                   //b. ZXKS 执行科室      	
	      //	
	      	set tLabOrder.OrderItemCode=tRS.Get("YYNM")             // c. YYNM  医院内码? (项目编码)
	      	set tLabOrder.OrderItemDesc =tRS.Get("FYMC")            // c. FYMC 项目名称  (医嘱名称)
	      	set tLabOrder.OrderCategory="LAB"             /// 医嘱大类 OrderCategory
	        set tLabOrder.OrderQuantity =tRS.Get("YLSL")           /// YLSL 医疗数量 OrderQuantity 医嘱数量
	        Set tLabOrder.OrderedBy =tRS.Get("YSDM")                       // b. YSDM 医生代码 (医嘱下达者)
			set tLabOrder.EnteringOrganization =tRS.Get("KSDM")             // b. KSDM 科室代码  (医嘱下达者)			
			set tLabOrder.VerifiedBy =tRS.Get("ZXYS")              /// b. ZXYS 执行医师  确认者
	        /// CallbackNumber 召回号码(无)
	        set tLabOrder.StartDateTime=tRS.Get("KDRQ")                     // b. KDRQ 开单日期 （开始时间）
			set tLabOrder.EndDateTime=tRS.Get("ZXRQ")                     // b. ZXRQ 执行日期 （结束时间）
			set tLabOrder.AuthorizationTime=tRS.Get("ZXRQ")         //b. ZXRQ  执行日期 (确认时间)	  确认时间-
	       
	       ///Specimen 样本 （无）
			/// SpecimenCollectedTime  样本采集时间 （无）
			/// SpecimenReceivedTime   样本收到时间 （无）
			/// ReassessmentTime       再评估时间 （无）			
			//set tLabOrder.Duration="日"
	       // set tLabOrder.Frequency="1" 
	        			
	        set tLabOrder.Status="finished"
	       
	       /// Priority 医嘱优先级
	       /// ConfidentialityCode 保密代码，例如VIP
	       /// Condition 执行条件。例如血压低于110是否才执行
	       set tLabOrder.TextInstruction=""  /// TextInstruction 医嘱指导
	       set tLabOrder.OrderGroup ="1"  // b. CFLX 处方类型  (医嘱类型)/// OrderGroup 医嘱分类
	       	       
	       /// OrderGroup Comments	       
	       set tLabOrder.ConsultationDepartment=tRS.Get("KSDM")      /// ConsultationDepartment 下达科室       
	       set tLabOrder.ReceivingLocation="11"            /// ReceivingLocation 接收医嘱的科室
	       /// VerifiedComments 验证说明
	       
	        Set tLabOrder.Encounter=##class(CDR.Encounter).ukEncounterNoOpen("IP"_tRS.Get("ZYH"))
		}
		}
		else
		{
			
		}
		
		  Set:($IsObject(tLabOrder)) pResponse.LabOrder=tLabOrder
		
	}
	catch(e)
	{
		
	}
	 
	Quit $$$OK
}
*/
]]></Content>
</UDLText>

<Method name="GetResult">
<Description>
 同步检验结果 Result</Description>
<FormalSpec>pRequest:HIP.MSG.reqGetResult,*pResponse:HIP.MSG.resGetResult</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetResult).%New()

		set tSQL="SELECT b.KSMC 执行科室,c.XM 执行人,SAMPLENO 样本号, TESTID, TESTRESULT 项目结果, REFLO 项目低值, REFHI 项目高值, HINT 指标图标, UNIT 单位 FROM ZHLIS.L_TESTRESULT a,ZHLIS.GY_KSDM b,ZHLIS.GY_ZGXX c "
		_"where b.ksdm=a.LABDEPARTMENT and c.ZGID=a.OPERATOR and  SAMPLENO=?"

		Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.SAMPLENO)	
		
		if pRequest.EpisodeType="1"  // 1 为门诊
		{
			Set tResult=##class(CDR.Result).ukResultIDOpen(tRS.Get("TESTID")) //TESTID 项目ID
			set:('$ISOBJECT(tResult)) tResult=##class(CDR.Result).%New()
			
			s tResult.ResultID="" //pRequest.ResultID
		  	///	set tResult.EncounterNumber="OP"_pRequest.EncounterID	      
	        set tResult.PatientId="OP"_"patientID"  
	     	///Set tResult.LabOrder= ##class(CDR.LabOrder).ukOrderIdOpen("OP"_tRS.Get("LabOrderID"))   
	        
			Set tSQL= ""
			Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.LabOrderID)
			while tRS.Next()
			{
				Set tLabOrder=##class(CDR.LabOrder).ukOrderIdOpen("1|"_pRequest.LabOrderID)
				set:('$ISOBJECT(tLabOrder)) tLabOrder=##class(CDR.LabOrder).%New()

				s tLabOrder.OrderId="1|"_pRequest.LabOrderID	      
				set tLabOrder.EncounterId="1|"_tRS.Get("JZXH")  //EncounterId

				s tLabOrder.Status="finished"

				set tLabOrder.OrderItemCode=tRS.Get("YJXH")  // a. YJXH 医技序号 (处方号码)
				//set tOrder.  =tRS.Get("CFLX")  // b. CFLX 处方类型  (医嘱类型)			 
				set tLabOrder.StartDateTime=tRS.Get("KDRQ")                     // b. KDRQ 开单日期 （开始时间）
				set tLabOrder.EndDateTime=tRS.Get("ZXRQ")                     // b. ZXRQ 执行日期  （结束时间）
				set tLabOrder.AuthorizationTime=tRS.Get("ZXRQ")                     // b. ZXRQ 执行日期 (确认时间)
						
				Set tLabOrder.OrderedBy =tRS.Get("YSDM")                       // b. YSDM 医生代码  (医嘱下达者)
				set tLabOrder.EnteringOrganization =tRS.Get("KSDM")             // b. KSDM 科室代码  (医嘱下达者)

				Set tLabOrder.PlacerId ="outpatient"                  //   (医嘱下达系统)
				set tLabOrder.OrderItemDesc =tRS.Get("FYMC")             // c. FYMC 项目名称  (医嘱名称)

				Set tLabOrder.Encounter= ##class(CDR.Encounter).ukEncounterNoOpen("1|"_tRS.Get("JZXH"))

				//Set:($IsObject(tOrder)) pResponse.Order=tOrder

			}
		}
		elseif pRequest.EpisodeType="2"
		{
		}
		else
		{
		}
		Set:($IsObject(tResult)) pResponse.Result=tResult
	}
	catch(e)
	{
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetObservation">
<Description>
同步体征</Description>
<FormalSpec>pRequest:HIP.MSG.reqGetObservation,*pResponse:HIP.MSG.resGetObservation</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetObservation).%New()
		if pRequest.EncounterSource="I"
		{
			Set tSQL= "SELECT  a.CJH ID,a.ZYH,c.SFZH,c.ZYHM, CJZH 创建主号,"
			Set tSQL=tSQL_ "b.TZLX, a.XMH,XMMC, JHBZ, CJSJ,  a.BRKS 病人科室, "
			Set tSQL=tSQL_ "a.BRBQ 病人病区, a.BRCH 病人床号, TZNR, XMXB, "
			Set tSQL=tSQL_ "FCBZ, FCGL, TWDXS, JLSJ, JLGH, ZFBZ, BZXX, YCBZ, JGID "
			Set tSQL=tSQL_ "FROM BSOFT.BQ_SMTZ a,BSOFT.BQ_TZXM b,BSOFT.ZY_BRRY c "
			Set tSQL=tSQL_ "where a.CJH=? and a.xmh=b.xmh and a.ZFBZ=0 and a.zyh=c.zyh "
			Set tSQL=tSQL_ "and (length(c.sfzh)=15 or length(c.sfzh)=18) and b.TZLX=1"

			Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.ObservationID)
			If tRS.Next()
			{
				Set tObservation=##class(CDR.Observation).ukObsNoOpen(pRequest.ObservationID)
				set:('$ISOBJECT(tObservation)) tObservation=##class(CDR.Observation).%New()
				set tObservation.ObsId = pRequest.ObservationID			
				set tObservation.EncounterId="IP"_tRS.Get("ZYH")  //EncounterId				
	 
				set tObservation.ObservationGroup ="PE"    //体征   非来自 化验,镜检,B超,影像
				  //tRS.Get("TZLX")  /// 体征=PE;检验=LAB;体征=PE;B超=US;影像=IMG; // b. TZLX 体征类型 体征组：化验,镜检,体征,B超,影像			 
				Set tObservation.ObservationCode =tRS.Get("XMH")  // a. XMH 项目号 体征编码			
				set tObservation.ObservationTime =tRS.Get("JLSJ")   // JLSJ    体征时间			
				set tObservation.ObservationDesc =tRS.Get("XMMC")  // xmmc 体征描述
				 
				//Set tObservation.ResultInterpretation =tRS.Get("TZNR")  // TZNR 体征内容 体征结果描述			
				//set tObservation.BodySite =tRS.Get("身体部位")   //   身体部位			
				//set tObservation.ResultType =tRS.Get("结果类型")  // 结果类型
				
				Set tValue = tRS.Get("TZNR")
				If (tValue = +tValue)
				{
					set tObservation.ResultType ="NM"
				}
				Else
				{
					set tObservation.ResultType ="ST"
				}
				Set tObservation.Value =tValue  // TZNR 体征内容  体征值
				
				//set tObservation.ValueUnits =tRS.Get("体征值单位")   //   体征值单位			
				//set tObservation.SubId =tRS.Get("子项序号")  // 子项序号 
				 
				Set tObservation.Comments =tRS.Get("XMXB")  // XMXB 说明			
				set tObservation.Clinician =tRS.Get("JLGH")   //  JLGH 记录工号 记录医生			
				set tObservation.PerformedAt =tRS.Get("JLGH")  // JLGH 记录工号 执行人			 
				Set tObservation.Status ="finished"  // 状态
				
				//set tObservation.ReferenceRange =tRS.Get("参考范围")   //   参考范围 
				
				Set tObservation.Encounter = ##class(CDR.Encounter).ukEncounterNoOpen("IP"_tRS.Get("ZYH"))
			}
		}
		else
		{
		}
		
		Set:($IsObject(tObservation)) pResponse.Observation= tObservation
	}
	catch(e)
	{
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetDiaReport">
<Description>
DiaReport DiagnosticReport 诊断（检查？）报告 </Description>
<FormalSpec>pRequest:HIP.MSG.reqGetDiaReport,*pResponse:HIP.MSG.resGetDiaReport</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetDiaReport).%New()		
		
		if pRequest.EncounterSource="O"
		{
			Set tReport=##class(CDR.DiagnosticReport).ukReportIDOpen("1|"_pRequest.DiaReportID)
			set:('$ISOBJECT(tReport)) tReport=##class(CDR.DiagnosticReport).%New()

			s tReport.ResultID="1|"_pRequest.DiaReportID
			//set tResult.EncounterNumber="1|"_pRequest.EncounterID	      
	         //set tResult.PatientId="1|"_pRequest.PatientID  //tRS.Get("PatientID")  // EncounterNumber //"1|"_tRS.Get("JZXH")  //EncounterId
	      
	      //Set tResult.LabOrder= ##class(CDR.LabOrder).ukOrderIdOpen("1|2159246")  // ("1|"_tRS.Get("LabOrderID"))
	        
			/*
			Set tSQL= ""
			       Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.LabOrderID)
		If tRS.Next()
		{
			Set tLabOrder=##class(CDR.LabOrder).ukOrderIdOpen("1|"_pRequest.LabOrderID)
			set:('$ISOBJECT(tLabOrder)) tLabOrder=##class(CDR.LabOrder).%New()
		 
	      s tLabOrder.OrderId="1|"_pRequest.LabOrderID	      
	      set tLabOrder.EncounterId="1|"_tRS.Get("JZXH")  //EncounterId
	      
	       	 
	        s tLabOrder.Status="finished"
	       
	        set tLabOrder.OrderItemCode=tRS.Get("YJXH")  // a. YJXH 医技序号 (处方号码)
			//set tOrder.  =tRS.Get("CFLX")  // b. CFLX 处方类型  (医嘱类型)			 
			set tLabOrder.StartDateTime=tRS.Get("KDRQ")                     // b. KDRQ 开单日期 （开始时间）
			set tLabOrder.EndDateTime=tRS.Get("ZXRQ")                     // b. ZXRQ 执行日期  （结束时间）
			set tLabOrder.AuthorizationTime=tRS.Get("ZXRQ")                     // b. ZXRQ 执行日期 (确认时间)
						
			Set tLabOrder.OrderedBy =tRS.Get("YSDM")                       // b. YSDM 医生代码  (医嘱下达者)
			set tLabOrder.EnteringOrganization =tRS.Get("KSDM")             // b. KSDM 科室代码  (医嘱下达者)
			 
			Set tLabOrder.PlacerId ="outpatient"                  //   (医嘱下达系统)
			set tLabOrder.OrderItemDesc =tRS.Get("FYMC")             // c. FYMC 项目名称  (医嘱名称)
		
		  
	        
	        Set tLabOrder.Encounter= ##class(CDR.Encounter).ukEncounterNoOpen("1|"_tRS.Get("JZXH"))
	        
	       //Set:($IsObject(tOrder)) pResponse.Order=tOrder
	       
		}
			*/
		}
		elseif pRequest.EncounterSource="I"
		{
		}
		else
		{
		}
		Set:($IsObject(tReport)) pResponse.DiagnosticReport=tReport
	}
	catch(e)
	{
	}
	 
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetProcedure">
<Description>
同步手术</Description>
<FormalSpec>pRequest:HIP.MSG.reqGetProcedure,*pResponse:HIP.MSG.resGetProcedure</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetProcedure).%New()
		if pRequest.EncounterSource="I"
		{
			
			Set tSQL= "SELECT SSBH ID, a.ZYH,b.SFZH,B.ZYHM, KSSJ, JSSJ 结束时间, SSNM, SSMC, SSFJ 手术房间, SSTH 手术台号, SSYS, SSYS_2, SSYZ 手术一助, SSEZ 手术二助, SSSZ 手术三助, SXYS 实习医师, XSHS 洗手护士, XSHS_2 洗手护士二, XHHS 巡回护士, XHHS_2 巡回护士二, SXSL 输血数量, SXXX 输血血型, SQZD 术前诊断, SHZD 术后诊断, ZDFH 诊断符合, QKDJ 切口等级, SSGC 手术过程, JLRY 记录人员, a.CZGH 操作工号, SYKSSBZ, FYQZSSBZ "
	              _"FROM BSOFT.SM_SSJL a,BSOFT.ZY_BRRY b  where SSBH=? and a.zyh=b.zyh"
			Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.ProcedureID)
			If tRS.Next()
			{
				Set tProcedure=##class(CDR.Procedure).ukOrderIdOpen(pRequest.ProcedureID)
				set:('$ISOBJECT(tProcedure)) tProcedure=##class(CDR.Procedure).%New()
				set tProcedure.OrderId = pRequest.ProcedureID	
				
				set tProcedure.EncounterId = "IP"_tRS.Get("ZYH")
				set tProcedure.ProcedureCode = tRS.Get("SSNM")   // SSNM 手术内码 手术代码
				
				set tProcedure.ProcedureDesc = tRS.Get("SSMC")   // SSMC 手术名称 手术描述
				set tProcedure.Performer = tRS.Get("SSYS")   //  SSYS 手术医师 手术医生
				set tProcedure.ProcedureTime = tRS.Get("KSSJ")   // KSSJ 开始时间  手术时间-
				//set tProcedure.Anesthesia = tRS.Get("SSNM")   //   麻醉方式
				set tProcedure.Anesthesiologist = tRS.Get("SSYS_2")   // SSYS_2 手术医师二 麻醉师
				//set tProcedure.bodySite = tRS.Get("SSNM")   // 手术身体部位
				//set tProcedure.outcome = tRS.Get("SSNM")   //   手术结果
				//set tProcedure.Complication = tRS.Get("SSNM")   // 手术并发症
				
				set tProcedure.Notes = tRS.Get("SSGC")   // SSGC 手术过程 手术记录
				
				//set tProcedure.Reports = tRS.Get("SSNM")   // 手术报告
				//set tProcedure.Indication = tRS.Get("SSNM")   // 手术原因
				 
				Set tProcedure.Encounter = ##class(CDR.Encounter).ukEncounterNoOpen("IP"_tRS.Get("ZYH"))
			}
		}
		else
		{
		}
		
		Set:($IsObject(tProcedure)) pResponse.Procedure= tProcedure
	}
	catch(e)
	{
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetEncounterNoByPatientAndDate">
<Description>
Get encounter information base on patient No and episode date
since for lab result, there is no corresponding episode information, so need to get encounter base on patient and lab test date. </Description>
<FormalSpec>pRequest:HIP.MSG.reqGetEncounterNoByPatientAndDate,*pResponse:HIP.MSG.resGetEncounterNoByPatientAndDate</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetEncounterNoByPatientAndDate).%New()
		if pRequest.EpisodeType="O"
		{
			Set tSQL= " SELECT max(JZXH) as JZXH FROM BSOFT.YS_MZ_JZLS WHERE BRBH=? AND KSSJ<=to_date(?,'YYYY-MM-DD')"
		    Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.PatientID,$ZD(pRequest.EpisodeDate,3))
		    If tRS.Next()
		     {
			  set:(tRS.Get("JZXH")'="") pResponse.EncounterNo=tRS.Get("JZXH")  //EncounterId
			 }	  
		}
		elseif pRequest.EpisodeType="I"
		{
			Set tSQL= " "
			Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.PatientID,$ZD(pRequest.EpisodeDate,3))
		   If tRS.Next()
		   {
			 set:(tRS.Get("JZXH")'="") pResponse.EncounterNo=tRS.Get("JZXH")  //EncounterId		
		    }	
		}
	}
	catch(e)
	{
		
	}
	 
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetPatientNIDInfo">
<FormalSpec>pRequest:HIP.MSG.reqGetPNIDInfoByPNO,*pResponse:HIP.MSG.resGetPNIDInfoByPNO</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pResponse = ##class(HIP.MSG.resGetPNIDInfoByPNO).%New()
	if pRequest.EpisodeType="O"
	{
		Set tSQL= "SELECT BRID,SFZH FROM  BSOFT.MS_BRDA WHERE MZHM =?"
		Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.PatientNo)
	
		If tRS.Next()
	   {		 
		 set pResponse.PatientID=tRS.Get("BRID")
		 set pResponse.PatientNID=tRS.Get("SFZH")	 
		
	   }
	}
	elseif pRequest.EpisodeType="I"
	{
	}	
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdatePatientInfo">
<FormalSpec>pRequest:HIP.MSG.reqEditPatient,*pResponse:HIP.MSG.resEditPatient</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pResponse = ##class(HIP.MSG.resEditPatient).%New()
	
	Set tSQL= "SELECT ZYH, ZYHM, BAHM, MZHM, BRXZ, GFZH, BRXM, BRXB, CSNY, SFZH, HYZK,ZYDM, SFDM, JGDM, "
			_"MZDM, GJDM, DWBH, GZDW, DWDH, DWYB, HKDZ, HKYB, LXRM, LXGX,LXDZ, LXDH, PZHM, SBHM, DBRM, DBGX, "
			_"ZZTX, DBBZ, BRKS, BRBQ, BRCH, DJRQ, RYRQ, CYRQ, CYPB, CYFS, CZGH, RYQK, BRQK, HLJB, YSDM, BRXX, "
			_"HZKS, JCKS, MZYS, ZYYS, ZSYS, ZZYS,QZRQ, KSRQ, JSRQ, JSCS, JZRQ, HZRQ, XGPB, BAPB, BRGL, BRKL, BZ, "
			_"BRQM, JTDH, YBKH, JZKH,SZYS, ZLXZ, SPJE, SJZY, DJBZ, DJID, DJJE, YSJS, ZKZT, GWYBZ, YBJG, RYLB, RYJB, "
			_"YBSH, JBGR, CWBZ, CWGR, QFBZ, FDJE, TJGR, TZGR, TYGR, YZYSBH, ZYGR, YBHS, BLQR, LSQFJE, LSJBGJ, LSGWYGRJE,LSBCYL, "
			_"LSJBGR, GWYQFJE, BCYLFDJE, SHGH, HSGH, DEBZ, BDBL, JSLB, NHH, SXZZBR, SXZZYY, SYDC, DZBZ, MZJZ, BCJE, BAOXIAO_TYPE, "
			_"BRXM_BABY, BRXB_BABY, CSNY_BABY, CODE_BABY, CSNY_CHILD, SFZ, SFQK, JZKLB, JZDJID, SHXH, SHRQ, HSRQ, REYBSH, ID, BAPFBZ, "
			_"BAPFXH FROM BSOFT.ZY_BRRY WHERE ZYH=?"
			
	Set tRet = ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.PatientID)
	If tRS.Next()
	{
		Set tPatient=##class(CDR.Patient).ukIDNoOpen(pRequest.PatientNID)
		 
		IF ('$ISOBJECT(tPatient)) 
		{
			set tPatient=##class(CDR.Patient).%New()
			set tPatient.MPIID ="IP"_tRS.Get("ZYH")  //门诊住院ID
		} 
		
		
		set tPatient.InpatientID=tRS.Get("ZYHM")  //住院病人 住院号
		
		set tPatient.IDNo =tRS.Get("SFZH")
		set tPatient.FirstName =tRS.Get("BRXM")
		set tPatient.Gender =tRS.Get("BRXB")
		if tRS.Get("CSNY")'=""
		{
			set tPatient.BirthTime =$ZDH(tRS.Get("CSNY"),3)
		}			
		//
		set tPatient.Blood=tRS.Get("BRXX")   // BRXX 病人血型
		set tPatient.MaritalStatus=tRS.Get("HYZK")     // HYZK 婚姻状况
		//set tPatient.Occupation=tRS.Get("ZYDM")        // ZYDM 职业代码			
		set tPatient.Race=tRS.Get("MZDM")              // MZDM 民族代码
		set tPatient.Blood=tRS.Get("BRXX ")             // BRXX  病人血型			
		set tPatient.Addresses=tRS.Get("GZDW")         // GZDW 工作单位（住址）			
		set tPatient.PatientNumbers=tRS.Get("DWDH")    // DWDH 单位电话（患者号码）			
		set tPatient.Citizenship=tRS.Get("HKDZ")       // HKDZ 户口地址(籍贯)
		set tPatient.ContactInfo=tRS.Get("JTDH")       // JTDH 家庭电话				
		
	}
	Set:($IsObject(tPatient)) pResponse.Patient= tPatient
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAllergy">
<Description>
同步过敏 </Description>
<FormalSpec>pRequest:HIP.MSG.reqGetAllergy,*pResponse:HIP.MSG.resGetAllergy</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try
	{
		Set pResponse = ##class(HIP.MSG.resGetAllergy).%New()		
		if pRequest.EncounterSource="O"
		{
			Set tSQL= ""
			Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.AllergyID)
			If tRS.Next()
			{
				Set tAllergy=##class(CDR.Allergy).ukAllergyOpen("OP"_pRequest.AllergyID)
				set:('$ISOBJECT(tAllergy)) tAllergy=##class(CDR.Allergy).%New()
				s tAllergy.AllergyID="OP"_pRequest.AllergyID
				s tAllergy.Allergy="OP"_pRequest.AllergyID
			}
		}
		elseif pRequest.EncounterSource="I"
		{
		}
		else
		{
		}
		Set:($IsObject(tAllergy)) pResponse.Allergy=tAllergy
		
	}
	catch(e)
	{
	}
	Quit $$$OK
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="HIP.MSG.reqGetPatient"> 
		<Method>GetPatient</Method>
	</MapItem>
	<MapItem MessageType="HIP.MSG.reqGetEncounter"> 
		<Method>GetEncounter</Method>
	</MapItem>
	<MapItem MessageType="HIP.MSG.reqGetPatientIDByEncounterID"> 
		<Method>GetPatientIDByEncounterID</Method>
	</MapItem>
	<MapItem MessageType="HIP.MSG.reqGetDiagnosis"> 
		<Method>GetDiagnosis</Method>
	</MapItem>
	<MapItem MessageType="HIP.MSG.reqGetOrder"> 
		<Method>GetOrder</Method>
	</MapItem>
	<MapItem MessageType="HIP.MSG.reqGetLabOrder"> 
		<Method>GetLabOrder</Method>
	</MapItem>
	<MapItem MessageType="HIP.MSG.reqGetResult"> 
		<Method>GetResult</Method>
	</MapItem>
	<MapItem MessageType="HIP.MSG.reqGetObservation"> 
		<Method>GetObservation</Method>
	</MapItem>
	<MapItem MessageType="HIP.MSG.reqGetProcedure"> 
		<Method>GetProcedure</Method>
	</MapItem>
	<MapItem MessageType="HIP.MSG.reqGetEncounterNoByPatientAndDate"> 
		<Method>GetEncounterNoByPatientAndDate</Method>
	</MapItem>
	<MapItem MessageType="HIP.MSG.reqGetPNIDInfoByPNO"> 
		<Method>GetPatientNIDInfo</Method>
	</MapItem>
	<MapItem MessageType="HIP.MSG.reqEditPatient"> 
		<Method>UpdatePatientInfo</Method>
	</MapItem>
	<MapItem MessageType="HIP.MSG.reqGetDocument"> 
		<Method>GetDocument</Method>
	</MapItem> 
	<MapItem MessageType="HIP.MSG.reqGetAppointment"> 
		<Method>GetAppointment</Method>
	</MapItem> 
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="HIP.BO.SQL2LABLIS">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64282,50940.957296</TimeChanged>
<TimeCreated>64268,48349.785714</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.SQL.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="GetResultItemBySampleNumber">
<FormalSpec>pRequest:HIP.MSG.reqGetResultItems,*pResponse:HIP.MSG.resGetResultItems</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ^QPTestLog($I(^QPTestLog))= "GetResultItemBySampleNumber started...."
	Set (tResult,tLabOrder,tEpisode)=""   //ukEncounterNo
	Set pResponse = ##class(HIP.MSG.resGetResultItems).%New()
	
	// Open encounter by encounterNo. if encounter does not exist, return error!!!
	Set tEpisode=##class(CDR.Encounter).ukEncounterNoOpen("OP"_pRequest.EpisodeNo)
	Quit:('$ISOBJECT(tEpisode)) $$$ERROR(-50000,"Encounter WITH Episode no:"_pRequest.EpisodeNo_" does not exist.")
	
	Set tOrderNo = "LABS"_pRequest.SampleNumber
	Set tLabOrder = ##class(CDR.LabOrder).ukOrderIdOpen(tOrderNo)
	Quit:('$ISOBJECT(tLabOrder)) $$$ERROR(-50000,"LabOrder with OrderNo :"_tOrderNo_" does not exist.")
	
	// 注释 distinct  SELECT b.KSMC 执行科室,c.XM 执行人,SAMPLENO 样本号, TESTID 项目ID, TESTRESULT 项目结果, REFLO 项目低值, REFHI 项目高值, HINT, UNIT 单位	 
	Set tSQL="SELECT distinct A.SAMPLENO, A.SAMPLENO||'||'||A.DOCTADVISENO ID,A.REQUESTER,NVL((SELECT T.XM FROM ZHLIS.GY_ZGXX T WHERE T.YGBH = A.REQUESTER),A.REQUESTER) REQUESTERNAME,A.REQUESTTIME,A.RECEIVETIME,A.EXECUTETIME,A.CHECKTIME,A.RECEIVER,(SELECT T.XM FROM ZHLIS.GY_ZGXX T WHERE T.YGBH = A.RECEIVER) RECEIVERNAME,A.CHECKOPERATOR,(SELECT T.XM FROM ZHLIS.GY_ZGXX T WHERE T.YGBH = A.CHECKOPERATOR) CHECKOPERATORNAME,A.PRINTTIME"
        _",A.""SECTION"",(SELECT T.KSMC FROM ZHLIS.GY_KSDM T WHERE T.KSDM = A.""SECTION"") SECTIONNAME,A.EXAMINAIM,A.EXAMINAIMCODE,A.SAMPLETYPE,(SELECT SAMPLEDESCRIBE FROM ZHLIS.L_SAMPLETYPE D WHERE A.SAMPLETYPE = D.SAMPLETYPE) SAMPLEDESCRIBE,SubString(A.SAMPLENO, 9, 3) Type,A.CHECKEROPINION,A.LABDEPARTMENT"
        _",(SELECT  C.KSMC FROM ZHLIS.GY_KSDM C WHERE A.LABDEPARTMENT=C.KSDM ) KSMC FROM  ZHLIS.L_PATIENTINFO A,ZHLIS.L_SAMPLETYPE D,ZHLIS.L_PROFILETEST F WHERE SubString(A.SAMPLENO, 9, 3) = F.PROFILENAME AND A.SAMPLETYPE = D.SAMPLETYPE   AND A.RESULTSTATUS >= 4 AND A.PATIENTID IS NOT NULL AND A.SAMPLENO=?"
	   
	 //Set tSQL="SELECT b.KSMC,c.XM,SAMPLENO, TESTID, TESTRESULT, REFLO, REFHI, HINT, UNIT FROM ZHLIS.L_TESTRESULT a,ZHLIS.GY_KSDM b,ZHLIS.GY_ZGXX c "
     //  _"where b.ksdm=a.LABDEPARTMENT and c.ZGID=a.OPERATOR and  SAMPLENO=?"	   
	         
	Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.SampleNumber)
	If tRS.Next()
    {
		Set tResult=##class(CDR.Result).ukResultIDOpen(tRS.Get("ID"))			 
		if '$ISOBJECT(tResult)
		{
			// in theory, this action should not happen!!!
			if $ISOBJECT(tResult)
			{
				if tResult.ResultItems.Count()>0                       
				{
				Do tResult.ResultItems.Clear()
				}
			}			

			if '$ISOBJECT(tResult)
			{
				set tResult=##class(CDR.Result).%New()		
			}
			set tResult.ResultID=tRS.Get("ID")
			set tResult.Comments=tRS.Get("SAMPLEDESCRIBE")   //  说明 D. SAMPLEDESCRIBE 或 PROFILEDESCRIBE				
			set tResult.VerifiedBy=tRS.Get("CHECKOPERATORNAME") // CHECKOPERATORNAME 验证人
			set tResult.ResultTime=tRS.Get("PRINTTIME") // PRINTTIME 出具时间
			set tResult.ResultStatus="" // 结果状态
			set tResult.ResultText="" // 结果文本
			set tResult.FileType="" // 文件类型
			set tResult.DocumentName="" // 文件名称
			set tResult.Stream="" // 报告文件流
			set tResult.DocumentURL="" // 报告文件链接
			set tResult.DocumentNumber="" // 报告数量
			set tResult.AuthorizationTime=tRS.Get("EXECUTETIME")  // EXECUTETIME 确认时间
			set tResult.PerformedAt=tRS.Get("KSMC") //执行机构/科室
			set tResult.ResultInterpretation=tRS.Get("EXAMINAIM")  // 结果解释
			set tResult.FromTime=tRS.Get("RECEIVETIME")  // RECEIVETIME 开始时间
			set tResult.ToTime=tRS.Get("CHECKTIME")  // CHECKTIME 结束时间
			set tResult.ExternalId="" // 外部ID
			set tResult.EncounterNumber="OP"_pRequest.EpisodeNo  // 就诊号
			set tResult.PatientId="OP"_pRequest.PatientID // PatientID 病人ID
			//set tResult.Specimen="" // 得出结果的样本
			set tResult.ResultType=tRS.Get("SAMPLETYPE")  // SAMPLETYPE 结果类型
			Set tResult.COrder = tLabOrder				

			//since there is no way to link lab result with lab order, we need to generate new lab order base on result!!!
			//Set tLabOrder.OrderId= tRS.Get("ID")
			Set tLabOrder.OrderItemCode = tRS.Get("Type")
			Set tLabOrder.OrderItemDesc = tRS.Get("PROFILEDESCRIBE")
			//Set tLabOrder.OrderQuantity=1
			//Set tLabOrder.PlacerId=tRS.Get("SECTIONNAME")           // KSMC 
			//Set tLabOrder.FillerId=tRS.Get("KSMC")
			Set tLabOrder.ReceivingLocation=tRS.Get("SECTIONNAME")
			Set tLabOrder.Status="finished"				
			Set tLabOrder.Encounter=tEpisode
			Set tLabOrder.EncounterId="OP"_pRequest.EpisodeNo
			
			Set tLabOrder.StartDateTime=tRS.Get("RECEIVETIME")  // RECEIVETIME 开始时间
			
			Set tLabOrder.EndDateTime=tRS.Get("CHECKTIME")  // RECEIVETIME 开始时间
			
			set tLabOrder.AuthorizationTime=tRS.Get("EXECUTETIME")  // EXECUTETIME 确认时间
			 
			Do tLabOrder.%Save()
		}
		//sql 注释 SELECT b.KSMC 执行科室,c.XM 执行人,SAMPLENO 样本号, TESTID 项目ID, TESTRESULT 项目结果, REFLO, REFHI, HINT 指标图标, UNIT 单位

		Set tSQL2="SELECT A.SAMPLENO||'||'||A.TESTID||'||'||A.SAMPLETYPE||'||'||A.ARCHIVESTATUS ID,A.SAMPLETYPE,CHINESENAME,ENGLISHAB,SAMPLENO, a.TESTID, TESTRESULT, REFLO, REFHI, HINT, a.UNIT,MEASURETIME,NOTES "
		_" FROM ZHLIS.L_TESTRESULT a,ZHLIS.L_TESTDESCRIBE b where a.testid=b.testid and  SAMPLENO=?"
		Set tRet2 = ..Adapter.ExecuteQuery(.tRS2,tSQL2,pRequest.SampleNumber)

		while tRS2.Next()
		{
			// Set tProcedure=##class(CDR.Procedure).ukOrderIdOpen(pRequest.ProcedureID)
			//set:('$ISOBJECT(tProcedure)) tProcedure=##class(CDR.Procedure).%New()
			Set tResultItem=##class(CDR.Observation).ukObsNoOpen(tRS2.Get("ID"))
			Set:('$ISOBJECT(tResultItem)) tResultItem=##class(CDR.Observation).%New()  //检验结果和体征共用
			
			set tResultItem.ObservationGroup ="LAB"  // 体征=PE;检验=LAB;体征=PE;B超=US;影像=IMG;
			set tResultItem.ObsId=tRS2.Get("ID")
			Set tResultItem.Value =tRS2.Get("TESTRESULT")   //"TESTRESULT"   
			Set tResultItem.Status="F"  
			Set tResultItem.ResultType="NM"      // /// 结果类型:数值型(NM)、文本型(FT)、链接型(RP)
			Set tResultItem.ObservationCode=tRS2.Get("ENGLISHAB")  
			Set tResultItem.ObservationDesc=tRS2.Get("CHINESENAME")  
			Set tResultItem.ObservationTime=tRS2.Get("MEASURETIME") 
			
			set tResultItem.ReferenceRange.Low=tRS2.Get("REFLO")   //参考值 
			set tResultItem.ReferenceRange.High=tRS2.Get("REFHI")
			
			Set ^QPTestLog($I(^QPTestLog))= tRS2.Get("HINT")_"  ReferenceRange:"_tResultItem.ReferenceRange.Low_"-"_tResultItem.ReferenceRange.High
			set tResultItem.ValueUnits=tRS2.Get("UNIT")  
			set tResultItem.ResultInterpretation=$CASE(tRS2.Get("HINT"),"↑":"H","↓":"L","阳性":"A","阴性":"N",:"") //tRS2.Get("NOTES")   //结果解释					
			set tResultItem.EncounterId="OP"_pRequest.EpisodeNo	
			set tResultItem.Encounter=tEpisode
			
			Do tResult.ResultItems.Insert(tResultItem)	
			
		}
	}		     

	Set pResponse.Result=tResult
	
	//Do tEpisode.Orders.Insert(tLabOrder)
	//Do:$ISOBJECT(tEpisode) tEpisode.%Save()
	 
	Quit $$$OK
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="HIP.MSG.reqGetResultItems"> 
		<Method>GetResultItemBySampleNumber</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="HIP.BO.SQL2LIS">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64268,63149.001523</TimeChanged>
<TimeCreated>64259,63505.421073</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.SQL.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="GetResultItemBySampleNumber">
<FormalSpec>pRequest:HIP.MSG.reqGetResultItems,*pResponse:HIP.MSG.resGetResultItems</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set (tResult,tLabOrder,tEpisode)=""   //ukEncounterNo
	
	Set pResponse = ##class(HIP.MSG.resGetResultItems).%New()
	
	// Open encounter by encounterNo. if encounter does not exist, return error!!!
	//Set tEpisode=##class(CDR.Encounter).ukEncounterNoOpen("OP"_pRequest.EpisodeNo)
	//Quit:('$ISOBJECT(tEpisode)) $$$ERROR("could not find encounter")	
	
	//sql 注释 SELECT b.KSMC 执行科室,c.XM 执行人,SAMPLENO 样本号, TESTID 项目ID, TESTRESULT 项目结果, REFLO 项目低值, REFHI 项目高值, HINT 指标图标, UNIT 单位
	 
	 //Set tSQL="SELECT distinct A.SAMPLENO,A.REQUESTER,NVL((SELECT T.XM FROM ZHLIS.GY_ZGXX T WHERE T.YGBH = A.REQUESTER),A.REQUESTER) REQUESTERNAME,A.REQUESTTIME,A.RECEIVETIME,A.EXECUTETIME,A.CHECKTIME,A.RECEIVER,(SELECT T.XM FROM ZHLIS.GY_ZGXX T WHERE T.YGBH = A.RECEIVER) RECEIVERNAME,A.CHECKOPERATOR,(SELECT T.XM FROM ZHLIS.GY_ZGXX T WHERE T.YGBH = A.CHECKOPERATOR) CHECKOPERATORNAME,A.PRINTTIME,A.""SECTION"",(SELECT T.KSMC FROM ZHLIS.GY_KSDM T WHERE T.KSDM = A.""SECTION"") SECTIONNAME,A.EXAMINAIM,A.EXAMINAIMCODE,A.SAMPLETYPE,D.SAMPLEDESCRIBE,SubString(A.SAMPLENO, 9, 3) Type,F.PROFILEDESCRIBE,A.CHECKEROPINION,A.LABDEPARTMENT,C.KSMC FROM ZHLIS.L_PATIENTINFO A,ZHLIS.GY_ZGXX B,ZHLIS.GY_KSDM C,ZHLIS.L_SAMPLETYPE D,ZHLIS.L_PROFILETEST F WHERE SubString(A.SAMPLENO, 9, 3) = F.PROFILENAME AND A.SAMPLETYPE = D.SAMPLETYPE AND A.LABDEPARTMENT = C.KSDM  AND A.RESULTSTATUS >= 4 AND A.PATIENTID IS NOT NULL  and  A.SAMPLENO=?"
	  
	 //sql 注释 SELECT b.KSMC 执行科室,c.XM 执行人,SAMPLENO 样本号, TESTID 项目ID, TESTRESULT 项目结果, REFLO 项目低值, REFHI 项目高值, HINT 指标图标, UNIT 单位
	 
	 //Set tSQL="SELECT b.KSMC,c.XM,SAMPLENO, TESTID, TESTRESULT, REFLO, REFHI, HINT, UNIT FROM ZHLIS.L_TESTRESULT a,ZHLIS.GY_KSDM b,ZHLIS.GY_ZGXX c "
      //  _"where b.ksdm=a.LABDEPARTMENT and c.ZGID=a.OPERATOR and  SAMPLENO=?"
	   
	  //.... Set tSQL="SELECT  SAMPLENO ID,RECEIVETIME FROM ZHLIS.L_PATIENTINFO WHERE SAMPLENO=?"
	  SET tSQL="SELECT BRID ID,BRXM FROM BSOFT.MS_BRDA WHERE BRID=?"
	  Set tRet= ..Adapter.ExecuteQuery(.tRS,tSQL,pRequest.SampleNumber)
	
	 //set pResponse.Result=tRS.Get("ID")
	
	          set tResult=##class(CDR.Result).%New()
				set tResult.ResultID="OP"_"113|"_tRS.Get("ID")
				set rc=tResult.%Save()
				
				set pResponse.Result="OP"_"113|"_tRS.Get("BRXM")
	 
	 
	If tRS.Next()
	{     
	        Set tResult=##class(CDR.Result).ukResultIDOpen(tRS.Get("ID"))
			
			//tResult=##class(CDR.Result).%New()
		if '$ISOBJECT(tResult)
		{
			
			// in theory, this action should not happen!!!
			if '$ISOBJECT(tResult)
			{
				if tResult.ResultItems.Count()>0                       
			   {
				//Do tResult.ResultItems.Clear()
			   }
			}
			
			
			if '$ISOBJECT(tResult)
			{
				set tResult=##class(CDR.Result).%New()
				set tResult.ResultID=tRS.Get("ID")
				set tResult.Comments=tRS.Get("SAMPLEDESCRIBE")  // D. SAMPLEDESCRIBE 或 PROFILEDESCRIBE
				
				set tResult.PerformedAt=tRS.Get("SECTIONNAME")
				
				
				//since there is no way to link lab result with lab order, we need to generate new lab order base on result!!!
				Set tLabOrder = ##class(CDR.LabOrder).%New()
				Set tLabOrder.OrderItemCode = tRS.Get("SAMPLENO")
				Set tLabOrder.OrderItemDesc = tRS.Get("PROFILEDESCRIBE")
				Set tLabOrder.OrderQuantity=1
				Set tLabOrder.PlacerId=tRS.Get("KSMC")           // KSMC 
				Set tLabOrder.FillerId=tRS.Get("SECTIONNAME")
				Set tLabOrder.ReceivingLocation=tRS.Get("SECTIONNAME")
				Set tLabOrder.Status="labfinished"
				Set tResult.LabOrder=tLabOrder
				
			}
		}
		
		//sql 注释 SELECT b.KSMC 执行科室,c.XM 执行人,SAMPLENO 样本号, TESTID 项目ID, TESTRESULT 项目结果, REFLO 项目低值, REFHI 项目高值, HINT 指标图标, UNIT 单位
	 
	 Set tSQL2="SELECT A.ID,A.SAMPLETYPE,CHINESENAME,ENGLISHAB,SAMPLENO, a.TESTID, TESTRESULT, REFLO, REFHI, HINT, a.UNIT,MEASURETIME FROM ZHLIS.L_TESTRESULT a,ZHLIS.L_TESTDESCRIBE b where a.testid=b.testid and  SAMPLENO=?"
      Set tRet2 = ..Adapter.ExecuteQuery(.tRS2,tSQL2,pRequest.SampleNumber)
		
		while tRS.Next()
		{
			Set tResultItem = ##class(CDR.Observation).%New()  //检验结果和体征共用
		
		set tResultItem.ObservationGroup ="LAB"  // 体征=PE;检验=LAB;体征=PE;B超=US;影像=IMG;
		
		 
		Set tResultItem.Value = tRS2.Get("REFLO")_"~"_tRS2.Get("REFHI")  
		Set tResultItem.Status=tRS2.Get("BRID")  
		Set tResultItem.ResultType=tRS2.Get("TESTRESULT")
		Set tResultItem.ObservationCode=tRS2.Get("ENGLISHAB")  
		Set tResultItem.ObservationDesc=tRS2.Get("CHINESENAME")_"("_tRS2.Get("ENGLISHAB")_")"  
		Set tResultItem.ObservationTime=tRS2.Get("MEASURETIME")  
		set tResultItem.ObsId=tRS2.Get("ID")  
		set tResultItem.ReferenceRange=tRS2.Get("BRID")  
		set tResultItem.ValueUnits=tRS2.Get("UNIT")  
		set tResultItem.ResultInterpretation=tRS2.Get("BRID")  
		
		Do tResult.ResultItems.Insert(tResultItem)	
		}
		
		
	}
	
	Do tEpisode.Orders.Insert(tLabOrder)
	Do:$ISOBJECT(tEpisode) tEpisode.%Save()
	 Quit $$$OK
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="HIP.MSG.reqGetResultItems"> 
		<Method>GetResultItemBySampleNumber</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="HIP.BO.WriteCDA">
<Description>
Class已经不需要了， 只是为了有时间检查中间的utf-8的问题， 到底怎么回事</Description>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64551,55359.078123</TimeChanged>
<TimeCreated>64481,37011.000635</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.File.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Parameter name="SETTINGS">
<Default>DefCharEncoding::selector?context={Ens.ContextSearch/CharacterSets}</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// by CompiledXSL

]]></Content>
</UDLText>

<Method name="WriteMedication">
<FormalSpec>pRequest:HIP.MSG.reqWriteCDADocument,*pResponse:Ens.StringResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Create Encounter Object
	set a=##class(CDR.Medication).ukOrderIdOpen(pRequest.OrderId,2,.status)
	if $$$ISERR(status) 
	{	do $System.Status.DisplayError(status) 
        		quit $$$ERROR($$$GeneralError, "Cant open object")
   	 }
   	 
   	 //Create Transformer
 	Set tTransformer = ##class(HIP.Util.XSLTTransformer).%New()
         set tTransformer.XSLTDirectory="D:/working/hip"
         
         //Transform to Stream
         //why it saved as utf-8 after adding the following line, crazy
         set ..Adapter.LineTerminator= $C(13,10)
         set tSc=tTransformer.TransformFromObject(a,"04_Prescription.xsl",.tOutput,,,1)
        set ..Adapter.Overwrite=1
        Set tStatus = ..Adapter.PutStream("b04.xml", tOutput)
	
	Quit tStatus
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="HIP.MSG.reqWriteCDADocument"> 
		<Method>WriteMedication</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="HIP.BP.AppointmentEvent.Context">
<Description>
This class is generated by the HIP.BP.AppointmentEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.AppointmentEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64944,39955.577493</TimeChanged>
<TimeCreated>64405,39769.97871</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>Appointment</Value>
</Value>
<Value name="2">
<Value>Encounter</Value>
</Value>
<Value name="3">
<Value>EncounterExist</Value>
</Value>
<Value name="4">
<Value>EncounterID</Value>
</Value>
<Value name="5">
<Value>HL7Message</Value>
</Value>
<Value name="6">
<Value>Patient</Value>
</Value>
<Value name="7">
<Value>PatientExist</Value>
</Value>
<Value name="8">
<Value>PatientID</Value>
</Value>
<Value name="9">
<Value>PatientNID</Value>
</Value>
<Value name="10">
<Value>PatientNo</Value>
</Value>
</Data>
</Storage>

<Property name="Appointment">
<Type>CDR.Appointment</Type>
</Property>

<Property name="Encounter">
<Type>CDR.Encounter</Type>
</Property>

<Property name="EncounterExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="EncounterID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="HL7Message">
<Type>EnsLib.HL7.Message</Type>
</Property>

<Property name="Patient">
<Type>CDR.Patient</Type>
</Property>

<Property name="PatientExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="PatientID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientNo">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqAppointmentEvent,response:Ens.Response,callrequest:HIP.MSG.reqGetAppointment,callresponse:HIP.MSG.resGetAppointment,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Appointment=callresponse.Appointment
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.AppointmentEvent.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BP.AppointmentEvent.Thread1">
<Description>
This class is generated by the HIP.BP.AppointmentEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.AppointmentEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.089251</TimeChanged>
<TimeCreated>64944,39955.558658</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish a state for the Scope beginning
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S8"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Encounter ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetEncounter).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.EncounterID=request.EncounterNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource="O"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNID=request.PatientNID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNo=request.PatientID
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HIP.BO.SQL2HIS",callrequest,"Sync Encounter",1,0,"Sync Encounter",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Encounter ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Encounter") Do ..%PendingResponses.SetAt("","Sync Encounter")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S13"
 } else {
    Set ..%NextState="S12",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S12">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S13"
 } else {
    Set ..%NextState="S12",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
]]></Implementation>
</Method>

<Method name="S13">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S10"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
]]></Implementation>
</Method>

<Method name="S14">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S15"
 } else {
    Set ..%NextState="S14",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
]]></Implementation>
</Method>

<Method name="S15">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If '(##class(HIP.Setting).IsHistory()) {
 Set ..%NextState="S17"
 } else {
 Set ..%NextState="S16"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S15") Goto Exit
]]></Implementation>
</Method>

<Method name="S16">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S18"
 #; Remove this scopes fault handler
 $$$Pop(..%HandlerStack)
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S16") Goto Exit
]]></Implementation>
</Method>

<Method name="S17">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.HL7Message
 Set status=$classmethod("HIP.DT.Appointment2HL7","Transform",context.Appointment,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.HL7Message=iscTemp
 #; --- Begin Call HL7 2 File ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.HL7.Message).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=context.HL7Message
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","EnsLib.HL7.Operation.FileOperation",callrequest,"HL7 2 File",1,0,"HL7 2 File",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call HL7 2 File ---
 Set ..%NextState="S16"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S17") Goto Exit
]]></Implementation>
</Method>

<Method name="S18">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S18") Goto Exit
]]></Implementation>
</Method>

<Method name="S19">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S18"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S19") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish fault handler
 $$$Push("S3",..%HandlerStack)
 Do {
 Set tPatient = ##class(CDR.Patient).ukIDNoOpen(request.PatientNID)
 if ($ISOBJECT(tPatient)) 
 { 
     Set context.PatientExist=1
     Set context.Patient = tPatient
  }
 } while (0)
 If $$$ISERR(status) Quit
 If '(context.PatientExist) {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S20">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S19"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S20") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (0) {
 Set ..%NextState="S19"
 } else {
 Set ..%NextState="S20"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (request.EncounterNo'="") {
 Set ..%NextState="S9"
 } else {
 Set ..%NextState="S8"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Patient ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetPatient).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.PatientSource="O"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PID=request.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PNID=request.PatientNID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.CallBy=request.CallBy
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HIP.BO.SQL2HIS",callrequest,"Sync Patient",1,0,"Sync Patient",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Patient ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Patient") Do ..%PendingResponses.SetAt("","Sync Patient")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Appointment ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetAppointment).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.AppointmentId=request.AppointmentId
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNID=request.PatientNID
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","HIP.BO.SQL2HIS",callrequest,"Sync Appointment",1,0,"Sync Appointment",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Appointment ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Appointment") Do ..%PendingResponses.SetAt("","Sync Appointment")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S15"
 } else {
    Set ..%NextState="S14",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 Set rEID=""
 Set rEID="OP"_request.EncounterNo

 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 Set:($ISOBJECT(tEncounter)) context.EncounterExist=1
 } while (0)
 If $$$ISERR(status) Quit
 If '(context.EncounterExist) {
 Set ..%NextState="S11"
 } else {
 Set ..%NextState="S10"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.AppointmentEvent">
<Description>
预约记录当患者就诊后,会关联到相应的就诊</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64281,60578.505145</TimeChanged>
<TimeCreated>64125,53066.520151</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.reqAppointmentEvent' response='Ens.Response' height='2200' width='2000' >
<context>
<property name='EncounterID' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='PatientID' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='Patient' type='CDR.Patient' instantiate='0' />
<property name='Encounter' type='CDR.Encounter' instantiate='0' />
<property name='PatientExist' type='%Boolean' initialexpression='0' instantiate='0' />
<property name='HL7Message' type='EnsLib.HL7.Message' instantiate='0' />
<property name='PatientNID' type='%String' initialexpression='""' instantiate='0' >
<annotation><![CDATA[身份证号]]]]><![CDATA[></annotation>
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='PatientNo' type='%String' initialexpression='""' instantiate='0' >
<annotation><![CDATA[本次就诊患者号(门诊或住院号)]]]]><![CDATA[></annotation>
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='Appointment' type='CDR.Appointment' instantiate='0' />
<property name='EncounterExist' type='%Boolean' initialexpression='0' instantiate='0' />
</context>
<sequence xend='200' yend='2300' >
<scope name='Session' xpos='200' ypos='250' xend='200' yend='2200' >
<code name='Query Patient' xpos='200' ypos='350' >
<annotation><![CDATA[查询CDR是否已经有该患者记录]]]]><![CDATA[></annotation>
<![CDATA[ Set tPatient = ##class(CDR.Patient).ukIDNoOpen(request.PatientNID)
 if ($ISOBJECT(tPatient)) 
 { 
     Set context.PatientExist=1
     Set context.Patient = tPatient
  }]]]]><![CDATA[>
</code>
<if name='Patient Exist?' condition='context.PatientExist' xpos='200' ypos='450' xend='200' yend='700' >
<false>
<call name='Sync Patient' target='HIP.BO.SQL2HIS' async='0' xpos='335' ypos='600' >
<annotation><![CDATA[从数据源同步患者信息]]]]><![CDATA[></annotation>
<request type='HIP.MSG.reqGetPatient' >
<assign property="callrequest.PatientSource" value="&quot;O&quot;" action="set" />
<assign property="callrequest.PID" value="request.PatientID" action="set" />
<assign property="callrequest.PNID" value="request.PatientNID" action="set" />
<assign property="callrequest.CallBy" value="request.CallBy" action="set" />
</request>
<response type='HIP.MSG.resGetPatient' />
</call>
</false>
</if>
<if name='Appt has Encounter Info?' condition='request.EncounterNo&apos;=""' xpos='200' ypos='800' xend='200' yend='1400' >
<annotation><![CDATA[预约记录有对应的就诊信息?]]]]><![CDATA[></annotation>
<true>
<code name='Query Encounter' xpos='335' ypos='950' >
<annotation><![CDATA[查询CDR是否有对应的就诊记录]]]]><![CDATA[></annotation>
<![CDATA[ Set rEID=""
 Set rEID="OP"_request.EncounterNo

 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 Set:($ISOBJECT(tEncounter)) context.EncounterExist=1]]]]><![CDATA[>
</code>
<if name='Encounter Exist?' condition='context.EncounterExist' xpos='335' ypos='1050' xend='335' yend='1300' >
<false>
<call name='Sync Encounter' target='HIP.BO.SQL2HIS' async='0' xpos='470' ypos='1200' >
<annotation><![CDATA[从数据源同步就诊信息]]]]><![CDATA[></annotation>
<request type='HIP.MSG.reqGetEncounter' >
<assign property="callrequest.EncounterID" value="request.EncounterNo" action="set" />
<assign property="callrequest.EncounterSource" value="&quot;O&quot;" action="set" />
<assign property="callrequest.PatientNID" value="request.PatientNID" action="set" />
<assign property="callrequest.PatientNo" value="request.PatientID" action="set" />
</request>
<response type='HIP.MSG.resGetEncounter' />
</call>
</false>
</if>
</true>
</if>
<call name='Sync Appointment' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='1500' >
<annotation><![CDATA[从数据源同步预约数据]]]]><![CDATA[></annotation>
<request type='HIP.MSG.reqGetAppointment' >
<assign property="callrequest.AppointmentId" value="request.AppointmentId" action="set" />
<assign property="callrequest.PatientNID" value="request.PatientNID" action="set" />
</request>
<response type='HIP.MSG.resGetAppointment' >
<assign property="context.Appointment" value="callresponse.Appointment" action="set" />
</response>
</call>
<if name='History data upload?' condition='##class(HIP.Setting).IsHistory()' xpos='200' ypos='1600' xend='200' yend='1950' >
<false>
<transform name='Appointment 2 HL7 ' class='HIP.DT.Appointment2HL7' source='context.Appointment' target='context.HL7Message' xpos='335' ypos='1750' >
<annotation><![CDATA[转换为HL7]]]]><![CDATA[></annotation>
</transform>
<call name='HL7 2 File' target='EnsLib.HL7.Operation.FileOperation' async='1' xpos='335' ypos='1850' >
<annotation><![CDATA[输出HL7文件]]]]><![CDATA[></annotation>
<request type='EnsLib.HL7.Message' >
<assign property="callrequest" value="context.HL7Message" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<faulthandlers>
<catchall xpos='200' ypos='2050' xend='200' yend='550' />
</faulthandlers>
</scope>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.Context">
<Super>Ens.BP.Context</Super>
<TimeChanged>64265,82688.301431</TimeChanged>
<TimeCreated>64265,81347.146249</TimeCreated>

<Property name="Patient">
<Type>CDR.Patient</Type>
</Property>

<Property name="Encounter">
<Type>CDR.Encounter</Type>
</Property>

<Property name="LabOrder">
<Type>CDR.LabOrder</Type>
</Property>

<Property name="RadOrder">
<Type>CDR.RadOrder</Type>
</Property>

<Property name="Medication">
<Type>CDR.Medication</Type>
</Property>

<Property name="Document">
<Type>CDR.Document</Type>
</Property>

<Property name="Diagnosis">
<Type>CDR.Diagnosis</Type>
</Property>

<Property name="Result">
<Type>CDR.Result</Type>
</Property>

<Property name="HL7">
<Type>EnsLib.HL7.Message</Type>
</Property>

<Property name="PatientID">
<Description>
Patient Id in CDR</Description>
<Type>%String</Type>
</Property>

<Property name="PatientNo">
<Description>
Patient No in outside system</Description>
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Description>
Patient national ID</Description>
<Type>%String</Type>
</Property>

<Property name="EncounterID">
<Description>
Encounter Id in CDR</Description>
<Type>%String</Type>
</Property>

<Property name="EncounterNo">
<Description>
Encounter No in outside system</Description>
<Type>%String</Type>
</Property>

<Property name="OrderID">
<Description>
Order Id in CDR</Description>
<Type>%String</Type>
</Property>

<Property name="OrderNo">
<Description>
Order No in outside system</Description>
<Type>%String</Type>
</Property>

<Property name="IsPatientExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="IsEncounterExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="IsLabOrderExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="IsRadOrderExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Log">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>Patient</Value>
</Value>
<Value name="2">
<Value>Encounter</Value>
</Value>
<Value name="3">
<Value>LabOrder</Value>
</Value>
<Value name="4">
<Value>RadOrder</Value>
</Value>
<Value name="5">
<Value>Document</Value>
</Value>
<Value name="6">
<Value>Diagnosis</Value>
</Value>
<Value name="7">
<Value>Result</Value>
</Value>
<Value name="8">
<Value>Medication</Value>
</Value>
<Value name="9">
<Value>HL7</Value>
</Value>
<Value name="10">
<Value>IsPatientExist</Value>
</Value>
<Value name="11">
<Value>IsEncounterExist</Value>
</Value>
<Value name="12">
<Value>IsLabOrderExist</Value>
</Value>
<Value name="13">
<Value>IsRadOrderExist</Value>
</Value>
<Value name="14">
<Value>Log</Value>
</Value>
<Value name="15">
<Value>PatientID</Value>
</Value>
<Value name="16">
<Value>PatientNo</Value>
</Value>
<Value name="17">
<Value>PatientNID</Value>
</Value>
<Value name="18">
<Value>EncounterID</Value>
</Value>
<Value name="19">
<Value>EncounterNo</Value>
</Value>
<Value name="20">
<Value>OrderID</Value>
</Value>
<Value name="21">
<Value>OrderNo</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.BP.DiagnosisEvent.Context">
<Description>
This class is generated by the HIP.BP.DiagnosisEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.DiagnosisEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64944,39955.575684</TimeChanged>
<TimeCreated>64227,68451.364867</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>Diagnosis</Value>
</Value>
<Value name="2">
<Value>EncounterExist</Value>
</Value>
<Value name="3">
<Value>HL7</Value>
</Value>
<Value name="4">
<Value>PatientNID</Value>
</Value>
<Value name="5">
<Value>PatientNo</Value>
</Value>
<Value name="6">
<Value>EncounterSource</Value>
</Value>
</Data>
</Storage>

<Property name="Diagnosis">
<Type>CDR.Diagnosis</Type>
</Property>

<Property name="EncounterExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="HL7">
<Type>EnsLib.HL7.Message</Type>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientNo">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqDiagnosisEvent,response:Ens.Response,callrequest:HIP.MSG.reqGetDiagnosis,callresponse:HIP.MSG.resGetDiagnosis,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Diagnosis=callresponse.Diagnosis
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.DiagnosisEvent.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BP.DiagnosisEvent.Thread1">
<Description>
This class is generated by the HIP.BP.DiagnosisEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.DiagnosisEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.164461</TimeChanged>
<TimeCreated>64944,39955.561207</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish a state for the Scope beginning
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 #; Remove this scopes fault handler
 $$$Pop(..%HandlerStack)
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.HL7
 Set status=$classmethod("HIP.DT.Diagnosis2HL7","Transform",context.Diagnosis,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.HL7=iscTemp
 #; --- Begin Call HL7 2 File ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.HL7.Message).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=context.HL7
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","EnsLib.HL7.Operation.FileOperation",callrequest,"HL7 2 File",1,0,"HL7 2 File",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call HL7 2 File ---
 Set ..%NextState="S10"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S12">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
]]></Implementation>
</Method>

<Method name="S13">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
]]></Implementation>
</Method>

<Method name="S14">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S13"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish fault handler
 $$$Push("S3",..%HandlerStack)
 Do {
 Set rEID=""
 if request.EncounterSource="O"
 {
   Set rEID="OP"_request.EncounterID
 }
 elseif request.EncounterSource="I"
 {
  Set rEID="IP"_request.EncounterID
 }
 else {}
 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 Set:($ISOBJECT(tEncounter)) context.EncounterExist=1
 } while (0)
 If $$$ISERR(status) Quit
 If '(context.EncounterExist) {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (0) {
 Set ..%NextState="S13"
 } else {
 Set ..%NextState="S14"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Diagnosis ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetDiagnosis).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.DiagnosisID=request.DiagnosisNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","HIP.BO.SQL2HIS",callrequest,"Sync Diagnosis",1,0,"Sync Diagnosis",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Diagnosis ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Diagnosis") Do ..%PendingResponses.SetAt("","Sync Diagnosis")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Encounter ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqEncounterEvent).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.PatientNID=request.PatientNID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterID=request.EncounterID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientID=request.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNO=request.PatientNO
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.CallBy=request.CallBy
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HIP.BP.EncounterEvent",callrequest,"Sync Encounter",1,0,"Sync Encounter",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Encounter ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Encounter") Do ..%PendingResponses.SetAt("","Sync Encounter")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If '(##class(HIP.Setting).IsHistory()) {
 Set ..%NextState="S11"
 } else {
 Set ..%NextState="S10"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.DiagnosisEvent">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64281,60803.457956</TimeChanged>
<TimeCreated>64127,81477.831537</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.reqDiagnosisEvent' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='EncounterExist' type='%Boolean' initialexpression='0' instantiate='0' />
<property name='Diagnosis' type='CDR.Diagnosis' instantiate='0' />
<property name='HL7' type='EnsLib.HL7.Message' instantiate='0' />
<property name='PatientNID' type='%String' initialexpression='""' instantiate='0' >
<annotation><![CDATA[患者身份证号]]]]><![CDATA[></annotation>
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='PatientNo' type='%String' initialexpression='""' instantiate='0' >
<annotation><![CDATA[门诊住院号]]]]><![CDATA[></annotation>
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='EncounterSource' type='%String' initialexpression='""' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
</context>
<sequence xend='200' yend='1600' >
<scope xpos='200' ypos='250' xend='200' yend='1500' >
<code name='Get Encounter' xpos='200' ypos='350' >
<![CDATA[ Set rEID=""
 if request.EncounterSource="O"
 {
   Set rEID="OP"_request.EncounterID
 }
 elseif request.EncounterSource="I"
 {
  Set rEID="IP"_request.EncounterID
 }
 else {}
 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 Set:($ISOBJECT(tEncounter)) context.EncounterExist=1]]]]><![CDATA[>
</code>
<if name='Encounter Exist?' condition='context.EncounterExist' xpos='200' ypos='450' xend='200' yend='700' >
<annotation><![CDATA[就诊信息是否存在]]]]><![CDATA[></annotation>
<false>
<call name='Sync Encounter' target='HIP.BP.EncounterEvent' async='0' xpos='335' ypos='600' >
<annotation><![CDATA[从数据源同步就诊信息]]]]><![CDATA[></annotation>
<request type='HIP.MSG.reqEncounterEvent' >
<assign property="callrequest.PatientNID" value="request.PatientNID" action="set" />
<assign property="callrequest.EncounterID" value="request.EncounterID" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
<assign property="callrequest.PatientID" value="request.PatientID" action="set" />
<assign property="callrequest.PatientNO" value="request.PatientNO" action="set" />
<assign property="callrequest.CallBy" value="request.CallBy" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<call name='Sync Diagnosis' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='800' >
<request type='HIP.MSG.reqGetDiagnosis' >
<assign property="callrequest.DiagnosisID" value="request.DiagnosisNo" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
</request>
<response type='HIP.MSG.resGetDiagnosis' >
<assign property="context.Diagnosis" value="callresponse.Diagnosis" action="set" />
</response>
</call>
<if name='History data upload?' condition='##class(HIP.Setting).IsHistory()' xpos='200' ypos='900' xend='200' yend='1250' >
<false>
<transform name='Diag 2 HL7 ADT' class='HIP.DT.Diagnosis2HL7' source='context.Diagnosis' target='context.HL7' xpos='335' ypos='1050' />
<call name='HL7 2 File' target='EnsLib.HL7.Operation.FileOperation' async='1' xpos='335' ypos='1150' >
<request type='EnsLib.HL7.Message' >
<assign property="callrequest" value="context.HL7" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<faulthandlers>
<catchall xpos='200' ypos='1350' xend='200' yend='550' />
</faulthandlers>
</scope>
</sequence>
</process>
]]></Data>
</XData>
</Class>


<Class name="HIP.BP.DocumentEvent.Context">
<Description>
This class is generated by the HIP.BP.DocumentEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.DocumentEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64944,39955.547475</TimeChanged>
<TimeCreated>64405,39770.014405</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>Document</Value>
</Value>
<Value name="2">
<Value>EncounterExist</Value>
</Value>
<Value name="3">
<Value>HL7</Value>
</Value>
</Data>
</Storage>

<Property name="Document">
<Type>CDR.Document</Type>
</Property>

<Property name="EncounterExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="HL7">
<Type>EnsLib.HL7.Message</Type>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqDocumentEvent,response:Ens.Response,callrequest:HIP.MSG.reqGetDocument,callresponse:HIP.MSG.resGetDocument,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Document=callresponse.Document
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.DocumentEvent.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BP.DocumentEvent.Thread1">
<Description>
This class is generated by the HIP.BP.DocumentEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.DocumentEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.263613</TimeChanged>
<TimeCreated>64944,39955.532792</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish a state for the Scope beginning
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 #; Remove this scopes fault handler
 $$$Pop(..%HandlerStack)
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.HL7
 Set status=$classmethod("HIP.DT.Document2HL7","Transform",context.Document,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.HL7=iscTemp
 #; --- Begin Call HL7 2 File ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.HL7.Message).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=context.HL7
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","EnsLib.HL7.Operation.FileOperation",callrequest,"HL7 2 File",1,0,"HL7 2 File",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call HL7 2 File ---
 Set ..%NextState="S10"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S12">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
]]></Implementation>
</Method>

<Method name="S13">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
]]></Implementation>
</Method>

<Method name="S14">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S13"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish fault handler
 $$$Push("S3",..%HandlerStack)
 Do {
 Set rEID=""
 if request.EncounterSource="O"
 {
   Set rEID="OP"_request.EncounterID
 }
 elseif request.EncounterSource="I"
 {
  Set rEID="IP"_request.EncounterID
 }
 else {}
 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 Set:($ISOBJECT(tEncounter)) context.EncounterExist=1
 } while (0)
 If $$$ISERR(status) Quit
 If '(context.EncounterExist) {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (0) {
 Set ..%NextState="S13"
 } else {
 Set ..%NextState="S14"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Document ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetDocument).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.DocumentNo=request.DocumentNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","HIP.BO.SQL2HIS",callrequest,"Sync Document",1,0,"Sync Document",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Document ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Document") Do ..%PendingResponses.SetAt("","Sync Document")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Encounter ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqEncounterEvent).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.EncounterID=request.EncounterID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientID=request.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNO=request.PatientNO
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNID=request.PatientNID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.CallBy=request.CallBy
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HIP.BP.EncounterEvent",callrequest,"Sync Encounter",1,0,"Sync Encounter",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Encounter ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Encounter") Do ..%PendingResponses.SetAt("","Sync Encounter")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If '(##class(HIP.Setting).IsHistory()) {
 Set ..%NextState="S11"
 } else {
 Set ..%NextState="S10"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.DocumentEvent">
<Description>
医品医嘱</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64281,60877.546264</TimeChanged>
<TimeCreated>64240,42205.010931</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.reqDocumentEvent' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='EncounterExist' type='%Boolean' initialexpression='0' instantiate='0' />
<property name='Document' type='CDR.Document' instantiate='0' />
<property name='HL7' type='EnsLib.HL7.Message' instantiate='0' />
</context>
<sequence xend='200' yend='1600' >
<scope xpos='200' ypos='250' xend='200' yend='1500' >
<code name='Get Encounter' xpos='200' ypos='350' >
<![CDATA[ Set rEID=""
 if request.EncounterSource="O"
 {
   Set rEID="OP"_request.EncounterID
 }
 elseif request.EncounterSource="I"
 {
  Set rEID="IP"_request.EncounterID
 }
 else {}
 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 Set:($ISOBJECT(tEncounter)) context.EncounterExist=1]]]]><![CDATA[>
</code>
<if name='Encounter Exist?' condition='context.EncounterExist' xpos='200' ypos='450' xend='200' yend='700' >
<annotation><![CDATA[就诊信息是否存在]]]]><![CDATA[></annotation>
<false>
<call name='Sync Encounter' target='HIP.BP.EncounterEvent' async='0' xpos='335' ypos='600' >
<request type='HIP.MSG.reqEncounterEvent' >
<assign property="callrequest.EncounterID" value="request.EncounterID" action="set" />
<assign property="callrequest.PatientID" value="request.PatientID" action="set" />
<assign property="callrequest.PatientNO" value="request.PatientNO" action="set" />
<assign property="callrequest.PatientNID" value="request.PatientNID" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
<assign property="callrequest.CallBy" value="request.CallBy" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<call name='Sync Document' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='800' >
<request type='HIP.MSG.reqGetDocument' >
<assign property="callrequest.DocumentNo" value="request.DocumentNo" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
</request>
<response type='HIP.MSG.resGetDocument' >
<assign property="context.Document" value="callresponse.Document" action="set" />
</response>
</call>
<if name='History data upload?' condition='##class(HIP.Setting).IsHistory()' xpos='200' ypos='900' xend='200' yend='1250' >
<false>
<transform name='Document 2 HL7 ' class='HIP.DT.Document2HL7' source='context.Document' target='context.HL7' xpos='335' ypos='1050' />
<call name='HL7 2 File' target='EnsLib.HL7.Operation.FileOperation' async='1' xpos='335' ypos='1150' >
<request type='EnsLib.HL7.Message' >
<assign property="callrequest" value="context.HL7" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<faulthandlers>
<catchall xpos='200' ypos='1350' xend='200' yend='550' />
</faulthandlers>
</scope>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.EditPatientEvent.Context">
<Description>
This class is generated by the HIP.BP.EditPatientEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.EditPatientEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64944,39955.637919</TimeChanged>
<TimeCreated>64262,77264.357003</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>Patient</Value>
</Value>
</Data>
</Storage>

<Property name="Patient">
<Type>CDR.Patient</Type>
</Property>
</Class>


<Class name="HIP.BP.EditPatientEvent.Thread1">
<Description>
This class is generated by the HIP.BP.EditPatientEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.EditPatientEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.339052</TimeChanged>
<TimeCreated>64944,39955.632422</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync EditPatient ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqEditPatient).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.PatientID=request.PID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNID=request.PNID
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HIP.BO.SQL2HIS",callrequest,"Sync EditPatient",0,0,"Sync EditPatient",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync EditPatient ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync EditPatient") Do ..%PendingResponses.SetAt("","Sync EditPatient")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.EditPatientEvent">
<Description>
添加、修改病人基本信息</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64263,41970.233875</TimeChanged>
<TimeCreated>64262,76891.174932</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.reqUpdatePatientEvent' response='HIP.MSG.reSUpdatePatientEvent' height='2000' width='2000' >
<context>
<property name='Patient' type='CDR.Patient' instantiate='0' />
</context>
<sequence xend='200' yend='350' >
<call name='Sync EditPatient' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='250' >
<request type='HIP.MSG.reqEditPatient' >
<assign property="callrequest.PatientID" value="request.PID" action="set" />
<assign property="callrequest.PatientNID" value="request.PNID" action="set" />
</request>
</call>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.EncounterEvent.Context">
<Description>
This class is generated by the HIP.BP.EncounterEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.EncounterEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64944,39955.559921</TimeChanged>
<TimeCreated>64125,53131.384044</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>Encounter</Value>
</Value>
<Value name="2">
<Value>EncounterID</Value>
</Value>
<Value name="3">
<Value>Patient</Value>
</Value>
<Value name="4">
<Value>PatientExist</Value>
</Value>
<Value name="5">
<Value>PatientID</Value>
</Value>
<Value name="6">
<Value>HL7Message</Value>
</Value>
<Value name="7">
<Value>RulResult</Value>
</Value>
<Value name="8">
<Value>sfzhm</Value>
</Value>
<Value name="9">
<Value>sfzh</Value>
</Value>
<Value name="10">
<Value>PatientNID</Value>
</Value>
<Value name="11">
<Value>PatientNo</Value>
</Value>
<Value name="12">
<Value>EncounterSource</Value>
</Value>
</Data>
</Storage>

<Property name="Encounter">
<Type>CDR.Encounter</Type>
</Property>

<Property name="EncounterID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="HL7Message">
<Type>EnsLib.HL7.Message</Type>
</Property>

<Property name="Patient">
<Type>CDR.Patient</Type>
</Property>

<Property name="PatientExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="PatientID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PatientNo">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqEncounterEvent,response:Ens.Response,callrequest:HIP.MSG.reqGetPatient,callresponse:HIP.MSG.resGetPatient,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Patient=callresponse.Patient
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.EncounterEvent.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqEncounterEvent,response:Ens.Response,callrequest:HIP.MSG.reqGetEncounter,callresponse:HIP.MSG.resGetEncounter,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Encounter=callresponse.Encounter
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.EncounterEvent.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BP.EncounterEvent.Thread1">
<Description>
This class is generated by the HIP.BP.EncounterEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.EncounterEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.396243</TimeChanged>
<TimeCreated>64944,39955.546514</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish a state for the Scope beginning
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 #; Remove this scopes fault handler
 $$$Pop(..%HandlerStack)
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.HL7Message
 Set status=$classmethod("HIP.DT.Encounter2HL7","Transform",context.Encounter,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.HL7Message=iscTemp
 #; --- Begin Call HL7 2 File ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.HL7.Message).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=context.HL7Message
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","EnsLib.HL7.Operation.FileOperation",callrequest,"HL7 2 File",1,0,"HL7 2 File",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call HL7 2 File ---
 Set ..%NextState="S10"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S12">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
]]></Implementation>
</Method>

<Method name="S13">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
]]></Implementation>
</Method>

<Method name="S14">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S13"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish fault handler
 $$$Push("S3",..%HandlerStack)
 Do {
 Set tPatient = ##class(CDR.Patient).ukIDNoOpen(request.PatientNID)
 if ($ISOBJECT(tPatient)) 
 { 
     Set context.PatientExist=1
     Set context.Patient = tPatient
  }
 } while (0)
 If $$$ISERR(status) Quit
 If '(context.PatientExist) {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (0) {
 Set ..%NextState="S13"
 } else {
 Set ..%NextState="S14"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Encounter ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetEncounter).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.EncounterID=request.EncounterID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNID=request.PatientNID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNo=request.PatientNO
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","HIP.BO.SQL2HIS",callrequest,"Sync Encounter",1,0,"Sync Encounter",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Encounter ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Encounter") Do ..%PendingResponses.SetAt("","Sync Encounter")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Patient ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetPatient).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.PatientSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PID=request.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PNID=request.PatientNID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.CallBy=request.CallBy
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","HIP.BO.SQL2HIS",callrequest,"Sync Patient",1,0,"Sync Patient",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Patient ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Patient") Do ..%PendingResponses.SetAt("","Sync Patient")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If '(##class(HIP.Setting).IsHistory()) {
 Set ..%NextState="S11"
 } else {
 Set ..%NextState="S10"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.EncounterEvent">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64281,60952.459233</TimeChanged>
<TimeCreated>64125,53066.520151</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.reqEncounterEvent' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='EncounterID' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='PatientID' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='Patient' type='CDR.Patient' instantiate='0' />
<property name='Encounter' type='CDR.Encounter' instantiate='0' />
<property name='PatientExist' type='%Boolean' initialexpression='0' instantiate='0' />
<property name='HL7Message' type='EnsLib.HL7.Message' instantiate='0' />
<property name='PatientNID' type='%String' initialexpression='""' instantiate='0' >
<annotation><![CDATA[身份证号]]]]><![CDATA[></annotation>
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='PatientNo' type='%String' initialexpression='""' instantiate='0' >
<annotation><![CDATA[本次就诊患者号(门诊或住院号)]]]]><![CDATA[></annotation>
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
</context>
<sequence xend='200' yend='1600' >
<scope xpos='200' ypos='250' xend='200' yend='1500' >
<code name='Query Patient' xpos='200' ypos='350' >
<annotation><![CDATA[查询CDR是否已经有该患者记录]]]]><![CDATA[></annotation>
<![CDATA[ Set tPatient = ##class(CDR.Patient).ukIDNoOpen(request.PatientNID)
 if ($ISOBJECT(tPatient)) 
 { 
     Set context.PatientExist=1
     Set context.Patient = tPatient
  }]]]]><![CDATA[>
</code>
<if name='Patient Exist?' condition='context.PatientExist' xpos='200' ypos='450' xend='200' yend='700' >
<false>
<call name='Sync Patient' target='HIP.BO.SQL2HIS' async='0' xpos='335' ypos='600' >
<annotation><![CDATA[从数据源同步患者信息]]]]><![CDATA[></annotation>
<request type='HIP.MSG.reqGetPatient' >
<assign property="callrequest.PatientSource" value="request.EncounterSource" action="set" />
<assign property="callrequest.PID" value="request.PatientID" action="set" />
<assign property="callrequest.PNID" value="request.PatientNID" action="set" />
<assign property="callrequest.CallBy" value="request.CallBy" action="set" />
</request>
<response type='HIP.MSG.resGetPatient' >
<assign property="context.Patient" value="callresponse.Patient" action="set" />
</response>
</call>
</false>
</if>
<call name='Sync Encounter' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='800' >
<annotation><![CDATA[从数据源同步就诊信息]]]]><![CDATA[></annotation>
<request type='HIP.MSG.reqGetEncounter' >
<assign property="callrequest.EncounterID" value="request.EncounterID" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
<assign property="callrequest.PatientNID" value="request.PatientNID" action="set" />
<assign property="callrequest.PatientNo" value="request.PatientNO" action="set" />
</request>
<response type='HIP.MSG.resGetEncounter' >
<assign property="context.Encounter" value="callresponse.Encounter" action="set" />
</response>
</call>
<if name='History data upload?' condition='##class(HIP.Setting).IsHistory()' xpos='200' ypos='900' xend='200' yend='1250' >
<false>
<transform name='Encoutner 2 HL7 ADT' class='HIP.DT.Encounter2HL7' source='context.Encounter' target='context.HL7Message' xpos='335' ypos='1050' >
<annotation><![CDATA[转换为HL7]]]]><![CDATA[></annotation>
</transform>
<call name='HL7 2 File' target='EnsLib.HL7.Operation.FileOperation' async='1' xpos='335' ypos='1150' >
<annotation><![CDATA[输出HL7文件]]]]><![CDATA[></annotation>
<request type='EnsLib.HL7.Message' >
<assign property="callrequest" value="context.HL7Message" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<faulthandlers>
<catchall xpos='200' ypos='1350' xend='200' yend='550' />
</faulthandlers>
</scope>
</sequence>
</process>
]]></Data>
</XData>
</Class>


<Class name="HIP.BP.EventMonitor.Context">
<Description>
This class is generated by the HIP.BP.EventMonitor BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.EventMonitor</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64125,56524.335544</TimeChanged>
<TimeCreated>64125,56523.111932</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.EventMonitor.Thread1">
<Description>
This class is generated by the HIP.BP.EventMonitor BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.EventMonitor</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.393063</TimeChanged>
<TimeCreated>64944,39955.579746</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (request.TableName="Encounter") {
 Set ..%NextState="S3"
 } elseif (request.TableName="MS_GHMX") {
 Set ..%NextState="S4"
 } else {
 Set ..%NextState="S2"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Encounter Event ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqEncounterEvent).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.EncounterID=request.RowID
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HIP.BP.EncounterEvent",callrequest,"Encounter Event",1,0,"Encounter Event",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Encounter Event ---
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Regist Event ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqEventMonitor).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HIP.BP.RegistEvent",callrequest,"Regist Event",1,0,"Regist Event",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Regist Event ---
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.EventMonitor">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64237,43799.928752</TimeChanged>
<TimeCreated>64125,54788.116086</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.reqEventMonitor' response='Ens.Response' height='2000' width='2000' >
<sequence xend='200' yend='600' >
<switch name='EventType?' xpos='200' ypos='250' xend='200' yend='500' >
<case condition='request.TableName="Encounter"' name='Encounter' >
<call name='Encounter Event' target='HIP.BP.EncounterEvent' async='1' xpos='335' ypos='400' >
<request type='HIP.MSG.reqEncounterEvent' >
<assign property="callrequest.EncounterID" value="request.RowID" action="set" />
</request>
<response type='Ens.Response' />
</call>
</case>
<case condition='request.TableName="MS_GHMX"' name='Regist' >
<call name='Regist Event' target='HIP.BP.RegistEvent' async='1' xpos='605' ypos='400' >
<request type='HIP.MSG.reqEventMonitor' >
<assign property="callrequest" value="request" action="set" />
</request>
<response type='Ens.Response' />
</call>
</case>
<default name='default' />
</switch>
</sequence>
</process>
]]></Data>
</XData>
</Class>


<Class name="HIP.BP.LabOrderEvent.Context">
<Description>
This class is generated by the HIP.BP.LabOrderEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.LabOrderEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>HIP.BP.Context</Super>
<TimeChanged>64944,39955.609978</TimeChanged>
<TimeCreated>64245,55606.496482</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>EncounterExist</Value>
</Value>
<Value name="2">
<Value>HL7</Value>
</Value>
<Value name="3">
<Value>LabOrder</Value>
</Value>
<Value name="4">
<Value>RadOrder</Value>
</Value>
<Value name="5">
<Value>Document</Value>
</Value>
<Value name="6">
<Value>Diagnosis</Value>
</Value>
<Value name="7">
<Value>Result</Value>
</Value>
<Value name="8">
<Value>Medication</Value>
</Value>
<Value name="9">
<Value>HL7</Value>
</Value>
<Value name="10">
<Value>IsPatientExist</Value>
</Value>
<Value name="11">
<Value>IsEncounterExist</Value>
</Value>
<Value name="12">
<Value>IsLabOrderExist</Value>
</Value>
<Value name="13">
<Value>IsRadOrderExist</Value>
</Value>
<Value name="14">
<Value>Log</Value>
</Value>
<Value name="15">
<Value>Patient</Value>
</Value>
<Value name="16">
<Value>Encounter</Value>
</Value>
<Value name="17">
<Value>PatientNID</Value>
</Value>
<Value name="18">
<Value>EncounterID</Value>
</Value>
<Value name="19">
<Value>EncounterNo</Value>
</Value>
<Value name="20">
<Value>OrderID</Value>
</Value>
<Value name="21">
<Value>OrderNo</Value>
</Value>
<Value name="22">
<Value>PatientID</Value>
</Value>
<Value name="23">
<Value>PatientNo</Value>
</Value>
</Data>
</Storage>

<Method name="OnResponse1">
<Description>
Response Handler for call to HIP.BP.EncounterEvent</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqLabOrderEvent,response:Ens.Response,callrequest:HIP.MSG.reqEncounterEvent,callresponse:HIP.MSG.resGetEncounter,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Encounter=callresponse.Encounter
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.LabOrderEvent.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqLabOrderEvent,response:Ens.Response,callrequest:HIP.MSG.reqGetLabOrder,callresponse:HIP.MSG.resGetLabOrder,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.LabOrder=callresponse.LabOrder
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.LabOrderEvent.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BP.LabOrderEvent.Thread1">
<Description>
This class is generated by the HIP.BP.LabOrderEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.LabOrderEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.489454</TimeChanged>
<TimeCreated>64944,39955.595868</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish a state for the Scope beginning
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 #; Remove this scopes fault handler
 $$$Pop(..%HandlerStack)
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.HL7
 Set status=$classmethod("HIP.DT.LabOrder2HL7","Transform",context.LabOrder,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.HL7=iscTemp
 #; --- Begin Call HL7 2 File ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.HL7.Message).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=context.HL7
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","EnsLib.HL7.Operation.FileOperation",callrequest,"HL7 2 File",0,0,"HL7 2 File",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call HL7 2 File ---
 Set ..%NextState="S10"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S12">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
]]></Implementation>
</Method>

<Method name="S13">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
]]></Implementation>
</Method>

<Method name="S14">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S13"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish fault handler
 $$$Push("S3",..%HandlerStack)
 Do {
 Set rEID=""
 if request.EncounterSource="O"
 {
   Set rEID="OP"_request.EncounterID
 }
 elseif request.EncounterSource="I"
 {
  Set rEID="IP"_request.EncounterID
 }
 else {}
 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 If ($ISOBJECT(tEncounter)) 
 {
     Set context.IsEncounterExist=1
     Set context.Encounter = tEncounter
 }
 } while (0)
 If $$$ISERR(status) Quit
 If '(context.IsEncounterExist) {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (0) {
 Set ..%NextState="S13"
 } else {
 Set ..%NextState="S14"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync LabOrder ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetLabOrder).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.LabOrderID=request.LabOrderID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","HIP.BO.SQL2HIS",callrequest,"Sync LabOrder",1,0,"Sync LabOrder",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync LabOrder ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync LabOrder") Do ..%PendingResponses.SetAt("","Sync LabOrder")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Encounter ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqEncounterEvent).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.EncounterID=request.EncounterID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientID=request.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNID=request.PatientNID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNO=request.PatientNO
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.CallBy=request.CallBy
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","HIP.BP.EncounterEvent",callrequest,"Sync Encounter",1,0,"Sync Encounter",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Encounter ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Encounter") Do ..%PendingResponses.SetAt("","Sync Encounter")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If '(##class(HIP.Setting).IsHistory()) {
 Set ..%NextState="S11"
 } else {
 Set ..%NextState="S10"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.LabOrderEvent">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64281,61026.204508</TimeChanged>
<TimeCreated>64245,55310.59222</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.reqLabOrderEvent' response='Ens.Response' contextsuperclass='HIP.BP.Context' height='2000' width='2000' >
<sequence xend='200' yend='1600' >
<scope xpos='200' ypos='250' xend='200' yend='1500' >
<code name='Get Encounter' xpos='200' ypos='350' >
<![CDATA[ Set rEID=""
 if request.EncounterSource="O"
 {
   Set rEID="OP"_request.EncounterID
 }
 elseif request.EncounterSource="I"
 {
  Set rEID="IP"_request.EncounterID
 }
 else {}
 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 If ($ISOBJECT(tEncounter)) 
 {
     Set context.IsEncounterExist=1
     Set context.Encounter = tEncounter
 }]]]]><![CDATA[>
</code>
<if name='Encounter Exist?' condition='context.IsEncounterExist' xpos='200' ypos='450' xend='200' yend='700' >
<false>
<call name='Sync Encounter' target='HIP.BP.EncounterEvent' async='0' xpos='335' ypos='600' >
<request type='HIP.MSG.reqEncounterEvent' >
<assign property="callrequest.EncounterID" value="request.EncounterID" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
<assign property="callrequest.PatientID" value="request.PatientID" action="set" />
<assign property="callrequest.PatientNID" value="request.PatientNID" action="set" />
<assign property="callrequest.PatientNO" value="request.PatientNO" action="set" />
<assign property="callrequest.CallBy" value="request.CallBy" action="set" />
</request>
<response type='HIP.MSG.resGetEncounter' >
<assign property="context.Encounter" value="callresponse.Encounter" action="set" />
</response>
</call>
</false>
</if>
<call name='Sync LabOrder' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='800' >
<request type='HIP.MSG.reqGetLabOrder' >
<assign property="callrequest.LabOrderID" value="request.LabOrderID" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
</request>
<response type='HIP.MSG.resGetLabOrder' >
<assign property="context.LabOrder" value="callresponse.LabOrder" action="set" />
</response>
</call>
<if name='History data upload?' condition='##class(HIP.Setting).IsHistory()' xpos='200' ypos='900' xend='200' yend='1250' >
<false>
<transform name='LabOrder 2 HL7 ' class='HIP.DT.LabOrder2HL7' source='context.LabOrder' target='context.HL7' xpos='335' ypos='1050' />
<call name='HL7 2 File' target='EnsLib.HL7.Operation.FileOperation' async='1' xpos='335' ypos='1150' >
<request type='EnsLib.HL7.Message' >
<assign property="callrequest" value="context.HL7" action="set" />
</request>
</call>
</false>
</if>
<faulthandlers>
<catchall xpos='200' ypos='1350' xend='200' yend='550' />
</faulthandlers>
</scope>
</sequence>
</process>
]]></Data>
</XData>
</Class>


<Class name="HIP.BP.ObservationEvent.Context">
<Description>
This class is generated by the HIP.BP.ObservationEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.ObservationEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64944,39955.678426</TimeChanged>
<TimeCreated>64245,41733.494185</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>EncounterExist</Value>
</Value>
<Value name="2">
<Value>Observation</Value>
</Value>
<Value name="3">
<Value>HL7</Value>
</Value>
</Data>
</Storage>

<Property name="EncounterExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="HL7">
<Type>EnsLib.HL7.Message</Type>
</Property>

<Property name="Observation">
<Type>CDR.Observation</Type>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqObservationEvent,response:Ens.Response,callrequest:HIP.MSG.reqGetObservation,callresponse:HIP.MSG.resGetObservation,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Observation=callresponse.Observation
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.ObservationEvent.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BP.ObservationEvent.Thread1">
<Description>
This class is generated by the HIP.BP.ObservationEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.ObservationEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.529167</TimeChanged>
<TimeCreated>64944,39955.664935</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish a state for the Scope beginning
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 #; Remove this scopes fault handler
 $$$Pop(..%HandlerStack)
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.HL7
 Set status=$classmethod("HIP.DT.Observation2HL7","Transform",context.Observation,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.HL7=iscTemp
 #; --- Begin Call HL7 2 File ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.HL7.Message).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=context.HL7
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","EnsLib.HL7.Operation.FileOperation",callrequest,"HL7 2 File",1,0,"HL7 2 File",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call HL7 2 File ---
 Set ..%NextState="S10"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S12">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
]]></Implementation>
</Method>

<Method name="S13">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
]]></Implementation>
</Method>

<Method name="S14">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S13"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish fault handler
 $$$Push("S3",..%HandlerStack)
 Do {
 Set rEID=""
 if request.EncounterSource="O"
 {
   Set rEID="OP"_request.EncounterID
 }
 elseif request.EncounterSource="I"
 {
  Set rEID="IP"_request.EncounterID
 }
 else {}
 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 Set:($ISOBJECT(tEncounter)) context.EncounterExist=1
 } while (0)
 If $$$ISERR(status) Quit
 If '(context.EncounterExist) {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (0) {
 Set ..%NextState="S13"
 } else {
 Set ..%NextState="S14"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Observation ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetObservation).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.ObservationID=request.ObservationID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","HIP.BO.SQL2HIS",callrequest,"Sync Observation",1,0,"Sync Observation",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Observation ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Observation") Do ..%PendingResponses.SetAt("","Sync Observation")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Encounter ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqEncounterEvent).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.EncounterID=request.EncounterID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientID=request.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNID=request.PatientNID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNO=request.PatientNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.CallBy=request.CallBy
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HIP.BP.EncounterEvent",callrequest,"Sync Encounter",1,0,"Sync Encounter",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Encounter ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Encounter") Do ..%PendingResponses.SetAt("","Sync Encounter")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If '(##class(HIP.Setting).IsHistory()) {
 Set ..%NextState="S11"
 } else {
 Set ..%NextState="S10"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.ObservationEvent">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64281,61262.019567</TimeChanged>
<TimeCreated>64245,41418.692858</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.reqObservationEvent' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='EncounterExist' type='%Boolean' initialexpression='0' instantiate='0' />
<property name='Observation' type='CDR.Observation' instantiate='0' />
<property name='HL7' type='EnsLib.HL7.Message' instantiate='0' />
</context>
<sequence xend='200' yend='1600' >
<scope xpos='200' ypos='250' xend='200' yend='1500' >
<code name='Get Encounter' xpos='200' ypos='350' >
<![CDATA[ Set rEID=""
 if request.EncounterSource="O"
 {
   Set rEID="OP"_request.EncounterID
 }
 elseif request.EncounterSource="I"
 {
  Set rEID="IP"_request.EncounterID
 }
 else {}
 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 Set:($ISOBJECT(tEncounter)) context.EncounterExist=1]]]]><![CDATA[>
</code>
<if name='Encounter Exist?' condition='context.EncounterExist' xpos='200' ypos='450' xend='200' yend='700' >
<false>
<call name='Sync Encounter' target='HIP.BP.EncounterEvent' async='0' xpos='335' ypos='600' >
<request type='HIP.MSG.reqEncounterEvent' >
<assign property="callrequest.EncounterID" value="request.EncounterID" action="set" />
<assign property="callrequest.PatientID" value="request.PatientID" action="set" />
<assign property="callrequest.PatientNID" value="request.PatientNID" action="set" />
<assign property="callrequest.PatientNO" value="request.PatientNo" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
<assign property="callrequest.CallBy" value="request.CallBy" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<call name='Sync Observation' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='800' >
<request type='HIP.MSG.reqGetObservation' >
<assign property="callrequest.ObservationID" value="request.ObservationID" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
</request>
<response type='HIP.MSG.resGetObservation' >
<assign property="context.Observation" value="callresponse.Observation" action="set" />
</response>
</call>
<if name='History data upload?' condition='##class(HIP.Setting).IsHistory()' xpos='200' ypos='900' xend='200' yend='1250' >
<false>
<transform name='Observation 2HL7 ADT' class='HIP.DT.Observation2HL7' source='context.Observation' target='context.HL7' xpos='335' ypos='1050' />
<call name='HL7 2 File' target='EnsLib.HL7.Operation.FileOperation' async='1' xpos='335' ypos='1150' >
<request type='EnsLib.HL7.Message' >
<assign property="callrequest" value="context.HL7" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<faulthandlers>
<catchall xpos='200' ypos='1350' xend='200' yend='550' />
</faulthandlers>
</scope>
</sequence>
</process>
]]></Data>
</XData>
</Class>


<Class name="HIP.BP.OrderEvent.Context">
<Description>
This class is generated by the HIP.BP.OrderEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.OrderEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64944,39955.898378</TimeChanged>
<TimeCreated>64240,42297.080376</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>EncounterExist</Value>
</Value>
<Value name="2">
<Value>Order</Value>
</Value>
<Value name="3">
<Value>HL7</Value>
</Value>
</Data>
</Storage>

<Property name="EncounterExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="HL7">
<Type>EnsLib.HL7.Message</Type>
</Property>

<Property name="Order">
<Type>CDR.Order</Type>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqOrderEvent,response:Ens.Response,callrequest:HIP.MSG.reqGetOrder,callresponse:HIP.MSG.resGetOrder,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Order=callresponse.Order
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.OrderEvent.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BP.OrderEvent.Thread1">
<Description>
This class is generated by the HIP.BP.OrderEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.OrderEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.519315</TimeChanged>
<TimeCreated>64944,39955.885027</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish a state for the Scope beginning
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 #; Remove this scopes fault handler
 $$$Pop(..%HandlerStack)
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.HL7
 Set status=$classmethod("HIP.DT.Medication2HL7","Transform",context.Order,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.HL7=iscTemp
 #; --- Begin Call HL7 2 File ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.HL7.Message).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=context.HL7
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","EnsLib.HL7.Operation.FileOperation",callrequest,"HL7 2 File",1,0,"HL7 2 File",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call HL7 2 File ---
 Set ..%NextState="S10"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S12">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
]]></Implementation>
</Method>

<Method name="S13">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
]]></Implementation>
</Method>

<Method name="S14">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S13"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish fault handler
 $$$Push("S3",..%HandlerStack)
 Do {
 Set rEID=""
 if request.EncounterSource="O"
 {
   Set rEID="OP"_request.EncounterID
 }
 elseif request.EncounterSource="I"
 {
  Set rEID="IP"_request.EncounterID
 }
 else {}
 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 Set:($ISOBJECT(tEncounter)) context.EncounterExist=1
 } while (0)
 If $$$ISERR(status) Quit
 If '(context.EncounterExist) {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (0) {
 Set ..%NextState="S13"
 } else {
 Set ..%NextState="S14"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Order ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetOrder).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.OrderID=request.OrderID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","HIP.BO.SQL2HIS",callrequest,"Sync Order",1,0,"Sync Order",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Order ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Order") Do ..%PendingResponses.SetAt("","Sync Order")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Encounter ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqEncounterEvent).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.EncounterID=request.EncounterID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientID=request.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNO=request.PatientNO
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNID=request.PatientNID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.CallBy=request.CallBy
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HIP.BP.EncounterEvent",callrequest,"Sync Encounter",1,0,"Sync Encounter",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Encounter ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Encounter") Do ..%PendingResponses.SetAt("","Sync Encounter")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If '(##class(HIP.Setting).IsHistory()) {
 Set ..%NextState="S11"
 } else {
 Set ..%NextState="S10"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.OrderEvent">
<Description>
医品医嘱</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64281,61329.559623</TimeChanged>
<TimeCreated>64240,42205.010931</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.reqOrderEvent' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='EncounterExist' type='%Boolean' initialexpression='0' instantiate='0' />
<property name='Order' type='CDR.Order' instantiate='0' />
<property name='HL7' type='EnsLib.HL7.Message' instantiate='0' />
</context>
<sequence xend='200' yend='1600' >
<scope xpos='200' ypos='250' xend='200' yend='1500' >
<code name='Get Encounter' xpos='200' ypos='350' >
<![CDATA[ Set rEID=""
 if request.EncounterSource="O"
 {
   Set rEID="OP"_request.EncounterID
 }
 elseif request.EncounterSource="I"
 {
  Set rEID="IP"_request.EncounterID
 }
 else {}
 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 Set:($ISOBJECT(tEncounter)) context.EncounterExist=1]]]]><![CDATA[>
</code>
<if name='Encounter Exist?' condition='context.EncounterExist' xpos='200' ypos='450' xend='200' yend='700' >
<annotation><![CDATA[就诊信息是否存在]]]]><![CDATA[></annotation>
<false>
<call name='Sync Encounter' target='HIP.BP.EncounterEvent' async='0' xpos='335' ypos='600' >
<request type='HIP.MSG.reqEncounterEvent' >
<assign property="callrequest.EncounterID" value="request.EncounterID" action="set" />
<assign property="callrequest.PatientID" value="request.PatientID" action="set" />
<assign property="callrequest.PatientNO" value="request.PatientNO" action="set" />
<assign property="callrequest.PatientNID" value="request.PatientNID" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
<assign property="callrequest.CallBy" value="request.CallBy" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<call name='Sync Order' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='800' >
<request type='HIP.MSG.reqGetOrder' >
<assign property="callrequest.OrderID" value="request.OrderID" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
</request>
<response type='HIP.MSG.resGetOrder' >
<assign property="context.Order" value="callresponse.Order" action="set" />
</response>
</call>
<if name='History data upload?' condition='##class(HIP.Setting).IsHistory()' xpos='200' ypos='900' xend='200' yend='1250' >
<false>
<transform name='MedOrder 2 HL7 ADT' class='HIP.DT.Medication2HL7' source='context.Order' target='context.HL7' xpos='335' ypos='1050' />
<call name='HL7 2 File' target='EnsLib.HL7.Operation.FileOperation' async='1' xpos='335' ypos='1150' >
<request type='EnsLib.HL7.Message' >
<assign property="callrequest" value="context.HL7" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<faulthandlers>
<catchall xpos='200' ypos='1350' xend='200' yend='550' />
</faulthandlers>
</scope>
</sequence>
</process>
]]></Data>
</XData>
</Class>


<Class name="HIP.BP.ProcedureEvent.Context">
<Description>
This class is generated by the HIP.BP.ProcedureEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.ProcedureEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64944,39955.908585</TimeChanged>
<TimeCreated>64245,48133.22921</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>Procedure</Value>
</Value>
<Value name="2">
<Value>EncounterExist</Value>
</Value>
<Value name="3">
<Value>HL7</Value>
</Value>
</Data>
</Storage>

<Property name="EncounterExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="HL7">
<Type>EnsLib.HL7.Message</Type>
</Property>

<Property name="Procedure">
<Type>CDR.Procedure</Type>
<SqlFieldName>_Procedure</SqlFieldName>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqProcedureEvent,response:Ens.Response,callrequest:HIP.MSG.reqGetProcedure,callresponse:HIP.MSG.resGetProcedure,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Procedure=callresponse.Procedure
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.ProcedureEvent.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BP.ProcedureEvent.Thread1">
<Description>
This class is generated by the HIP.BP.ProcedureEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.ProcedureEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.620507</TimeChanged>
<TimeCreated>64944,39955.89372</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish a state for the Scope beginning
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 #; Remove this scopes fault handler
 $$$Pop(..%HandlerStack)
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.HL7
 Set status=$classmethod("HIP.DT.Procedure2HL7","Transform",context.Procedure,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.HL7=iscTemp
 #; --- Begin Call HL7 2 File ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.HL7.Message).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=context.HL7
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","EnsLib.HL7.Operation.FileOperation",callrequest,"HL7 2 File",1,0,"HL7 2 File",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call HL7 2 File ---
 Set ..%NextState="S10"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S12">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
]]></Implementation>
</Method>

<Method name="S13">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
]]></Implementation>
</Method>

<Method name="S14">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S13"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish fault handler
 $$$Push("S3",..%HandlerStack)
 Do {
 Set rEID=""
 if request.EncounterSource="O"
 {
   Set rEID="OP"_request.EncounterID
 }
 elseif request.EncounterSource="I"
 {
  Set rEID="IP"_request.EncounterID
 }
 else {}
 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 Set:($ISOBJECT(tEncounter)) context.EncounterExist=1
 } while (0)
 If $$$ISERR(status) Quit
 If '(context.EncounterExist) {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (0) {
 Set ..%NextState="S13"
 } else {
 Set ..%NextState="S14"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Procedure ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetProcedure).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.ProcedureID=request.ProcedureID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","HIP.BO.SQL2HIS",callrequest,"Sync Procedure",1,0,"Sync Procedure",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Procedure ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Procedure") Do ..%PendingResponses.SetAt("","Sync Procedure")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Encounter ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqEncounterEvent).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.EncounterID=request.EncounterID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientID=request.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNID=request.PatientNID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNO=request.PatientNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterSource
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.CallBy=request.CallBy
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HIP.BP.EncounterEvent",callrequest,"Sync Encounter",1,0,"Sync Encounter",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Encounter ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Encounter") Do ..%PendingResponses.SetAt("","Sync Encounter")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If '(##class(HIP.Setting).IsHistory()) {
 Set ..%NextState="S11"
 } else {
 Set ..%NextState="S10"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.ProcedureEvent">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64281,61105.269602</TimeChanged>
<TimeCreated>64245,48081.252799</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.reqProcedureEvent' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='Procedure' type='CDR.Procedure' instantiate='0' />
<property name='EncounterExist' type='%Boolean' initialexpression='0' instantiate='0' />
<property name='HL7' type='EnsLib.HL7.Message' instantiate='0' />
</context>
<sequence xend='200' yend='1600' >
<scope xpos='200' ypos='250' xend='200' yend='1500' >
<code name='Get Encounter' xpos='200' ypos='350' >
<![CDATA[ Set rEID=""
 if request.EncounterSource="O"
 {
   Set rEID="OP"_request.EncounterID
 }
 elseif request.EncounterSource="I"
 {
  Set rEID="IP"_request.EncounterID
 }
 else {}
 Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 Set:($ISOBJECT(tEncounter)) context.EncounterExist=1]]]]><![CDATA[>
</code>
<if name='Encounter Exist?' condition='context.EncounterExist' xpos='200' ypos='450' xend='200' yend='700' >
<false>
<call name='Sync Encounter' target='HIP.BP.EncounterEvent' async='0' xpos='335' ypos='600' >
<request type='HIP.MSG.reqEncounterEvent' >
<assign property="callrequest.EncounterID" value="request.EncounterID" action="set" />
<assign property="callrequest.PatientID" value="request.PatientID" action="set" />
<assign property="callrequest.PatientNID" value="request.PatientNID" action="set" />
<assign property="callrequest.PatientNO" value="request.PatientNo" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
<assign property="callrequest.CallBy" value="request.CallBy" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<call name='Sync Procedure' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='800' >
<request type='HIP.MSG.reqGetProcedure' >
<assign property="callrequest.ProcedureID" value="request.ProcedureID" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterSource" action="set" />
</request>
<response type='HIP.MSG.resGetProcedure' >
<assign property="context.Procedure" value="callresponse.Procedure" action="set" />
</response>
</call>
<if name='History data upload?' condition='##class(HIP.Setting).IsHistory()' xpos='200' ypos='900' xend='200' yend='1250' >
<false>
<transform name='Procedure 2HL7 ' class='HIP.DT.Procedure2HL7' source='context.Procedure' target='context.HL7' xpos='335' ypos='1050' />
<call name='HL7 2 File' target='EnsLib.HL7.Operation.FileOperation' async='1' xpos='335' ypos='1150' >
<request type='EnsLib.HL7.Message' >
<assign property="callrequest" value="context.HL7" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<faulthandlers>
<catchall xpos='714' ypos='839' xend='200' yend='550' />
</faulthandlers>
</scope>
</sequence>
</process>
]]></Data>
</XData>
</Class>


<Class name="HIP.BP.RegistEvent.Context">
<Description>
This class is generated by the HIP.BP.RegistEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.RegistEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64944,39955.966384</TimeChanged>
<TimeCreated>64125,73140.384393</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>HL7Message</Value>
</Value>
<Value name="2">
<Value>Patient</Value>
</Value>
<Value name="3">
<Value>PatientExist</Value>
</Value>
<Value name="4">
<Value>PatientID</Value>
</Value>
<Value name="5">
<Value>Regist</Value>
</Value>
<Value name="6">
<Value>RegistID</Value>
</Value>
</Data>
</Storage>

<Property name="Patient">
<Type>CDR.Patient</Type>
</Property>

<Property name="PatientExist">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="PatientID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Regist">
<Type>CDR.Regist</Type>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqEventMonitor,response:Ens.Response,callrequest:HIP.MSG.reqGetPatientIDByRegistID,callresponse:HIP.MSG.resGetPatientID,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.PatientID=callresponse.PatientID
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.RegistEvent.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqEventMonitor,response:Ens.Response,callrequest:HIP.MSG.reqGetPatient,callresponse:HIP.MSG.resGetPatient,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Patient=callresponse.Patient
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.RegistEvent.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse3">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqEventMonitor,response:Ens.Response,callrequest:HIP.MSG.reqGetRegist,callresponse:HIP.MSG.resGetRegist,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Regist=callresponse.Regist
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.RegistEvent.Thread1","OnResponse3")
 Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BP.RegistEvent.Thread1">
<Description>
This class is generated by the HIP.BP.RegistEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.RegistEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.558348</TimeChanged>
<TimeCreated>64944,39955.955499</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Get Patient ID ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetPatientIDByRegistID).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.RegistID=request.RowID
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","HIP.BO.SQL2HIS",callrequest,"Get Patient ID",1,0,"Get Patient ID",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Get Patient ID ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Get Patient ID") Do ..%PendingResponses.SetAt("","Get Patient ID")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 Set tPatient = ##class(CDR.Patient).ukMPIIDOpen(context.PatientID)
 Set:($ISOBJECT(tPatient)) context.PatientExist=1
 } while (0)
 If $$$ISERR(status) Quit
 If '(context.PatientExist) {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Regist ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetRegist).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.RegistID=request.RowID
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse3","HIP.BO.SQL2HIS",callrequest,"Sync Regist",1,0,"Sync Regist",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Regist ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Regist") Do ..%PendingResponses.SetAt("","Sync Regist")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Patient ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetPatient).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.PID=context.PatientID
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","HIP.BO.SQL2HIS",callrequest,"Sync Patient",1,0,"Sync Patient",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Patient ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Patient") Do ..%PendingResponses.SetAt("","Sync Patient")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.RegistEvent">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64125,73359.372128</TimeChanged>
<TimeCreated>64125,71153.23994</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.reqEventMonitor' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='PatientID' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='Patient' type='CDR.Patient' instantiate='0' />
<property name='Regist' type='CDR.Regist' instantiate='0' />
<property name='PatientExist' type='%Boolean' initialexpression='0' instantiate='0' />
</context>
<sequence xend='200' yend='900' >
<call name='Get Patient ID' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='250' >
<request type='HIP.MSG.reqGetPatientIDByRegistID' >
<assign property="callrequest.RegistID" value="request.RowID" action="set" />
</request>
<response type='HIP.MSG.resGetPatientID' >
<assign property="context.PatientID" value="callresponse.PatientID" action="set" />
</response>
</call>
<code name='Query Patient' xpos='200' ypos='350' >
<![CDATA[ Set tPatient = ##class(CDR.Patient).ukMPIIDOpen(context.PatientID)
 Set:($ISOBJECT(tPatient)) context.PatientExist=1]]]]><![CDATA[>
</code>
<if name='Patient Exist?' condition='context.PatientExist' xpos='200' ypos='450' xend='200' yend='700' >
<false>
<call name='Sync Patient' target='HIP.BO.SQL2HIS' async='0' xpos='335' ypos='600' >
<request type='HIP.MSG.reqGetPatient' >
<assign property="callrequest.PID" value="context.PatientID" action="set" />
</request>
<response type='HIP.MSG.resGetPatient' >
<assign property="context.Patient" value="callresponse.Patient" action="set" />
</response>
</call>
</false>
</if>
<call name='Sync Regist' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='800' >
<request type='HIP.MSG.reqGetRegist' >
<assign property="callrequest.RegistID" value="request.RowID" action="set" />
</request>
<response type='HIP.MSG.resGetRegist' >
<assign property="context.Regist" value="callresponse.Regist" action="set" />
</response>
</call>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.ResultEvent.Context">
<Description>
This class is generated by the HIP.BP.ResultEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.ResultEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>HIP.BP.Context</Super>
<TimeChanged>64944,39955.992865</TimeChanged>
<TimeCreated>64247,43993.251895</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>PatientExist</Value>
</Value>
<Value name="2">
<Value>EncounterExist</Value>
</Value>
<Value name="3">
<Value>HL7</Value>
</Value>
<Value name="4">
<Value>Result</Value>
</Value>
<Value name="5">
<Value>Document</Value>
</Value>
<Value name="6">
<Value>Diagnosis</Value>
</Value>
<Value name="7">
<Value>Result</Value>
</Value>
<Value name="8">
<Value>Medication</Value>
</Value>
<Value name="9">
<Value>HL7</Value>
</Value>
<Value name="10">
<Value>IsPatientExist</Value>
</Value>
<Value name="11">
<Value>IsEncounterExist</Value>
</Value>
<Value name="12">
<Value>IsLabOrderExist</Value>
</Value>
<Value name="13">
<Value>IsRadOrderExist</Value>
</Value>
<Value name="14">
<Value>Log</Value>
</Value>
<Value name="15">
<Value>Patient</Value>
</Value>
<Value name="16">
<Value>Encounter</Value>
</Value>
<Value name="17">
<Value>LabOrder</Value>
</Value>
<Value name="18">
<Value>RadOrder</Value>
</Value>
<Value name="19">
<Value>EncounterNo</Value>
</Value>
<Value name="20">
<Value>OrderID</Value>
</Value>
<Value name="21">
<Value>OrderNo</Value>
</Value>
<Value name="22">
<Value>PatientID</Value>
</Value>
<Value name="23">
<Value>PatientNo</Value>
</Value>
<Value name="24">
<Value>PatientNID</Value>
</Value>
<Value name="25">
<Value>EncounterID</Value>
</Value>
</Data>
</Storage>

<Method name="OnResponse1">
<Description>
Response Handler for call to HIP.BP.LabOrderEvent</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqResultEvent,response:Ens.Response,callrequest:HIP.MSG.reqLabOrderEvent,callresponse:HIP.MSG.resGetLabOrder,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.LabOrder=callresponse.LabOrder
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.ResultEvent.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to HIP.BO.SQL2LABLIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.reqResultEvent,response:Ens.Response,callrequest:HIP.MSG.reqGetResultItems,callresponse:HIP.MSG.resGetResultItems,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Result=callresponse.Result
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.ResultEvent.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BP.ResultEvent.Thread1">
<Description>
This class is generated by the HIP.BP.ResultEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.ResultEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.628556</TimeChanged>
<TimeCreated>64944,39955.979733</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish a state for the Scope beginning
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 #; Remove this scopes fault handler
 $$$Pop(..%HandlerStack)
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.HL7
 Set status=$classmethod("HIP.DT.Result2HL7","Transform",context.Result,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.HL7=iscTemp
 #; --- Begin Call HL7 2 File ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.HL7.Message).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=context.HL7
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","EnsLib.HL7.Operation.FileOperation",callrequest,"HL7 2 File",1,0,"HL7 2 File",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call HL7 2 File ---
 Set ..%NextState="S10"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S12">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
]]></Implementation>
</Method>

<Method name="S13">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S12"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
]]></Implementation>
</Method>

<Method name="S14">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S13"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; Establish fault handler
 $$$Push("S3",..%HandlerStack)
 Do {
 Set tLabOrder = ##class(CDR.LabOrder).ukOrderIdOpen(request.OrderNo)
 if ($ISOBJECT(tLabOrder)) 
 {
     Set context.IsLabOrderExist=1
     Set context.LabOrder = tLabOrder
 }
 } while (0)
 If $$$ISERR(status) Quit
 If '(context.IsLabOrderExist) {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (0) {
 Set ..%NextState="S13"
 } else {
 Set ..%NextState="S14"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Result ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetResultItems).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.SampleNumber=request.ResultNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EpisodeNo=request.EncounterID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientID=request.PatientID
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","HIP.BO.SQL2LABLIS",callrequest,"Sync Result",1,0,"Sync Result",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Result ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Result") Do ..%PendingResponses.SetAt("","Sync Result")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Lab Order ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqLabOrderEvent).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.LabOrderID=request.OrderNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterType
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientID=request.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNID=request.PatientNID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterID=request.EncounterID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNO=request.PatientNO
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","HIP.BP.LabOrderEvent",callrequest,"Sync Lab Order",1,0,"Sync Lab Order",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Lab Order ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Lab Order") Do ..%PendingResponses.SetAt("","Sync Lab Order")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If '(##class(HIP.Setting).IsHistory()) {
 Set ..%NextState="S11"
 } else {
 Set ..%NextState="S10"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.ResultEvent">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64281,61196.793571</TimeChanged>
<TimeCreated>64247,43913.867245</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.reqResultEvent' response='Ens.Response' contextsuperclass='HIP.BP.Context' height='2000' width='2000' >
<sequence xend='200' yend='1600' >
<scope xpos='200' ypos='250' xend='200' yend='1500' >
<code name='Get Lab Order' xpos='200' ypos='350' >
<![CDATA[ Set tLabOrder = ##class(CDR.LabOrder).ukOrderIdOpen(request.OrderNo)
 if ($ISOBJECT(tLabOrder)) 
 {
     Set context.IsLabOrderExist=1
     Set context.LabOrder = tLabOrder
 }]]]]><![CDATA[>
</code>
<if name='Lab Order Exist?' condition='context.IsLabOrderExist' xpos='200' ypos='450' xend='200' yend='700' >
<false>
<call name='Sync Lab Order' target='HIP.BP.LabOrderEvent' async='0' xpos='335' ypos='600' >
<request type='HIP.MSG.reqLabOrderEvent' >
<assign property="callrequest.LabOrderID" value="request.OrderNo" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterType" action="set" />
<assign property="callrequest.PatientID" value="request.PatientID" action="set" />
<assign property="callrequest.PatientNID" value="request.PatientNID" action="set" />
<assign property="callrequest.EncounterID" value="request.EncounterID" action="set" />
<assign property="callrequest.PatientNO" value="request.PatientNO" action="set" />
</request>
<response type='HIP.MSG.resGetLabOrder' >
<assign property="context.LabOrder" value="callresponse.LabOrder" action="set" />
</response>
</call>
</false>
</if>
<call name='Sync Result' target='HIP.BO.SQL2LABLIS' async='0' xpos='200' ypos='800' >
<request type='HIP.MSG.reqGetResultItems' >
<assign property="callrequest.SampleNumber" value="request.ResultNo" action="set" />
<assign property="callrequest.EpisodeNo" value="request.EncounterID" action="set" />
<assign property="callrequest.PatientID" value="request.PatientID" action="set" />
</request>
<response type='HIP.MSG.resGetResultItems' >
<assign property="context.Result" value="callresponse.Result" action="set" />
</response>
</call>
<if name='History data upload?' condition='##class(HIP.Setting).IsHistory()' xpos='200' ypos='900' xend='200' yend='1250' >
<false>
<transform name='Result HL7 2 ORU' class='HIP.DT.Result2HL7' source='context.Result' target='context.HL7' xpos='335' ypos='1050' />
<call name='HL7 2 File' target='EnsLib.HL7.Operation.FileOperation' async='1' xpos='335' ypos='1150' >
<request type='EnsLib.HL7.Message' >
<assign property="callrequest" value="context.HL7" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<faulthandlers>
<catchall xpos='200' ypos='1350' xend='200' yend='550' />
</faulthandlers>
</scope>
</sequence>
</process>
]]></Data>
</XData>
</Class>


<Class name="HIP.BP.SiteResultEvent.Context">
<Description>
This class is generated by the HIP.BP.SiteResultEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.SiteResultEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>HIP.BP.Context</Super>
<TimeChanged>64944,39955.948202</TimeChanged>
<TimeCreated>64405,39913.839095</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>

<Method name="OnResponse1">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.Site.reqResultEvent,response:Ens.Response,callrequest:HIP.MSG.reqGetPNIDInfoByPNO,callresponse:HIP.MSG.resGetPNIDInfoByPNO,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.PatientID=callresponse.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.PatientNID=callresponse.PatientNID
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.SiteResultEvent.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to HIP.BO.SQL2HIS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:HIP.MSG.Site.reqResultEvent,response:Ens.Response,callrequest:HIP.MSG.reqGetEncounterNoByPatientAndDate,callresponse:HIP.MSG.resGetEncounterNoByPatientAndDate,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.EncounterNo=callresponse.EncounterNo
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("HIP.BP.SiteResultEvent.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BP.SiteResultEvent.Thread1">
<Description>
This class is generated by the HIP.BP.SiteResultEvent BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>HIP.BP.SiteResultEvent</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64944,39966.686182</TimeChanged>
<TimeCreated>64944,39955.933699</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Get Patient Info ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetPNIDInfoByPNO).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.PatientNo=request.PatientNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EpisodeType=request.EncounterType
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","HIP.BO.SQL2HIS",callrequest,"Get Patient Info",1,0,"Get Patient Info",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Get Patient Info ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Get Patient Info") Do ..%PendingResponses.SetAt("","Get Patient Info")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Sync Encounter ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqEncounterEvent).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.EncounterID=context.EncounterNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNO=request.PatientNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterSource=request.EncounterType
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientID=context.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNID=context.PatientNID
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HIP.BP.EncounterEvent",callrequest,"Sync Encounter",1,0,"Sync Encounter",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Sync Encounter ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Sync Encounter") Do ..%PendingResponses.SetAt("","Sync Encounter")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S12"
 } else {
    Set ..%NextState="S11",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S12"
 } else {
    Set ..%NextState="S11",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S12">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 Set rEID=""
 if request.EncounterType="O"
 {
   Set rEID="OP"_context.EncounterNo
 }
 elseif request.EncounterType="I"
 {
  Set rEID="IP"_context.EncounterNo
 }
   Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 If ($ISOBJECT(tEncounter)) 
 {
     Set context.IsEncounterExist=1
     Set context.Encounter = tEncounter
     
     Set tLabOrder = ""
     Set tSC = ##class(CDR.Site.Code).CreateLabOrderbySampleNo(request.SampleNo,tEncounter.%Id(),.tLabOrder)
     
     Set context.LabOrder = tLabOrder
     Set context.IsLabOrderExist = 1
     Set context.OrderNo="LABS"_request.SampleNo
 }
 Else
 {
 }
 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Standard Result Process ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqResultEvent).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.EncounterType=request.EncounterType
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.OrderNo=context.OrderNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.ResultNo=request.SampleNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EncounterID=context.EncounterNo
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientID=context.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNID=context.PatientNID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientNO=request.PatientNo
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HIP.BP.ResultEvent",callrequest,"Standard Result Process",1,0,"Standard Result Process",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Standard Result Process ---
 Set ..%NextState="S8"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (context.PatientID="") {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Get Encounter No ---
 #; --- Begin Request ---
 Set callrequest=##class(HIP.MSG.reqGetEncounterNoByPatientAndDate).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.EpisodeType=request.EncounterType
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.PatientID=context.PatientID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.EpisodeDate=request.EpisodeDate
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","HIP.BO.SQL2HIS",callrequest,"Get Encounter No",1,0,"Get Encounter No",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Get Encounter No ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Get Encounter No") Do ..%PendingResponses.SetAt("","Get Encounter No")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","HIP.BP.SiteResultEvent","S5","未找到门诊号:" _request.PatientNo_" 的对应的身份信息")
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (context.EncounterNo="") {
 Set ..%NextState="S9"
 } else {
 Set ..%NextState="S10"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","HIP.BP.SiteResultEvent","S9","未找到样本:" _request.SampleNo_" 对应的就诊记录")
 Set ..%NextState="S8"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="HIP.BP.SiteResultEvent">
<Description>
海南农垦总院的检验结果事件业务流程
由于数据源无法通过检验结果找到对应的检验医嘱和就诊记录，因此在调用标准检验结果事件业务流程前，需要执行如下操作：
1. 根据检验结果的时间、就诊类型和患者号查找对应的就诊记录 - 找到早于并最接近检验时间的就诊号
2. 创建一个虚拟检验医嘱，医嘱号使用样本号，医嘱名称使用检验名称
3.样本号也作为结果记录号(ResultNo)使用</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64275,43109.806142</TimeChanged>
<TimeCreated>64247,43913.867245</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='HIP.MSG.Site.reqResultEvent' response='Ens.Response' contextsuperclass='HIP.BP.Context' height='2000' width='2000' >
<sequence xend='200' yend='1350' >
<call name='Get Patient Info' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='250' >
<annotation><![CDATA[Get PNID and PNO]]]]><![CDATA[></annotation>
<request type='HIP.MSG.reqGetPNIDInfoByPNO' >
<assign property="callrequest.PatientNo" value="request.PatientNo" action="set" />
<assign property="callrequest.EpisodeType" value="request.EncounterType" action="set" />
</request>
<response type='HIP.MSG.resGetPNIDInfoByPNO' >
<assign property="context.PatientID" value="callresponse.PatientID" action="set" />
<assign property="context.PatientNID" value="callresponse.PatientNID" action="set" />
</response>
</call>
<if name='未找到该病人信息' condition='context.PatientID=""' xpos='200' ypos='350' xend='200' yend='600' >
<true>
<trace name='Trace error' value='"未找到门诊号:" _request.PatientNo_" 的对应的身份信息"' xpos='335' ypos='500' />
</true>
</if>
<call name='Get Encounter No' target='HIP.BO.SQL2HIS' async='0' xpos='200' ypos='700' >
<annotation><![CDATA[获取结果的就诊号]]]]><![CDATA[></annotation>
<request type='HIP.MSG.reqGetEncounterNoByPatientAndDate' >
<assign property="callrequest.EpisodeType" value="request.EncounterType" action="set" />
<assign property="callrequest.PatientID" value="context.PatientID" action="set" />
<assign property="callrequest.EpisodeDate" value="request.EpisodeDate" action="set" />
</request>
<response type='HIP.MSG.resGetEncounterNoByPatientAndDate' >
<assign property="context.EncounterNo" value="callresponse.EncounterNo" action="set" />
</response>
</call>
<if name='未找到就诊记录' condition='context.EncounterNo=""' xpos='200' ypos='800' xend='200' yend='1250' >
<true>
<trace name='Trace error' value='"未找到样本:" _request.SampleNo_" 对应的就诊记录"' xpos='200' ypos='950' />
</true>
<false>
<call name='Sync Encounter' target='HIP.BP.EncounterEvent' async='0' xpos='470' ypos='950' >
<annotation><![CDATA[同步就诊记录]]]]><![CDATA[></annotation>
<request type='HIP.MSG.reqEncounterEvent' >
<assign property="callrequest.EncounterID" value="context.EncounterNo" action="set" />
<assign property="callrequest.PatientNO" value="request.PatientNo" action="set" />
<assign property="callrequest.EncounterSource" value="request.EncounterType" action="set" />
<assign property="callrequest.PatientID" value="context.PatientID" action="set" />
<assign property="callrequest.PatientNID" value="context.PatientNID" action="set" />
</request>
<response type='Ens.Response' />
</call>
<code name='Generate Dummy Lab Order' xpos='470' ypos='1050' >
<annotation><![CDATA[产生虚拟检验医嘱]]]]><![CDATA[></annotation>
<![CDATA[ Set rEID=""
 if request.EncounterType="O"
 {
   Set rEID="OP"_context.EncounterNo
 }
 elseif request.EncounterType="I"
 {
  Set rEID="IP"_context.EncounterNo
 }
   Set tEncounter = ##class(CDR.Encounter).ukEncounterNoOpen(rEID)
 If ($ISOBJECT(tEncounter)) 
 {
     Set context.IsEncounterExist=1
     Set context.Encounter = tEncounter
     
     Set tLabOrder = ""
     Set tSC = ##class(CDR.Site.Code).CreateLabOrderbySampleNo(request.SampleNo,tEncounter.%Id(),.tLabOrder)
     
     Set context.LabOrder = tLabOrder
     Set context.IsLabOrderExist = 1
     Set context.OrderNo="LABS"_request.SampleNo
 }
 Else
 {
 }]]]]><![CDATA[>
</code>
<call name='Standard Result Process' target='HIP.BP.ResultEvent' async='1' xpos='470' ypos='1150' >
<request type='HIP.MSG.reqResultEvent' >
<assign property="callrequest.EncounterType" value="request.EncounterType" action="set" />
<assign property="callrequest.OrderNo" value="context.OrderNo" action="set" />
<assign property="callrequest.ResultNo" value="request.SampleNo" action="set" />
<assign property="callrequest.EncounterID" value="context.EncounterNo" action="set" />
<assign property="callrequest.PatientID" value="context.PatientID" action="set" />
<assign property="callrequest.PatientNID" value="context.PatientNID" action="set" />
<assign property="callrequest.PatientNO" value="request.PatientNo" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
</sequence>
</process>
]]></Data>
</XData>
</Class>


<Class name="HIP.BS.AppointmentEvent">
<Super>Ens.BusinessService</Super>
<TimeChanged>64281,63457.006162</TimeChanged>
<TimeCreated>64281,57759.282371</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	///SELECT A.YYXH ID,D. JZXH ,A. BRID ,SFZH ,MZHM FROM
	set req=##class(HIP.MSG.reqAppointmentEvent).%New()
	Set req.AppointmentId=pInput.Get("ID") 
	Set req.EncounterNo=pInput.Get("JZXH")
	Set req.PatientNID=pInput.Get("SFZH")
	set req.PatientID=pInput.Get("BRID")
	 ///// 调用程序 【 OPOrder / IPOrder / OPEncounter /IPEncounter/OPDiagnosis/O】
	set req.CallBy="Appointment"
	Quit ..SendRequestAsync("HIP.BP.AppointmentEvent",req,pOutput)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.EventMonitor">
<Super>Ens.BusinessService</Super>
<TimeChanged>64261,59557.303283</TimeChanged>
<TimeCreated>64125,56612.911915</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set req=##class(HIP.MSG.reqEventMonitor).%New()
	//Set req.EventID=pInput.Get("JLXH")
	//Set req.EventTS=pInput.Get("CTIME")
	Set req.RowID=pInput.Get("ID")
	Set req.TableName=pInput.Get("TableName")
	S req.SFZ=pInput.Get("SFZH")
	//1: insert; 2: delete; 3:update
	//Set req.OperationType=pInput.Get("DMLFLAG")
	
	Quit ..SendRequestAsync("HIP.BP.EventMonitor",req,pOutput)
	
	/*
	Set tSC = ##class(Ens.Director).CreateBusinessService("EnsLib.Testing.Service", .tService)  Quit:$$$ISERR(tSC)
		Set tSC = tService.ProcessInput(.input,.pResponse)  Quit:$$$ISERR(tSC)
	*/
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.HL7v3SOAPIn">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.SOAP.Service</Super>
<TimeChanged>64812,62072.198084</TimeChanged>
<TimeCreated>60277,39172.063808</TimeCreated>

<Parameter name="ADAPTER">
</Parameter>

<Parameter name="SERVICENAME">
<Description>
Name of the WebService.</Description>
<Default>HL7v3SOAPIn</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
TODO: change this to actual SOAP namespace.
SOAP Namespace for the WebService</Description>
<Default>http://tempuri.org</Default>
</Parameter>

<Parameter name="SETTINGS">
<Default>SearchTableClass::selector?context={Ens.ContextSearch/SearchTableClasses?host=EnsLib.EDI.XML.Service.Standard},Validation</Default>
</Parameter>

<Property name="SearchTableClass">
<Description><![CDATA[
Store a set of searchable properties associated with each XML Document processed.<br>
These records will be stored in the named SearchTable class, if any.]]></Description>
<Type>%String</Type>
<InitialExpression>"EnsLib.EDI.XML.SearchTable"</InitialExpression>
</Property>

<Property name="Validation">
<Description><![CDATA[
Specifies types of Validation to perform <p>
Set to 1 to reject documents that don't pass DocType schema validation.]]></Description>
<Type>%String</Type>
</Property>

<Method name="HIPMessageServer">
<Description>
TODO: add arguments and implementation.
SendMessage</Description>
<FormalSpec>pInput:%GlobalCharacterStream</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set $ZTrap = "SendMessageET"

	Set tStatus	= ..ProcessInput(pInput, .pOutput)

	Quit pOutput

SendMessageET
	Set $ZTrap = ""
	
	Quit $$$ERROR($$$GeneralError, "An error has occurred in SendMessage():  " _ $ZError)
]]></Implementation>
</Method>

<Method name="OnProcessInput">
<FormalSpec><![CDATA[pInput:%GlobalCharacterStream,&pOutput:%GlobalCharacterStream]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZTrap = "OnProcessInputET"
	
	Set tStatus = ##class(%XML.XPATH.Document).CreateFromStream(pInput, .tDocument)
	set ^MyLog(2)=tStatus
	Set tStatus = tDocument.EvaluateExpression("/*", "name()", .tResults)
	set ^MyLog(3)=tStatus
	If (tResults.Count() > 0) Set tRoot = tResults.GetAt(1).Value
	Else  Set tRoot = "<errorNoRootElement>"
	Set tStatus = pInput.Rewind()
	
	Set tRequest = ##class(HIP.MSG.HL7v3Message).%New()
	Set tRequest.Name		= tRoot
	Set tRequest.DocType	= ""
	Set tRequest.Source  	= ..#SERVICENAME
	Set tRequest.Content	= pInput
	
	Set tStatus = ..SendRequestSync("IOT.BO.PatientOperation", tRequest, .tResponse)
	Set pOutput = tResponse.Content
	//do pOutput.%Save()

	Quit $$$OK
	
OnProcessInputET
	Set $ZTrap = ""
	
	Quit $$$ERROR($$$GeneralError, "An error has occurred in OnProcessInput():  " _ $ZError)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.HL7v3SOAPInBackup">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.SOAP.Service</Super>
<TimeChanged>64839,53546.975724</TimeChanged>
<TimeCreated>60277,39172.063808</TimeCreated>

<Parameter name="ADAPTER">
</Parameter>

<Parameter name="SERVICENAME">
<Description>
Name of the WebService.</Description>
<Default>HL7v3SOAPIn</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
TODO: change this to actual SOAP namespace.
SOAP Namespace for the WebService</Description>
<Default>http://tempuri.org</Default>
</Parameter>

<Method name="HIPMessageServer">
<Description>
TODO: add arguments and implementation.
SendMessage</Description>
<FormalSpec>pInput:%GlobalCharacterStream</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set $ZTrap = "SendMessageET"

	Set tStatus	= ..ProcessInput(pInput, .pOutput)

	Quit pOutput

SendMessageET
	Set $ZTrap = ""
	
	Quit $$$ERROR($$$GeneralError, "An error has occurred in SendMessage():  " _ $ZError)
]]></Implementation>
</Method>

<Method name="OnProcsInput">
<FormalSpec><![CDATA[pInput:%String,&pOutput:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#;	Set $ZTrap = "OnProcessInputET"
#;	Set tStatus = pInput.Rewind()
#;	//set tString=pInput.Read()
#;	Set tString=""
#;	While 'pInput.AtEnd 
#;	{ 	set tString= tString_pInput.ReadLine(,.sc,.eol) 
#;		If $$$ISERR(sc) { Write "ERROR" Quit } If eol { Write ! } 
#;	}
#;	set ^MyLog(1)=tString
#;	Set tStatus = ##class(%XML.XPATH.Document).CreateFromString(tString, .tDocument)
#;	set ^MyLog(2)=tStatus
#;	Set tStatus = tDocument.EvaluateExpression("/*", "name()", .tResults)
#;	If (tResults.Count() > 0) Set tRoot = tResults.GetAt(1).Value
#;	Else  Set tRoot = "<errorNoRootElement>"
#;	Set tStatus=tDocument.EvaluateExpression("//PRPA_IN201305UV02/controlActProcess/queryByParameter/parameterList/livingSubjectId/value","@root",.tResults)
#;	If (tResults.Count() > 0) Set PatientId = tResults.GetAt(1).Value
#;	Set ^MyLog(3)=PatientId
#;	
#;	
#;	Set tRequest=##class(Ens.StringRequest).%New()
#;	Set tRequest.StringValue="大爷"
#;	//Set tRequest = ##class(HIP.MSG.HL7v3Message).%New()
#;	//Set tRequest.Name		= tRoot
#;	//Set tRequest.DocType	= ""
#;	//Set tRequest.Source  	= ..#SERVICENAME
#;	//Set tRequest.Content	= pInput
#;	
#;	Set tStatus = ..SendRequestSync("HIP.BO.IOTOperation2byString", tRequest, .tResponse)
#;	Set ^MyLog(4)=tStatus
#;	Set pOutput=##class(%GlobalCharacterStream).%New()
#;	Set tStatus=pOutput.Write(tResponse.StringValue)
#;	Quit tStatus
#;OnProcessInputET
#;	Set $ZTrap = ""
	
	Quit $$$ERROR($$$GeneralError, "An error has occurred in OnProcessInput():  " _ $ZError)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.IOTService">
<Description>
信息交换接口</Description>
<Super>EnsLib.SOAP.Service</Super>
<TimeChanged>64574,50598.664658</TimeChanged>
<TimeCreated>64463,58547.882635</TimeCreated>

<Parameter name="ADAPTER">
</Parameter>

<Parameter name="SERVICENAME">
<Description>
Name of the WebService</Description>
<Default>IOT</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
SOAP namespace for the WebService</Description>
<Default>http://tempuri.org</Default>
</Parameter>

<Method name="HIPMessageServer">
<FormalSpec>action:%String,message:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	 set request=##class(Ens.StringRequest).%New()
	 set request.StringValue=message
	set sc= ..SendRequestSync("HIP.BO.WriteCDADocument",request,.response)
	q:'sc "Bad2"
	s sc = response.OutputToIOStream(.stream)   
	q:'sc "Bad3"
	quit " "
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Method PatientInfoQuery(pInput As %GlobalCharacterStream) As %String [ WebMethod ]

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// {

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    //create Ensemble request message with given ID

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    s request=##class(EnsLib.EDI.XML.Document).%New()

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    s sc = request.ImportFromLibraryStream(pInput)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    q:'sc "Bad"

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    //send Ensemble request message 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    set sc= ..SendRequestSync("个人基本信息查询",request,.response)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    q:'sc "Bad2"

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 	s sc = response.OutputToIOStream(.stream)   

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    q:'sc "Bad3"

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    q stream

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// }

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Method OrderReceiver(pInput As %GlobalCharacterStream) As %String [ WebMethod ]

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// {

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    //create Ensemble request message with given ID

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    s request=##class(EnsLib.EDI.XML.Document).%New()

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    s sc = request.ImportFromLibraryStream(pInput)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    q:'sc "Bad"

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    //send Ensemble request message 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    set sc= ..SendRequestSync("医嘱接收服务流程",request,.response)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    q:'sc "Bad2"

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 	s sc = response.OutputToIOStream(.stream)   

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    q:'sc "Bad3"

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    q stream

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// }

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/// 个人基本信息查询服务
/// // 医嘱接收服务

]]></Content>
</UDLText>
</Class>


<Class name="HIP.BS.IPDiagnosisEvent">
<Description>
监控住院诊断记录</Description>
<Super>Ens.BusinessService</Super>
<TimeChanged>64244,48117.557558</TimeChanged>
<TimeCreated>64238,56876.747129</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
///SELECT  JLBH ID, JZHM,SFZH,BRBH ZYHM 
	set req=##class(HIP.MSG.reqDiagnosisEvent).%New()
	Set req.DiagnosisNo=pInput.Get("ID")
	Set req.EncounterSource="I"
	Set req.EncounterID=pInput.Get("JZHM")	
	Set req.PatientID=pInput.Get("JZHM")  //就诊号码=病人ID
	Set req.PatientNID=pInput.Get("SFZH")
	Set req.PatientNO=pInput.Get("ZYHM")	
	set req.CallBy="IPDiagnosis"
	Quit ..SendRequestAsync("HIP.BP.DiagnosisEvent",req,pOutput)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.IPDocumentEvent">
<Super>Ens.BusinessService</Super>
<TimeChanged>64281,62917.002055</TimeChanged>
<TimeCreated>64281,57821.783391</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	///SELECT A.BLBH ID,JZHM,ZYH,BRBH,SFZH  FROM 
	set req=##class(HIP.MSG.reqDocumentEvent).%New()
	Set req.DocumentNo=pInput.Get("ID") 
	Set req.EncounterSource="I"
	Set req.EncounterID=pInput.Get("JZHM")
	Set req.PatientNID=pInput.Get("SFZH")
	set req.PatientID=pInput.Get("BRBH")
	 ///// 调用程序 【 OPOrder / IPOrder / OPEncounter /IPEncounter/OPDiagnosis/O】
	set req.CallBy="IPDocument"
	Quit ..SendRequestAsync("HIP.BP.DocumentEvent",req,pOutput)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.IPEncounterEvent">
<Description>
监控住院就诊记录</Description>
<Super>Ens.BusinessService</Super>
<TimeChanged>64245,57019.450522</TimeChanged>
<TimeCreated>64236,48434.525301</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	//SELECT a.JZHM ID,BRBH,SFZH FROM BSOFT00.YS_ZY_JZJL a,BSOFT00.ZY_BRRY b where a.JZHM>? and a.JZHM<224000 and a.JZHM=b.ZYH AND (length(b.sfzh)=15 or length(b.sfzh)=18)
	set req=##class(HIP.MSG.reqEncounterEvent).%New()
	Set req.EncounterID=pInput.Get("ID")
	Set req.EncounterSource="I"
	Set req.PatientID=pInput.Get("ZYH") // BRBH
	Set req.PatientNID=pInput.Get("SFZH")
	set req.PatientNO=pInput.Get("ZYHM")
	 set req.CallBy="IPEncounter"
	///// 调用程序 【 OPOrder / IPOrder / OPEncounter /IPEncounter/OPDiagnosis/O】
	 set req.CallBy="IPEncounter"
	
	Quit ..SendRequestAsync("HIP.BP.EncounterEvent",req,pOutput)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.IPLabOrderEvent">
<Description>
监控住院医技处方记录</Description>
<Super>Ens.BusinessService</Super>
<TimeChanged>64251,60809.26546</TimeChanged>
<TimeCreated>64245,56536.339121</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	//SELECT JLXH ID,a.ZYH,SFZH,ZYHM  SELECT  a.SBXH ID,b.ZYH,d.SFZH,d.ZYHM FROM 
	set req=##class(HIP.MSG.reqLabOrderEvent).%New()
	Set req.LabOrderID=pInput.Get("ID")
	Set req.EncounterSource="I"
	Set req.EncounterID=pInput.Get("ZYH")
	Set req.PatientID=pInput.Get("ZYH")
	Set req.PatientNID=pInput.Get("SFZH")
	Set req.PatientNO=pInput.Get("ZYHM")
	///// 调用程序 【 OPOrder / IPOrder / OPEncounter /IPEncounter/ OPDiagnosis / OPDiagnosis 】
	 set req.CallBy="IPLabOrder"
	Quit ..SendRequestAsync("HIP.BP.LabOrderEvent",req,pOutput)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.IPOrderEvent">
<Description>
监控住院药品处方记录</Description>
<Super>Ens.BusinessService</Super>
<TimeChanged>64251,60825.032834</TimeChanged>
<TimeCreated>64240,43225.317869</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
     
   //  SELECT JLXH ID, a.ZYH,b.SFZH,b.ZYHM
	set req=##class(HIP.MSG.reqOrderEvent).%New()
	Set req.OrderID=pInput.Get("ID")
	Set req.EncounterSource="I"
	Set req.EncounterID=pInput.Get("ZYH")
	Set req.PatientID=pInput.Get("ZYH")
	Set req.PatientNID=pInput.Get("SFZH")
	Set req.PatientNO=pInput.Get("ZYHM")
	///// 调用程序 【 OPOrder / IPOrder / OPEncounter /IPEncounter/ OPDiagnosis / OPDiagnosis 】
	 set req.CallBy="IPOrder"
	Quit ..SendRequestAsync("HIP.BP.OrderEvent",req,pOutput)
	//Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.IPPatientUpdateEvent">
<Super>Ens.BusinessService</Super>
<TimeChanged>64263,41869.709367</TimeChanged>
<TimeCreated>64262,51576.520087</TimeCreated>

<Method name="OnProcessInput">
<FormalSpec>pInput:HIP.MSG.reqUpdatePatientEvent,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//set res=##class(HIP.MSG.reSUpdatePatientEvent).%New() 
 set req=##class(HIP.MSG.reqUpdatePatientEvent).%New() 
 set req.PID=pInput.PID
 set req.PNID=pInput.PNID
   
 ///pInput As %RegisteredObject, Output pOutput As %RegisteredObject
  
	Quit ..SendRequestAsync("HIP.BP.EditPatientEvent",req,pOutput)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.OPDiagnosisEvent">
<Description>
监控门诊诊断记录</Description>
<Super>Ens.BusinessService</Super>
<TimeChanged>64244,40572.326682</TimeChanged>
<TimeCreated>64238,55528.625898</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  ///JLBH ID, JZXH, BRBH
	set req=##class(HIP.MSG.reqDiagnosisEvent).%New()
	Set req.DiagnosisNo=pInput.Get("ID")
	Set req.EncounterSource="O"
	Set req.EncounterID=pInput.Get("JZXH")
	Set req.PatientID=pInput.Get("BRBH")
	Set req.PatientNID=pInput.Get("SFZH")
	Set req.PatientNO=pInput.Get("MZHM")
	///// 调用程序 【 OPOrder / IPOrder / OPEncounter /IPEncounter/ OPDiagnosis / OPDiagnosis 】
	 set req.CallBy="OPDiagnosis"
	
	Quit ..SendRequestAsync("HIP.BP.DiagnosisEvent",req,pOutput)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.OPDocumentEvent">
<Super>Ens.BusinessService</Super>
<TimeChanged>64281,62194.961601</TimeChanged>
<TimeCreated>64281,57807.092463</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	///SELECT A.BLBH ID,JZXH ,A.BRID,B.SFZH,B.MZHM  FROM 
	set req=##class(HIP.MSG.reqDocumentEvent).%New()
	Set req.DocumentNo=pInput.Get("ID") 
	Set req.EncounterSource="O"
	Set req.EncounterID=pInput.Get("JZXH")
	Set req.PatientNID=pInput.Get("SFZH")
	set req.PatientID=pInput.Get("MZHM")
	 ///// 调用程序 【 OPOrder / IPOrder / OPEncounter /IPEncounter/OPDiagnosis/O】
	set req.CallBy="OPDocument"
	Quit ..SendRequestAsync("HIP.BP.DocumentEvent",req,pOutput)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.OPEncounterEvent">
<Description>
监控门诊就诊记录</Description>
<Super>Ens.BusinessService</Super>
<TimeChanged>64223,43612.186049</TimeChanged>
<TimeCreated>64236,45592.377066</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set req=##class(HIP.MSG.reqEncounterEvent).%New()
	Set req.EncounterID=pInput.Get("ID") // JZXH
	Set req.EncounterSource="O"
	Set req.PatientID=pInput.Get("BRBH")
	Set req.PatientNID=pInput.Get("SFZH")
	set req.PatientNO=pInput.Get("MZHM")
	 ///// 调用程序 【 OPOrder / IPOrder / OPEncounter /IPEncounter/OPDiagnosis/O】
	 set req.CallBy="OPEncounter"
	Quit ..SendRequestAsync("HIP.BP.EncounterEvent",req,pOutput)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.OPLabOrderEvent">
<Description>
监控门诊医技处方记录</Description>
<Super>Ens.BusinessService</Super>
<TimeChanged>64251,60949.804435</TimeChanged>
<TimeCreated>64245,56427.95971</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	/// SELECT  a.SBXH ID,JZXH,d.BRID,d.SFZH,d.MZHM,b.KDRQ FROM
	
	/// SELECT  a.SBXH ID,YLXH,d.BRID,d.SFZH,d.MZHM
	set req=##class(HIP.MSG.reqLabOrderEvent).%New()
	Set req.LabOrderID=pInput.Get("ID")
	Set req.EncounterSource="O"
	Set req.EncounterID=pInput.Get("JZXH")
	Set req.PatientID=pInput.Get("BRID")
	Set req.PatientNID=pInput.Get("SFZH")
	Set req.PatientNO=pInput.Get("MZHM")
	///// 调用程序 【 OPOrder / IPOrder / OPEncounter /IPEncounter/ OPDiagnosis / OPDiagnosis 】
	 set req.CallBy="OPLabOrder"
	Quit ..SendRequestAsync("HIP.BP.LabOrderEvent",req,pOutput)
	//Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.OPOrderEvent">
<Description>
监控门诊药品处方记录</Description>
<Super>Ens.BusinessService</Super>
<TimeChanged>64251,60969.85608</TimeChanged>
<TimeCreated>64240,41623.4725</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  ///SELECT  a.SBXH ID,b. JZXH, d. SFZH,b. BRID,d. MZHM
	set req=##class(HIP.MSG.reqOrderEvent).%New()
	Set req.OrderID=pInput.Get("ID")
	Set req.EncounterSource="O"
	Set req.EncounterID=pInput.Get("JZXH")
	Set req.PatientID=pInput.Get("BRID")
	Set req.PatientNID=pInput.Get("SFZH")
	Set req.PatientNO=pInput.Get("MZHM")
	///// 调用程序 【 OPOrder / IPOrder / OPEncounter /IPEncounter/ OPDiagnosis / OPDiagnosis 】
	 set req.CallBy="OPOrder"
	Quit ..SendRequestAsync("HIP.BP.OrderEvent",req,pOutput)
	//Quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.ObservationEvent">
<Description>
监控生命体征记录</Description>
<Super>Ens.BusinessService</Super>
<TimeChanged>64251,60923.264382</TimeChanged>
<TimeCreated>64245,44338.311213</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  //SELECT  a.CJH ID,a.ZYH ZJXH,c.SFZH,c.ZYHM  FROM 
  set req=##class(HIP.MSG.reqObservationEvent).%New()
	Set req.ObservationID=pInput.Get("ID")
	Set req.EncounterSource="I"
	Set req.EncounterID=pInput.Get("ZJXH")	
	Set req.PatientID=pInput.Get("ZJXH")  //就诊号码=病人ID
	Set req.PatientNID=pInput.Get("SFZH")
	Set req.PatientNo=pInput.Get("ZYHM")	
	set req.CallBy="IPObservation"
	Quit ..SendRequestAsync("HIP.BP.ObservationEvent",req,pOutput)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.ProcedureEvent">
<Description>
监控手术记录</Description>
<Super>Ens.BusinessService</Super>
<TimeChanged>64251,61006.302258</TimeChanged>
<TimeCreated>64245,47685.592658</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	//  SELECT SSBH ID, a. ZYH,b.SFZH,B.ZYHM 
	set req=##class(HIP.MSG.reqProcedureEvent).%New()
	Set req.ProcedureID=pInput.Get("ID")
	Set req.EncounterSource="I"
	Set req.EncounterID=pInput.Get("ZYH")	
	Set req.PatientID=pInput.Get("ZYH")  //就诊号码=病人ID
	Set req.PatientNID=pInput.Get("SFZH")
	Set req.PatientNo=pInput.Get("ZYHM")	
	set req.CallBy="Procedure"
	Quit ..SendRequestAsync("HIP.BP.ProcedureEvent",req,pOutput)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.BS.tempBS4WriteCDA">
<Super>EnsLib.SOAP.Service</Super>
<TimeChanged>64573,79184.219964</TimeChanged>
<TimeCreated>64511,38410.312506</TimeCreated>

<Parameter name="ADAPTER">
</Parameter>

<Parameter name="SERVICENAME">
<Description>
Name of the WebService</Description>
<Default>MyWebService</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://tempuri.org</Default>
</Parameter>

<Method name="WriteCDA">
<FormalSpec>DocumentType:%Integer(REQUIRED=1),EncounterId:%String,ConfidentialLevel:%String,RelatedDocument:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//create Ensemble request message with given ID
    	set request=##class(HIP.MSG.reqWriteCDADocument).%New()
    	set request.DocumentType=DocumentType
    	set request.EncounterNo=EncounterId
    	set request.ConfidentialLevel=ConfidentialLevel
    	//set request.RelatedDocumentID=RelatedDocument
    	

    	set sc= ..SendRequestSync("HIP.BO.WriteCDADocument",request,.response)
    
    	quit sc
]]></Implementation>
</Method>
</Class>


<Class name="HIP.DT.Appointment2HL7">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64281,56825.603587</TimeChanged>
<TimeCreated>64281,45884.240005</TimeCreated>
<DependsOn>CDR.Appointment,EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Appointment' targetClass='EnsLib.HL7.Message' targetDocType='2.5:SIU_S12' create='new' language='objectscript' >
<assign value='"2.5"' property='target.{MSH:VersionID.VersionID}' action='set' />
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{MSH:SendingFacility.NamespaceID}' action='set' />
<assign value='"SIU"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='"S12"' property='target.{MSH:MessageType.TriggerEvent}' action='set' />
<subtransform class='HIP.DT.Patient2HL7Segment' targetObj='target.{PIDgrp(1).PID}' sourceObj='source.Patient' />
<assign value='source.Reason' property='target.{SCH:AppointmentReason.Text}' action='set' />
<assign value='source.PlacerApptId' property='target.{SCH:PlacerAppointmentID.EntityIdentifier}' action='set' />
<assign value='source.FillerApptId' property='target.{SCH:FillerAppointmentID.EntityIdentifier}' action='set' />
<assign value='source.Comment' property='target.{NTE(1):Comment()}' action='set' />
<assign value='1' property='target.{NTE(1):SetIDNTE}' action='set' />
<if condition='$IsObject(source.Encounter)' >
<true>
<subtransform class='HIP.DT.Encounter2HL7Segment' targetObj='target.{PIDgrp(1).PV1}' sourceObj='source.Encounter' />
</true>
</if>
<assign value='source.CareProvider' property='target.{RGSgrp(1).AIPgrp(1).AIP:PersonnelResourceID(1).GivenName}' action='set' />
<assign value='source.Location' property='target.{RGSgrp(1).AILgrp(1).AIL:LocationResourceID(1).LocationDescription}' action='set' />
<assign value='source.EnteredBy' property='target.{SCH:EnteredByPerson().GivenName}' action='set' />
<assign value='##class(CDR.Tools.Tools).TS2HL7STR(source.TimeStart)' property='target.{SCH:AppointmentTimingQuantity(1).StartDateTime}' action='set' />
<assign value='##class(CDR.Tools.Tools).TS2HL7STR(source.TimeEnd)' property='target.{SCH:AppointmentTimingQuantity(1).EndDateTime}' action='set' />
<assign value='source.Duration' property='target.{SCH:AppointmentDuration}' action='set' />
<assign value='source.Type' property='target.{SCH:AppointmentType}' action='set' />
<assign value='##class(CDR.Tools.Tools).TS2HL7STR(source.TimeStart)' property='target.{RGSgrp(1).AIPgrp(1).AIP:StartDateTime.Time}' action='set' />
<assign value='##class(CDR.Tools.Tools).TS2HL7STR(source.TimeStart)' property='target.{RGSgrp(1).AILgrp(1).AIL:StartDateTime.Time}' action='set' />
<assign value='1' property='target.{RGSgrp().RGS:SetIDRGS}' action='set' />
<assign value='source.ActionCode' property='target.{RGSgrp(1).RGS:SegmentActionCode}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Diagnosis2HL7">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64265,41650.71073</TimeChanged>
<TimeCreated>64126,80606.609476</TimeCreated>
<DependsOn>CDR.Diagnosis,EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Diagnosis' targetClass='EnsLib.HL7.Message' targetDocType='2.5:ADT_A01' create='new' language='objectscript' >
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{MSH:SendingFacility.NamespaceID}' action='set' />
<assign value='"ADT"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='"A01"' property='target.{MSH:MessageType.TriggerEvent}' action='set' />
<assign value='$ZD($H,8)_$REPLACE($ZTIME($P($H,",",2),2),":","")' property='target.{EVN:RecordedDateTime.Time}' action='set' />
<assign value='"A08"' property='target.{EVN:EventTypeCode}' action='set' />

<subtransform class='HIP.DT.Patient2HL7Segment' targetObj='target.{PID}' sourceObj='source.Encounter.Patient' />
<subtransform class='HIP.DT.Encounter2HL7Segment' targetObj='target.{PV1}' sourceObj='source.Encounter' />
<subtransform class='HIP.DT.Diagnosis2HL7Segment' targetObj='target.{DG1(1)}' sourceObj='source' />
<!--
<assign value="source.DiagnosisDesc" property="target.{DG1():DiagnosisDescription}" key="&quot;1&quot;" action="set" />
<assign value="source.DiagnosisCode" property="target.{DG1():DiagnosisCodeDG1.Identifier}" key="&quot;1&quot;" action="set" />
<assign value="source.DiagnosisDesc" property="target.{DG1():DiagnosisCodeDG1.Text}" key="&quot;1&quot;" action="set" />
<assign value="source.DiagnosisType" property="target.{DG1():DiagnosisType}" key="&quot;1&quot;" action="set" />
<assign value="##class(CDR.Tools.RuleFunction).TS2STR(source.OnsetTime)" property="target.{DG1():DiagnosisDateTime.Time}" key="&quot;1&quot;" action="set" />
<assign value="source.DiagnosingClinician" property="target.{DG1():DiagnosingClinician(1).GivenName}" key="&quot;1&quot;" action="set" />
-->
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Diagnosis2HL7Segment">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64127,60391.216474</TimeChanged>
<TimeCreated>64127,60228.454624</TimeCreated>
<DependsOn>CDR.Diagnosis,EnsLib.HL7.Segment</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Diagnosis' targetClass='EnsLib.HL7.Segment' targetDocType='2.5:DG1' create='new' language='objectscript' >
<assign value="source.DiagnosisDesc" property="target.{DiagnosisDescription}" action="set" />
<assign value="source.DiagnosisCode" property="target.{DiagnosisCodeDG1.Identifier}" action="set" />
<assign value="source.DiagnosisDesc" property="target.{DiagnosisCodeDG1.Text}" action="set" />
<assign value="source.DiagnosisType" property="target.{DiagnosisType}" action="set" />
<assign value="##class(CDR.Tools.RuleFunction).TS2STR(source.OnsetTime)" property="target.{DiagnosisDateTime.Time}" action="set" />
<assign value="source.DiagnosingClinician" property="target.{DiagnosingClinician(1).GivenName}" action="set" />
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Document2HL7">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64282,49177.761654</TimeChanged>
<TimeCreated>64265,36116.080499</TimeCreated>
<DependsOn>CDR.Document,EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Document' targetClass='EnsLib.HL7.Message' targetDocType='2.5:MDM_T02' create='new' language='objectscript' >
<assign value='"2.5"' property='target.{MSH:VersionID.VersionID}' action='set' />
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{MSH:SendingFacility.NamespaceID}' action='set' />
<assign value='"MDM"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='"T02"' property='target.{MSH:MessageType.TriggerEvent}' action='set' />
<subtransform class='HIP.DT.Patient2HL7Segment' targetObj='target.{PID}' sourceObj='source.Encounter.Patient' />
<subtransform class='HIP.DT.Encounter2HL7Segment' targetObj='target.{PV1}' sourceObj='source.Encounter' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.DocumentTime)' property='target.{TXA:ActivityDateTime.Time}' action='set' />
<assign value='source.DocumentType' property='target.{TXA:DocumentType}' action='set' />
<assign value='source.Clinician' property='target.{TXA:PrimaryActivityProviderCodeN(1).IDNumber}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.TranscriptionTime)' property='target.{TXA:TranscriptionDateTime.Time}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.AuthorizationTime)' property='target.{TXA:AuthenticationPersonTimeStam(1).DateTimeActionPerformed.Time}' action='set' />
<assign value='source.DocumentName' property='target.{TXA:UniqueDocumentFileName}' action='set' />
<assign value='source.DocumentNumber' property='target.{TXA:UniqueDocumentNumber.EntityIdentifier}' action='set' />
<assign value='source.Status' property='target.{TXA:DocumentAvailabilityStatus}' action='set' />
<assign value='source.DocumentCompletionStatus' property='target.{TXA:DocumentCompletionStatus}' action='set' />
<assign value='source.ActionCode' property='target.{TXA:SetIDTXA}' action='set' />
<assign value='source.EnteredBy' property='target.{TXA:OriginatorCodeName(1).IDNumber}' action='set' />
<assign value='1' property='OBXindex' action='set' />
<if condition='..Not(source.NoteText="")' >
<true>
<assign value='##class(CDR.Tools.Tools).ReturnChar2HL7(source.NoteText)' property='target.{OBXgrp(OBXindex).OBX:ObservationValue(1)}' action='set' />
<assign value='"FT"' property='target.{OBXgrp(OBXindex).OBX:ValueType}' action='set' />
<assign value='OBXindex+1' property='OBXindex' action='set' />
</true>
</if>
<if condition='..Not(source.DocumentURL="")' >
<true>
<assign value='source.DocumentURL' property='target.{OBXgrp(OBXindex).OBX:ObservationValue(1)}' action='set' />
<assign value='"RP"' property='target.{OBXgrp(OBXindex).OBX:ValueType}' action='set' />
<assign value='OBXindex+1' property='OBXindex' action='set' />
</true>
</if>
<if condition='source.Stream.%Id() &apos;=""' >
<true>
<assign value='"ED"' property='target.{OBXgrp(OBXindex).OBX:ValueType}' action='set' />
<assign value='"^^HTML^Base64^"_##class(CDR.Tools.Tools).Base64RemoveReturnChar(source.Stream.Read())' property='target.{OBXgrp(OBXindex).OBX:ObservationValue}' action='set' />
<assign value='OBXindex+1' property='OBXindex' action='set' />
</true>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Encounter2HL7">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64282,46873.099964</TimeChanged>
<TimeCreated>64125,58848.458501</TimeCreated>
<DependsOn>CDR.Encounter,EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Encounter' targetClass='EnsLib.HL7.Message' targetDocType='2.5:ADT_A01' create='new' language='objectscript' >
<assign value='"2.5"' property='target.{MSH:VersionID.VersionID}' action='set' />
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{MSH:SendingFacility.NamespaceID}' action='set' />
<assign value='"ADT"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='"A01"' property='target.{MSH:MessageType.TriggerEvent}' action='set' />
<assign value='$ZD($H,8)_$REPLACE($ZTIME($P($H,",",2),2),":","")' property='target.{EVN:RecordedDateTime.Time}' action='set' />
<assign value='"A01"' property='target.{EVN:EventTypeCode}' action='set' />

<subtransform class='HIP.DT.Patient2HL7Segment' targetObj='target.{PID}' sourceObj='source.Patient' />
<subtransform class='HIP.DT.Encounter2HL7Segment' targetObj='target.{PV1}' sourceObj='source' />
<foreach property='source.Diagnoses()' key='k1' >
<subtransform class='HIP.DT.Diagnosis2HL7Segment' targetObj='target.{DG1(k1)}' sourceObj='source.Diagnoses.(k1)' />
</foreach>
<foreach property='source.Procedures()' key='k2' >
<subtransform class='HIP.DT.Procedure2HL7Segment' targetObj='target.{PR1grp(K2).PR1}' sourceObj='source.Procedures.(k2)' />
</foreach>
<foreach property='source.Observations()' key='k3' >
<if condition='$IsObject(source.Observations.(k3).Result)' >
<false>
<subtransform class='HIP.DT.Observation2HL7Segment' targetObj='target.{OBX(k3)}' sourceObj='source.Observations.(k3)' />
</false>
</if>
</foreach>
<foreach property='source.Patient.Allergies()' key='k4' >
<subtransform class='HIP.DT.Allergy2HL7Segment' targetObj='target.{OBX(k4)}' sourceObj='source.Allergies.(k3)' />
</foreach>

</transform>
]]></Data>
</XData>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>
</Class>


<Class name="HIP.DT.Encounter2HL7BAK">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64126,83826.467808</TimeChanged>
<TimeCreated>64125,58848.458501</TimeCreated>
<DependsOn>CDR.Encounter,EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Encounter' targetClass='EnsLib.HL7.Message' targetDocType='2.5:ADT_A01' create='new' language='objectscript' >
<assign value='"2.5"' property='target.{MSH:VersionID.VersionID}' action='set' />
<assign value='"CGH"' property='target.{MSH:SendingFacility.NamespaceID}' action='set' />
<assign value='"ADT"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='"A01"' property='target.{MSH:MessageType.TriggerEvent}' action='set' />
<assign value='$ZD($H,8)_$REPLACE($ZTIME($P($H,",",2),2),":","")' property='target.{EVN:RecordedDateTime.Time}' action='set' />
<assign value='"A01"' property='target.{EVN:EventTypeCode}' action='set' />
<assign value='"NKZY"' property='target.{PID:PatientIdentifierList().AssigningAuthority.NamespaceID}' action='set' key='"1"' />
<assign value='source.Patient.MPIID' property='target.{PID:PatientID}' action='set' />
<assign value='source.Patient.LastName' property='target.{PID:PatientName().FamilyName}' action='set' key='"1"' />
<assign value='..Lookup("GenderFromHIS2HIP",source.Patient.Gender)' property='target.{PID:AdministrativeSex}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).DT2STR(source.Patient.BirthTime)' property='target.{PID:DateTimeofBirth}' action='set' />
<assign value='source.Patient.MPIID' property='target.{PID:PatientIdentifierList().IDNumber}' action='set' key='"1"' />
<assign value='source.Patient.MaritalStatus' property='target.{PID:MaritalStatus.Identifier}' action='set' />
<assign value='source.Patient.Addresses' property='target.{PID:PatientAddress()}' action='set' key='"1"' />
<assign value='source.Patient.Religion' property='target.{PID:Religion.Identifier}' action='set' />
<assign value='source.Patient.PrimaryLanguage' property='target.{PID:PrimaryLanguage.Identifier}' action='set' />
<assign value='source.Patient.IDNo' property='target.{PID:SSNNumberPatient}' action='set' />
<assign value='"MR"' property='target.{PID:PatientIdentifierList().IdentifierTypeCode}' action='set' key='"1"' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.AdmissionTime)' property='target.{PV1:AdmitDateTime.Time}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.DischargeTime)' property='target.{PV1:DischargeDateTime(1).Time}' action='set' />
<assign value='source.EncounterNumber' property='target.{PV1:VisitNumber.IDNumber}' action='set' />
<assign value='source.AdmissionType' property='target.{PV1:PatientClass}' action='set' />
<assign value='source.AdmissionType' property='target.{PV1:AdmissionType}' action='set' />
<assign value='source.AdmittingClinician' property='target.{PV1:AttendingDoctor().FamilyName}' action='set' key='"1"' />
<assign value='source.AdmissionLocation' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='$CASE(source.Patient.IsDeceased,"1":"Y",:"N")' property='target.{PID:PatientDeathIndicator}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.Patient.DeceasedDateTime)' property='target.{PID:PatientDeathDateandTime}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Encounter2HL7Segment">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64280,56965.725197</TimeChanged>
<TimeCreated>64126,78191.336717</TimeCreated>
<DependsOn>CDR.Encounter,EnsLib.HL7.Segment</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Encounter' targetClass='EnsLib.HL7.Segment' targetDocType='2.5:PV1' create='new' language='objectscript' >
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.AdmissionTime)' property='target.{AdmitDateTime.Time}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.DischargeTime)' property='target.{DischargeDateTime(1).Time}' action='set' />
<assign value='source.EncounterNumber' property='target.{VisitNumber.IDNumber}' action='set' />
<assign value='source.AdmissionType' property='target.{AdmissionType}' action='set' />
<assign value='source.Class' property='target.{PatientClass}' action='set' />
<assign value='source.AdmissionLocation' property='target.{AssignedPatientLocation}' action='set' />
<assign value='source.AdmissionLocation' property='target.{HospitalService}' action='set' />
<assign value='source.AttendingClinicians' property='target.{AttendingDoctor().FamilyName}' action='set' />
<assign value='source.ConsultingClinicians' property='target.{ConsultingDoctor().FamilyName}' action='set' />
<assign value='source.ReferringClinician' property='target.{ReferringDoctor().FamilyName}' action='set' />
<assign value='source.AdmittingClinician' property='target.{AdmittingDoctor().FamilyName}' action='set' />
<assign value='source.IsReadmission' property='target.{ReadmissionIndicator}' action='set' />
<assign value='source.DischargeDisposition' property='target.{DischargeDisposition}' action='set' />
<assign value='source.DischargeLocation' property='target.{DischargedtoLocation}' action='set' />
<assign value='source.AdmissionSource' property='target.{AdmitSource}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.LabOrder2HL7">
<Description>
已经失效</Description>
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64265,49012.614434</TimeChanged>
<TimeCreated>64126,78088.365147</TimeCreated>
<DependsOn>CDR.LabOrder,EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.LabOrder' targetClass='EnsLib.HL7.Message' targetDocType='2.5:ORM_O01' create='new' language='objectscript' >
<assign value='"2.5"' property='target.{MSH:VersionID.VersionID}' action='set' />
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{MSH:SendingFacility.NamespaceID}' action='set' />
<assign value='"ORM"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='"O01"' property='target.{MSH:MessageType.TriggerEvent}' action='set' />

<subtransform class='HIP.DT.Patient2HL7Segment' targetObj='target.{PIDgrp.PID}' sourceObj='source.Encounter.Patient' />
<subtransform class='HIP.DT.Encounter2HL7Segment' targetObj='target.{PIDgrp.PV1grp.PV1}' sourceObj='source.Encounter' />
<subtransform class='HIP.DT.Order2HL7SegmentORC' targetObj='target.{ORCgrp(1).ORC}' sourceObj='source' />
<subtransform class='HIP.DT.Order2HL7SegmentOBR' targetObj='target.{ORCgrp(1).OBRuniongrp.OBRunion.OBR}' sourceObj='source' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.LabOrder2HL7SegmentOBR">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64126,83583.998811</TimeChanged>
<TimeCreated>64126,83508.867198</TimeCreated>
<DependsOn>CDR.LabOrder,EnsLib.HL7.Segment</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.LabOrder' targetClass='EnsLib.HL7.Segment' targetDocType='2.5:OBR' create='new' language='objectscript' >
<assign value='source.OrderedBy' property='target.{OrderingProvider(1)}' action='set' />
<assign value='source.PlacerId' property='target.{PlacerOrderNumber}' action='set' />
<assign value='"L"' property='target.{UniversalServiceIdentifier.NameofCodingSystem}' action='set' />
<assign value='source.Specimen' property='target.{SpecimenSource.SpecimenSourceNameorCode}' action='set' />
<assign value='source.OrderItemCode' property='target.{UniversalServiceIdentifier.Identifier}' action='set' />
<assign value='source.OrderItemDesc' property='target.{UniversalServiceIdentifier.Text}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.LabOrder2HL7SegmentORC">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64265,48278.221567</TimeChanged>
<TimeCreated>64126,83190.23191</TimeCreated>
<DependsOn>CDR.LabOrder,EnsLib.HL7.Segment</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.LabOrder' targetClass='EnsLib.HL7.Segment' targetDocType='2.5:ORC' create='new' language='objectscript' >
<assign value='source.OrderedBy' property='target.{OrderingProvider(1).FamilyName}' action='set' />
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{PlacerOrderNumber.NamespaceID}' action='set' />
<assign value='source.PlacerId' property='target.{PlacerOrderNumber.EntityIdentifier}' action='set' />
<assign value='source.FillerId' property='target.{FillerOrderNumber.EntityIdentifier}' action='set' />
<assign value='"LAB"' property='target.{OrderType.Identifier}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.StartDateTime)' property='target.{QuantityTiming(1).StartDateTime}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.StartDateTime)' property='target.{DateTimeofTransaction}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.EndDateTime)' property='target.{QuantityTiming(1).EndDateTime}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Medication2HL7">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64265,48804.615681</TimeChanged>
<TimeCreated>64126,81289.278049</TimeCreated>
<DependsOn>CDR.Medication,EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Medication' targetClass='EnsLib.HL7.Message' targetDocType='2.5:OMP_O09' create='new' language='objectscript' >
<assign value='"2.5"' property='target.{MSH:VersionID.VersionID}' action='set' />
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{MSH:SendingFacility.NamespaceID}' action='set' />
<assign value='"OMP"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='"O09"' property='target.{MSH:MessageType.TriggerEvent}' action='set' />
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{ORCgrp(1).ORC:PlacerOrderNumber.NamespaceID}' action='set' />
<assign value='source.PlacerId' property='target.{ORCgrp(1).ORC:PlacerOrderNumber.EntityIdentifier}' action='set' />
<assign value='source.FillerId' property='target.{ORCgrp(1).ORC:FillerOrderNumber.EntityIdentifier}' action='set' />
<assign value='"MED"' property='target.{ORCgrp(1).ORC:OrderType.Identifier}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.StartDateTime)' property='target.{ORCgrp(1).ORC:QuantityTiming(1).StartDateTime}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.StartDateTime)' property='target.{ORCgrp(1).ORC:DateTimeofTransaction}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.StartDateTime)' property='target.{ORCgrp(1).ORC:QuantityTiming(1).EndDateTime}' action='set' />
<assign value='source.OrderItemCode' property='target.{ORCgrp(1).RXO:RequestedGiveCode.Identifier}' action='set' />
<assign value='source.OrderItemDesc' property='target.{ORCgrp(1).RXO:RequestedGiveCode.Text}' action='set' />
<subtransform class='HIP.DT.Encounter2HL7Segment' targetObj='target.{PIDgrp.PV1grp.PV1}' sourceObj='source.Encounter' />
<subtransform class='HIP.DT.Patient2HL7Segment' targetObj='target.{PIDgrp.PID}' sourceObj='source.Encounter.Patient' />
<assign value='source.DosageForm' property='target.{ORCgrp(1).RXO:RequestedDosageForm}' action='set' />
<assign value='source.DoseUoM' property='target.{ORCgrp(1).RXO:RequestedGiveUnits}' action='set' />
<assign value='source.DoseUoM' property='target.{ORCgrp(1).RXO:RequestedGiveStrengthUnits}' action='set' />
<assign value='source.Frequency' property='target.{ORCgrp(1).TQ1grp(1).TQ1:RepeatPattern(1).RepeatPatternCode}' action='set' />
<assign value='$P(source.Frequency,"/")' property='target.{ORCgrp(1).TQ1grp(1).TQ1:RepeatPattern(1).PeriodQuantity}' action='set' />
<assign value='source.Duration' property='target.{ORCgrp(1).TQ1grp(1).TQ1:ServiceDuration}' action='set' />
<assign value='source.Condition' property='target.{ORCgrp(1).TQ1grp(1).TQ1:Conditiontext}' action='set' />
<assign value='source.TextInstruction' property='target.{ORCgrp(1).TQ1grp(1).TQ1:Textinstruction}' action='set' />
<assign value='source.MaxDoseQuantity' property='target.{ORCgrp(1).RXO:RequestedGiveAmountMaximum}' action='set' />
<assign value='source.NumberOfRefills' property='target.{ORCgrp(1).RXO:NumberOfRefills}' action='set' />
<assign value='source.OrderedBy' property='target.{ORCgrp(1).RXO:OrderingProvidersDEANumber(1).FamilyName}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.StartDateTime)' property='target.{ORCgrp(1).TQ1grp(1).TQ1:Startdatetime}' action='set' />
<assign value='source.OrderQuantity' property='target.{ORCgrp(1).TQ1grp(1).TQ1:Quantity}' action='set' />
<assign value='source.DoseQuantity' property='target.{ORCgrp(1).RXO:RequestedGiveAmountMinimum}' action='set' />
<assign value='source.Priority' property='target.{ORCgrp(1).TQ1grp(1).TQ1:Priority(1)}' action='set' />
<assign value='source.Status' property='target.{ORCgrp(1).ORC:OrderStatus}' action='set' />
<assign value='source.Route' property='target.{ORCgrp(1).RXO:ProvidersAdministrationInstr(1)}' action='set' />
<assign value='source.RateTimeUnit' property='target.{ORCgrp(1).RXO:RequestedGivePerTimeUnit}' action='set' />
<assign value='source.StrengthVolumeUnits' property='target.{ORCgrp(1).RXO:RequestedDrugStrengthVolumeU}' action='set' />
<assign value='source.StrengthVolume' property='target.{ORCgrp(1).RXO:RequestedDrugStrengthVolume}' action='set' />
<assign value='source.RateAmount' property='target.{ORCgrp(1).RXO:RequestedGiveRateAmount}' action='set' />
<assign value='source.RateUnits' property='target.{ORCgrp(1).RXO:RequestedGiveRateUnits}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Observation2HL7">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64265,41728.844957</TimeChanged>
<TimeCreated>64126,82085.635185</TimeCreated>
<DependsOn>CDR.Observation,EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Observation' targetClass='EnsLib.HL7.Message' targetDocType='2.5:ADT_A01' create='new' language='objectscript' >
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{MSH:SendingFacility.NamespaceID}' action='set' />
<assign value='"ADT"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='"A01"' property='target.{MSH:MessageType.TriggerEvent}' action='set' />
<assign value='$ZD($H,8)_$REPLACE($ZTIME($P($H,",",2),2),":","")' property='target.{EVN:RecordedDateTime.Time}' action='set' />
<assign value='"A08"' property='target.{EVN:EventTypeCode}' action='set' />

<subtransform class='HIP.DT.Patient2HL7Segment' targetObj='target.{PID}' sourceObj='source.Encounter.Patient' />
<subtransform class='HIP.DT.Encounter2HL7Segment' targetObj='target.{PV1}' sourceObj='source.Encounter' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.ObservationTime)' property='target.{EVN:RecordedDateTime.Time}' action='set' />
<subtransform class='HIP.DT.Observation2HL7Segment' targetObj='target.{OBX(1)}' sourceObj='source' />

<!--
<assign value='"NM"' property='target.{OBX(1):ValueType}' action='set' />
<assign value='source.ObservationCode' property='target.{OBX(1):ObservationIdentifier.Identifier}' action='set' />
<assign value='source.ObservationDesc' property='target.{OBX(1):ObservationIdentifier.Text}' action='set' />
<assign value='source.Value' property='target.{OBX(1):ObservationValue(1)}' action='set' />
<assign value='source.Clinician' property='target.{OBX(1):ProducersID}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.ObservationTime)' property='target.{OBX(1):DateTimeoftheObservation}' action='set' />
<assign value='source.ValueUnits' property='target.{OBX(1):Units}' action='set' />
-->
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Observation2HL7Segment">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64127,61387.135365</TimeChanged>
<TimeCreated>64127,61251.715373</TimeCreated>
<DependsOn>CDR.Observation,EnsLib.HL7.Segment</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Observation' targetClass='EnsLib.HL7.Segment' targetDocType='2.5:OBX' create='new' language='objectscript' >
<assign value='source.ResultType' property='target.{ValueType}' action='set' />
<assign value='source.ObservationCode' property='target.{ObservationIdentifier.Identifier}' action='set' />
<assign value='source.ObservationDesc' property='target.{ObservationIdentifier.Text}' action='set' />
<assign value='source.Value' property='target.{ObservationValue(1)}' action='set' />
<assign value='source.Clinician' property='target.{ProducersID}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.ObservationTime)' property='target.{DateTimeoftheObservation}' action='set' />
<assign value='source.ValueUnits' property='target.{Units}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Order2HL7">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64265,48976.559108</TimeChanged>
<TimeCreated>64126,78088.365147</TimeCreated>
<DependsOn>CDR.LabOrder,EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.LabOrder' targetClass='EnsLib.HL7.Message' targetDocType='2.5:ORM_O01' create='new' language='objectscript' >
<assign value='"2.5"' property='target.{MSH:VersionID.VersionID}' action='set' />
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{MSH:SendingFacility.NamespaceID}' action='set' />
<assign value='"ORM"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='"O01"' property='target.{MSH:MessageType.TriggerEvent}' action='set' />

<subtransform class='HIP.DT.Patient2HL7Segment' targetObj='target.{PIDgrp.PID}' sourceObj='source.Encounter.Patient' />
<subtransform class='HIP.DT.Encounter2HL7Segment' targetObj='target.{PIDgrp.PV1grp.PV1}' sourceObj='source.Encounter' />
<subtransform class='HIP.DT.Order2HL7SegmentORC' targetObj='target.{ORCgrp(1).ORC}' sourceObj='source' />
<subtransform class='HIP.DT.Order2HL7SegmentOBR' targetObj='target.{ORCgrp(1).OBRuniongrp.OBRunion.OBR}' sourceObj='source' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Order2HL7SegmentOBR">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64259,53985.030912</TimeChanged>
<TimeCreated>64126,83508.867198</TimeCreated>
<DependsOn>CDR.LabOrder,EnsLib.HL7.Segment</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Order' targetClass='EnsLib.HL7.Segment' targetDocType='2.5:OBR' create='new' language='objectscript' >
<assign value='source.OrderedBy' property='target.{OrderingProvider(1)}' action='set' />
<assign value='source.PlacerId' property='target.{PlacerOrderNumber}' action='set' />
<assign value='"L"' property='target.{UniversalServiceIdentifier.NameofCodingSystem}' action='set' />
<assign value='source.Specimen' property='target.{SpecimenSource.SpecimenSourceNameorCode}' action='set' />
<assign value='source.OrderItemCode' property='target.{UniversalServiceIdentifier.Identifier}' action='set' />
<assign value='source.OrderItemDesc' property='target.{UniversalServiceIdentifier.Text}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Order2HL7SegmentORC">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64265,48389.040178</TimeChanged>
<TimeCreated>64126,83190.23191</TimeCreated>
<DependsOn>CDR.LabOrder,EnsLib.HL7.Segment</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Order' targetClass='EnsLib.HL7.Segment' targetDocType='2.5:ORC' create='new' language='objectscript' >
<assign value='source.OrderedBy' property='target.{OrderingProvider(1).FamilyName}' action='set' />
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{PlacerOrderNumber.NamespaceID}' action='set' />
<assign value='source.PlacerId' property='target.{PlacerOrderNumber.EntityIdentifier}' action='set' />
<assign value='source.FillerId' property='target.{FillerOrderNumber.EntityIdentifier}' action='set' />
<assign value='source.#ORDERITEMTYPE' property='target.{OrderType.Identifier}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.StartDateTime)' property='target.{QuantityTiming(1).StartDateTime}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.StartDateTime)' property='target.{DateTimeofTransaction}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.EndDateTime)' property='target.{QuantityTiming(1).EndDateTime}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Patient2HL7Segment">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64265,48677.253783</TimeChanged>
<TimeCreated>64126,79536.339761</TimeCreated>
<DependsOn>CDR.Patient,EnsLib.HL7.Segment</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Patient' targetClass='EnsLib.HL7.Segment' targetDocType='2.5:PID' create='new' language='objectscript' >
<assign value='source.FirstName' property='target.{PatientName(1).GivenName}' action='set' />
<assign value='source.LastName' property='target.{PatientName(1).FamilyName.Surname}' action='set' />
<assign value='source.MiddleName' property='target.{PatientName(1).FamilyName.OwnSurname}' action='set' />
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{PatientIdentifierList(1).AssigningAuthority.NamespaceID}' action='set'  />
<assign value='source.MPIID' property='target.{PatientID}' action='set' />
<assign value='source.LastName' property='target.{PatientName(1).FamilyName}' action='set'  />
<assign value='..Lookup("GenderFromHIS2HIP",source.Gender)' property='target.{AdministrativeSex}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).DT2STR(source.BirthTime)' property='target.{DateTimeofBirth}' action='set' />
<assign value='source.MPIID' property='target.{PatientIdentifierList(1).IDNumber}' action='set'  />
<assign value='source.MaritalStatus' property='target.{MaritalStatus.Identifier}' action='set' />
<assign value='source.Addresses' property='target.{PatientAddress()}' action='set' key='"1"' />
<assign value='source.Religion' property='target.{Religion.Identifier}' action='set' />
<assign value='source.PrimaryLanguage' property='target.{PrimaryLanguage.Identifier}' action='set' />
<assign value='source.IDNo' property='target.{SSNNumberPatient}' action='set' />
<assign value='"MR"' property='target.{PatientIdentifierList(1).IdentifierTypeCode}' action='set' />
<assign value='$CASE(source.IsDeceased,"1":"Y",:"N")' property='target.{PatientDeathIndicator}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.DeceasedDateTime)' property='target.{PatientDeathDateandTime}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Procedure2HL7">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64265,41748.402518</TimeChanged>
<TimeCreated>64126,81516.091271</TimeCreated>
<DependsOn>CDR.Procedure,EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Procedure' targetClass='EnsLib.HL7.Message' targetDocType='2.5:BAR_P12' create='new' language='objectscript' >
<assign value='"2.5"' property='target.{MSH:VersionID.VersionID}' action='set' />
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{MSH:SendingFacility.NamespaceID}' action='set' />
<assign value='"BAR"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='"P12"' property='target.{MSH:MessageType.TriggerEvent}' action='set' />
<assign value='$ZD($H,8)_$REPLACE($ZTIME($P($H,",",2),2),":","")' property='target.{EVN:RecordedDateTime.Time}' action='set' />
<assign value='"P12"' property='target.{EVN:EventTypeCode}' action='set' />

<subtransform class='HIP.DT.Patient2HL7Segment' targetObj='target.{PID}' sourceObj='source.Encounter.Patient' />
<subtransform class='HIP.DT.Encounter2HL7Segment' targetObj='target.{PV1}' sourceObj='source.Encounter' />
<subtransform class='HIP.DT.Procedure2HL7Segment' targetObj='target.{PR1grp(1).PR1}' sourceObj='source' />
<!--
<assign value='source.ProcedureCode' property='target.{PR1grp(1).PR1:ProcedureCode.Identifier}' action='set' />
<assign value='source.ProcedureDesc' property='target.{PR1grp(1).PR1:ProcedureCode.Text}' action='set' />
<assign value='source.ProcedureDesc' property='target.{PR1grp(1).PR1:ProcedureDescription}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.ProcedureTime)' property='target.{PR1grp(1).PR1:ProcedureDateTime}' action='set' />
<assign value='source.Performer' property='target.{PR1grp(1).PR1:Surgeon(1).FamilyName}' action='set' />
<assign value='source.Anesthesia' property='target.{PR1grp(1).PR1:AnesthesiaCode}' action='set' />
<assign value='source.Anesthesiologist' property='target.{PR1grp(1).PR1:Anesthesiologist(1)}' action='set' />
-->

</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Procedure2HL7Segment">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64127,60770.933343</TimeChanged>
<TimeCreated>64127,60696.634453</TimeCreated>
<DependsOn>CDR.Procedure,EnsLib.HL7.Segment</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Procedure' targetClass='EnsLib.HL7.Segment' targetDocType='2.5:PR1' create='new' language='objectscript' >
<assign value='source.ProcedureCode' property='target.{ProcedureCode.Identifier}' action='set' />
<assign value='source.ProcedureDesc' property='target.{ProcedureCode.Text}' action='set' />
<assign value='source.ProcedureDesc' property='target.{ProcedureDescription}' action='set' />
<assign value='##class(CDR.Tools.RuleFunction).TS2STR(source.ProcedureTime)' property='target.{ProcedureDateTime}' action='set' />
<assign value='source.Performer' property='target.{Surgeon(1).FamilyName}' action='set' />
<assign value='source.Anesthesia' property='target.{AnesthesiaCode}' action='set' />
<assign value='source.Anesthesiologist' property='target.{Anesthesiologist(1)}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.Result2HL7">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64282,45531.975976</TimeChanged>
<TimeCreated>64126,82466.963496</TimeCreated>
<DependsOn>CDR.Result,EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='CDR.Result' targetClass='EnsLib.HL7.Message' targetDocType='2.5:ORU_R01' create='new' language='objectscript' >
<assign value='"2.5"' property='target.{MSH:VersionID.VersionID}' action='set' />
<assign value='##class(HIP.Setting).GetHomeFacility()' property='target.{MSH:SendingFacility.NamespaceID}' action='set' />
<assign value='"ORU"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='"R01"' property='target.{MSH:MessageType.TriggerEvent}' action='set' />
<subtransform class='HIP.DT.Encounter2HL7Segment' targetObj='target.{PIDgrpgrp(1).PIDgrp.PV1grp.PV1}' sourceObj='source.COrder.Encounter' />
<subtransform class='HIP.DT.Patient2HL7Segment' targetObj='target.{PIDgrpgrp(1).PIDgrp.PID}' sourceObj='source.COrder.Encounter.Patient' />
<subtransform class='HIP.DT.Order2HL7SegmentORC' targetObj='target.{PIDgrpgrp(1).ORCgrp(1).ORC}' sourceObj='source.COrder' />
<subtransform class='HIP.DT.Order2HL7SegmentOBR' targetObj='target.{PIDgrpgrp(1).ORCgrp(1).OBR}' sourceObj='source.COrder' />
<if condition='source.COrder.#ORDERITEMTYPE="LAB"' >
<true>
<foreach property='source.ResultItems()' key='k' >
<assign value='source.ResultItems.(k).ResultType' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(k).OBX:ValueType}' action='set' />
<assign value='source.ResultItems.(k).PerformedAt' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(k).OBX:ProducersID}' action='set' />
<assign value='source.ResultItems.(k).ResultInterpretation' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(k).OBX:AbnormalFlags(1)}' action='set' />
<assign value='source.ResultItems.(k).ReferenceRange.Low_"-"_source.ResultItems.(k).ReferenceRange.High' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(k).OBX:ReferencesRange}' action='set' />
<assign value='source.ResultItems.(k).Value' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(k).OBX:ObservationValue(1)}' action='set' />
<assign value='source.ResultItems.(k).ValueUnits' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(k).OBX:Units}' action='set' />
<assign value='source.ResultItems.(k).SubId' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(k).OBX:ObservationSubID}' action='set' />
<assign value='source.ResultItems.(k).ObservationCode' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(k).OBX:ObservationIdentifier.Identifier}' action='set' />
<assign value='source.ResultItems.(k).ObservationDesc' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(k).OBX:ObservationIdentifier.Text}' action='set' />
<assign value='source.ResultItems.(k).Status' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(k).OBX:ObservationResultStatus}' action='set' />
<assign value='##class(CDR.Tools.Tools).TS2HL7STR(source.ResultItems.(k).ObservationTime)' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(k).OBX:DateTimeoftheObservation}' action='set' />
</foreach>
</true>
</if>
<if condition='source.COrder.#ORDERITEMTYPE="RAD"' >
<true>
<assign value='source.ResultType' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ValueType}' action='set' />
<assign value='source.ResultText' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier.Text}' action='set' />
<assign value='source.ResultStatus' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ObservationResultStatus}' action='set' />
</true>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.DT.XMLDocument2PatientID">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64574,82234.374278</TimeChanged>
<TimeCreated>64574,75208.403583</TimeCreated>
<DependsOn>EnsLib.EDI.XML.Document,HIP.MSG.reqGetPatient</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.EDI.XML.Document' targetClass='HIP.MSG.reqGetPatient' sourceDocType='PRPA_IN201305UV02:PRPA_IN201305UV02' create='new' language='objectscript' >
<assign value='source.{controlActProcess.queryByParameter.parameterList.livingSubjectId().semanticsText}' property='target.PID' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="HIP.Integration">
<Super>Ens.Production</Super>
<TimeChanged>64950,37883.754199</TimeChanged>
<TimeCreated>64125,37555.778095</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="HIP.Integration" TestingEnabled="true" LogGeneralTraceEvents="false">
  <Description></Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Item Name="HIP.BO.SQL2HIS" Category="" ClassName="HIP.BO.SQL2HIS" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="ArchiveIO">1</Setting>
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
  </Item>
  <Item Name="HIP.BP.EncounterEvent" Category="" ClassName="HIP.BP.EncounterEvent" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BP.EventMonitor" Category="" ClassName="HIP.BP.EventMonitor" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BS.EventMonitor" Category="" ClassName="HIP.BS.EventMonitor" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Query"><![CDATA[SELECT JZXH ID,'Encounter' TableName,SFZH
FROM BSOFT.YS_MZ_JZLS a,BSOFT.MS_BRDA b where jzxh<7000 and b.brid=a.BRBH and (length(b.sfzh)=15 or length(b.sfzh)=18)]]]]><![CDATA[></Setting>
    <Setting Target="Adapter" Name="DeleteQuery"></Setting>
    <Setting Target="Adapter" Name="KeyFieldName">ID</Setting>
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
  </Item>
  <Item Name="Inpatient" Category="" ClassName="HIP.BO.SQL2HIS" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BP.RegistEvent" Category="" ClassName="HIP.BP.RegistEvent" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BS.OPEncounterEvent" Category="" ClassName="HIP.BS.OPEncounterEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Query"><![CDATA[SELECT  JZXH ID,JZZT,SFZH,BRBH,MZHM
FROM BSOFT.YS_MZ_JZLS a,BSOFT.MS_BRDA b 
where  sfzh='460100193110231817' and JZXH>0 
and b.brid=a.BRBH and (length(b.sfzh)=15 or length(b.sfzh)=18)]]]]><![CDATA[></Setting>
    <Setting Target="Adapter" Name="Parameters"><![CDATA[&%LastKey]]]]><![CDATA[></Setting>
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
    <Setting Target="Adapter" Name="KeyFieldName">ID</Setting>
  </Item>
  <Item Name="HIP.BS.IPEncounterEvent" Category="" ClassName="HIP.BS.IPEncounterEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
    <Setting Target="Adapter" Name="KeyFieldName">ID</Setting>
    <Setting Target="Adapter" Name="Query"><![CDATA[SELECT ZYH ID,ZYH,SFZH,ZYHM
FROM  BSOFT.ZY_BRRY  where  sfzh='460100193110231817' and ZYH>0 and  (length(sfzh)=15 or length(sfzh)=18)]]]]><![CDATA[></Setting>
    <Setting Target="Adapter" Name="Parameters"><![CDATA[&%LastKey]]]]><![CDATA[></Setting>
  </Item>
  <Item Name="HIP.BP.DiagnosisEvent" Category="" ClassName="HIP.BP.DiagnosisEvent" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BS.OPDiagnosisEvent" Category="" ClassName="HIP.BS.OPDiagnosisEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
    <Setting Target="Adapter" Name="Query"><![CDATA[SELECT JLBH ID, JZXH,BRBH,SFZH,MZHM
FROM BSOFT.YS_MZ_JBZD a,BSOFT.MS_BRDA b  WHERE sfzh='460100193110231817' and a.brbh=b.brid 
and  JLBH>0 AND ZFPB=0 and(length(b.sfzh)=15 or length(b.sfzh)=18)]]]]><![CDATA[></Setting>
    <Setting Target="Adapter" Name="KeyFieldName">ID</Setting>
  </Item>
  <Item Name="HIP.BS.IPDiagnosisEvent" Category="" ClassName="HIP.BS.IPDiagnosisEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
    <Setting Target="Adapter" Name="Query"><![CDATA[SELECT  
JLBH ID, JZHM,SFZH,BRBH ZYHM 
FROM BSOFT.YS_ZY_JBZD a, BSOFT.ZY_BRRY b  WHERE SFZH='460100193110231817' and a.jzhm=b.zyh and cast(JLBH  as int)>101 and cast(JLBH  as int)>0 and ZFBZ=0 and(length(b.sfzh)=15 or length(b.sfzh)=18)]]]]><![CDATA[></Setting>
  </Item>
  <Item Name="HIP.BS.OPOrderEvent" Category="" ClassName="HIP.BS.OPOrderEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
    <Setting Target="Adapter" Name="Query"><![CDATA[SELECT  a.SBXH ID,b.JZXH, d.SFZH,b.BRID,d.MZHM  FROM BSOFT.MS_CF02 a,BSOFT.MS_CF01 b,BSOFT.MS_BRDA d where sfzh='460100193110231817' and   a.cfsb=b.cfsb and b.CFBZ=1 and a.XMLX =1 and  b.brid=d.brid and (length(d.sfzh)=15 or length(d.sfzh)=18) and jzxh is not null
and a.sbxh<2567086]]]]><![CDATA[></Setting>
  </Item>
  <Item Name="HIP.BS.IPOrderEvent" Category="" ClassName="HIP.BS.IPOrderEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
    <Setting Target="Adapter" Name="Query"><![CDATA[SELECT JLXH ID, a.ZYH,b.SFZH,b.ZYHM
FROM BSOFT.ZY_BQYZ a,BSOFT.ZY_BRRY b where  b.sfzh='460100193110231817' and  a.jlxh>0  and a.zyh=b.zyh and  a.XMLX =1 and (length(b.sfzh)=15 or length(b.sfzh)=18)]]]]><![CDATA[></Setting>
  </Item>
  <Item Name="HIP.BP.OrderEvent" Category="" ClassName="HIP.BP.OrderEvent" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BP.ObservationEvent" Category="" ClassName="HIP.BP.ObservationEvent" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BS.ObservationEvent" Category="" ClassName="HIP.BS.ObservationEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
    <Setting Target="Adapter" Name="Query"><![CDATA[SELECT  a.CJH ID,a.ZYH ZJXH,c.SFZH,c.ZYHM,a.JLSJ FROM BSOFT.BQ_SMTZ a,BSOFT.BQ_TZXM b,BSOFT.ZY_BRRY c where c.sfzh='460100193110231817' and a.cjh>0    and  a.xmh=b.xmh and a.ZFBZ=0 and a.zyh=c.zyh and (length(c.sfzh)=15 or length(c.sfzh)=18)]]]]><![CDATA[></Setting>
  </Item>
  <Item Name="HIP.BS.ProcedureEvent" Category="" ClassName="HIP.BS.ProcedureEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Query"><![CDATA[SELECT SSBH ID, a.ZYH,b.SFZH,B.ZYHM 
FROM BSOFT.SM_SSJL a,BSOFT.ZY_BRRY b  where sfzh='460100193110231817' and ssbh>0 and a.zyh=b.zyh and (length(b.sfzh)=15 or length(b.sfzh)=18)]]]]><![CDATA[></Setting>
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
  </Item>
  <Item Name="HIP.BP.ProcedureEvent" Category="" ClassName="HIP.BP.ProcedureEvent" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BS.OPLabOrderEvent" Category="" ClassName="HIP.BS.OPLabOrderEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Query"><![CDATA[SELECT  a.SBXH ID,JZXH,b.BRID,d.SFZH,d.MZHM
 FROM BSOFT.MS_YJ02 a,BSOFT.MS_YJ01 b,BSOFT.MS_BRDA d where sfzh='460100193110231817' and    a.yjxh=b.yjxh and b.brid=d.brid and (length(d.sfzh)=15 or length(d.sfzh)=18) AND JZXH is not null  
and a.SBXH>0]]]]><![CDATA[></Setting>
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
  </Item>
  <Item Name="HIP.BS.IPLabOrderEvent" Category="" ClassName="HIP.BS.IPLabOrderEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Query"><![CDATA[SELECT  a.SBXH ID,b.ZYH,d.SFZH,d.ZYHM 
FROM BSOFT.YJ_ZY02 a,BSOFT.YJ_ZY01 b,BSOFT.ZY_BRRY d
where d.sfzh='460100193110231817' and a.sbxh>0  and a.yjxh=b.yjxh and d.zyh=b.zyh and (length(d.sfzh)=15 or length(d.sfzh)=18)]]]]><![CDATA[></Setting>
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
  </Item>
  <Item Name="HIP.BP.LabOrderEvent" Category="" ClassName="HIP.BP.LabOrderEvent" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BP.ResultEvent" Category="" ClassName="HIP.BP.ResultEvent" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="TCPHL7OUT" Category="" ClassName="EnsLib.HL7.Operation.TCPOperation" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="IPAddress">192.168.2.192</Setting>
    <Setting Target="Adapter" Name="Port">56789</Setting>
  </Item>
  <Item Name="HIP.BS.IPPatientUpdateEvent" Category="" ClassName="HIP.BS.IPPatientUpdateEvent" PoolSize="0" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BP.EditPatientEvent" Category="" ClassName="HIP.BP.EditPatientEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BP.SiteResultEvent" Category="" ClassName="HIP.BP.SiteResultEvent" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BO.SQL2LABLIS" Category="" ClassName="HIP.BO.SQL2LABLIS" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Credentials">LISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">zhlis</Setting>
  </Item>
  <Item Name="HIP.BP.DocumentEvent" Category="" ClassName="HIP.BP.DocumentEvent" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BP.AppointmentEvent" Category="" ClassName="HIP.BP.AppointmentEvent" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HIP.BS.AppointmentEvent" Category="" ClassName="HIP.BS.AppointmentEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Query">SELECT A.YYXH ID,D.JZXH ,A.BRID ,SFZH ,MZHM FROM BSOFT.MS_YYGH A,BSOFT.MS_BRDA B,BSOFT.YS_MZ_JZLS D  where a.brid=b.brid AND A.SBXH=D.GHXH  AND (LENGTH(SFZH)=15 OR LENGTH(SFZH)=18) AND SFZH='460001198104091049'</Setting>
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
  </Item>
  <Item Name="HIP.BS.IPDocumentEvent" Category="" ClassName="HIP.BS.IPDocumentEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Query">SELECT A.BLBH ID,JZHM,ZYH,BRBH,SFZH  FROM PORTAL_EMR.EMR_BL_BL01 A,BSOFT.ZY_BRRY B WHERE  A.JZHM=B.ZYH AND (BLZT=0 or BLZT=1) AND (LENGTH(B.SFZH)=15 OR LENGTH(B.SFZH)=18) AND  SFZH='460100193110231817'</Setting>
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
  </Item>
  <Item Name="HIP.BS.OPDocumentEvent" Category="" ClassName="HIP.BS.OPDocumentEvent" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="Query">SELECT A.BLBH ID,JZXH ,A.BRID,B.SFZH,B.MZHM  FROM BSOFT.OMR_BL01 A, BSOFT.MS_BRDA B  WHERE A.BRID=B.BRID AND (BLZT=0 or BLZT=1) AND (LENGTH(B.SFZH)=15 OR LENGTH(B.SFZH)=18) AND B.SFZH='460100193110231817'</Setting>
    <Setting Target="Adapter" Name="Credentials">HISAccount</Setting>
    <Setting Target="Adapter" Name="DSN">HISofCACHE</Setting>
  </Item>
  <Item Name="EnsLib.EDI.XML.Service.FileService" Category="IOT" ClassName="EnsLib.EDI.XML.Service.FileService" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="TargetConfigNames">IOT.BP.HL7v3Process</Setting>
    <Setting Target="Adapter" Name="ArchivePath">C:\InterSystems\Practice\inarchive\</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\InterSystems\Practice\IOTin\</Setting>
    <Setting Target="Host" Name="ArchiveIO">1</Setting>
    <Setting Target="Host" Name="DocSchemaCategory">PRPA_IN201305UV02</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
  </Item>
  <Item Name="EnsLib.EDI.XML.Operation.FileOperation" Category="" ClassName="EnsLib.EDI.XML.Operation.FileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="EnsLib.HL7.Service.TCPService" Category="" ClassName="EnsLib.HL7.Service.TCPService" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="IOT.BS.HL7v3FileIn" Category="IOT" ClassName="IOT.BS.HL7v3FileIn" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="ArchivePath">c:\InterSystems\Practice\inarchive</Setting>
    <Setting Target="Adapter" Name="FilePath">c:\InterSystems\Practice\IOTin3</Setting>
    <Setting Target="Host" Name="ArchiveIO">1</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
  </Item>
  <Item Name="IOT.BS.HL7v3SOAPIn" Category="IOT,demo" ClassName="IOT.BS.HL7v3SOAPIn" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="ArchiveIO">1</Setting>
  </Item>
  <Item Name="医护操作" Category="IOT,demo" ClassName="IOT.BO.ProviderOperation" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="IOT.Rule.HL7v3Router_Router" Category="IOT,demo" ClassName="EnsLib.HL7.MsgRouter.RoutingEngine" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="Validation"></Setting>
    <Setting Target="Host" Name="BusinessRuleName">IOT.Rule.HL7v3Router</Setting>
  </Item>
  <Item Name="IOT.BO.CreateIOTDoc" Category="IOT" ClassName="IOT.BO.CreateIOTDoc" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">D:\working</Setting>
    <Setting Target="Adapter" Name="Overwrite">0</Setting>
  </Item>
  <Item Name="IOT.BS.CreateIOTDoc" Category="IOT" ClassName="IOT.BS.CreateIOTDoc" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="IOT.BP.AppointAndWriteDoc" Category="IOT,demo" ClassName="IOT.BP.AppointAndWriteDoc" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="IOT.BS.SimpleAppoint" Category="IOT" ClassName="IOT.BS.SimpleAppoint" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="IOT.BS.HIMSS.Demo" Category="IOT" ClassName="IOT.BS.HIMSS.Demo" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HL7v3消息处理" Category="IOT" ClassName="IOT.BP.HL7v3" PoolSize="1" Enabled="true" Foreground="true" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="ReplyCodeActions">E#6301=R,E*ErrGeneral=R,E=F</Setting>
  </Item>
  <Item Name="IOT.BP.Encounter2WSDoc" Category="IOT" ClassName="IOT.BP.Encounter2WSDoc" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="WS.Util.XSL" Category="IOT" ClassName="WS.Util.XSL" PoolSize="1" Enabled="true" Foreground="true" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="HIP.BO.SQL2LIS" Category="" ClassName="HIP.BO.SQL2LIS" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="Practice.BO.SQL2HS201612Samples" Category="" ClassName="Practice.BO.SQL2HS201612Samples" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="DSN">Ens2017 Samples</Setting>
  </Item>
  <Item Name="医护操作" Category="" ClassName="HIP.BO.WriteCDA" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="jhjhj" Category="" ClassName="EnsLib.HL7.Service.SOAPService" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="MessageSchemaCategory"></Setting>
    <Setting Target="Host" Name="TargetConfigNames"></Setting>
    <Setting Target="Adapter" Name="Port">1980</Setting>
  </Item>
  <Item Name="EnsLib.SOAP.GenericService" Category="" ClassName="EnsLib.SOAP.GenericService" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="IOT.BS.TestWebService" Category="" ClassName="IOT.BS.TestWebService" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="HIP.MSG.IOT.reqCreateCDADocument">
<Super>Ens.Request</Super>
<TimeChanged>64670,40862.867371</TimeChanged>
<TimeCreated>64245,54873.46157</TimeCreated>

<Property name="DocumentType">
<Description>
文档类型</Description>
<Type>%Integer</Type>
</Property>

<Property name="EncounterNo">
<Description>
就诊号</Description>
<Type>%String</Type>
</Property>

<Property name="OrderId">
<Description>
Order号</Description>
<Type>%String</Type>
</Property>

<Property name="PatientNo">
<Description>
患者号/MRN</Description>
<Type>%String</Type>
</Property>

<Property name="ConfidentialLevel">
<Description>
保密级别</Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",正常访问保密级别 ,严格访问保密级别 ,非常严格访问保密级别"/>
<Parameter name="VALUELIST" value=",N,R,V"/>
</Property>

<Property name="RelatedDocumentID">
<Description>
相关文档ID</Description>
<Type>%String</Type>
</Property>

<Property name="Author">
<Description>
作者</Description>
<Type>CDR.Practitioner</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqCreateCDADocumentDefaultData</DefaultData>
<Data name="reqCreateCDADocumentDefaultData">
<Structure>listnode</Structure>
<Subscript>"reqCreateCDADocument"</Subscript>
<Value name="1">
<Value>DocumentType</Value>
</Value>
<Value name="2">
<Value>EncounterNo</Value>
</Value>
<Value name="3">
<Value>OrderId</Value>
</Value>
<Value name="4">
<Value>PatientNo</Value>
</Value>
<Value name="5">
<Value>ConfidentialLevel</Value>
</Value>
<Value name="6">
<Value>RelatedDocumentID</Value>
</Value>
<Value name="7">
<Value>Author</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.IOT.reqWriteCDADocument">
<Super>Ens.Request</Super>
<TimeChanged>64670,37504.665408</TimeChanged>
<TimeCreated>64245,54873.46157</TimeCreated>

<Property name="DocumentID">
<Description>
文档编号</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqWriteCDADocumentDefaultData</DefaultData>
<Data name="reqWriteCDADocumentDefaultData">
<Structure>listnode</Structure>
<Subscript>"reqWriteCDADocument"</Subscript>
<Value name="1">
<Value>DocumentID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.Site.reqResultEvent">
<Super>Ens.Request</Super>
<TimeChanged>64281,74181.383372</TimeChanged>
<TimeCreated>64247,41603.3849</TimeCreated>

<Property name="PatientNo">
<Description>
患者号</Description>
<Type>%String</Type>
</Property>

<Property name="EpisodeDate">
<Description>
检验结果时间  [ InitialExpression = {$ZDH("2016-02-02",3)} ]</Description>
<Type>%Date</Type>
</Property>

<Property name="EncounterType">
<Description>
inpatient or outpatient</Description>
<Type>%String</Type>
</Property>

<Property name="SampleNo">
<Description>
样本号，用来唯一确认Result</Description>
<Type>%String</Type>
</Property>

<Property name="ResultName">
<Description>
检验名称</Description>
<Type>%String</Type>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqResultEventDefaultData</DefaultData>
<Data name="reqResultEventDefaultData">
<Subscript>"reqResultEvent"</Subscript>
<Value name="1">
<Value>PatientNo</Value>
</Value>
<Value name="2">
<Value>EpisodeDate</Value>
</Value>
<Value name="3">
<Value>EpisodeType</Value>
</Value>
<Value name="4">
<Value>CreationTime</Value>
</Value>
<Value name="5">
<Value>CallBy</Value>
</Value>
<Value name="6">
<Value>SampleNo</Value>
</Value>
<Value name="7">
<Value>ResultName</Value>
</Value>
<Value name="8">
<Value>EncounterType</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqAppointmentEvent">
<Super>Ens.Request</Super>
<TimeChanged>64281,53838.58037</TimeChanged>
<TimeCreated>64281,50486.025637</TimeCreated>

<Property name="AppointmentId">
<Type>%String</Type>
</Property>

<Property name="EncounterNo">
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Description>
身份证号</Description>
<Type>%String</Type>
</Property>

<Property name="PatientID">
<Description>
BRID</Description>
<Type>%String</Type>
</Property>

<Property name="CallBy">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqAppointmentEventDefaultData</DefaultData>
<Data name="reqAppointmentEventDefaultData">
<Subscript>"reqAppointmentEvent"</Subscript>
<Value name="1">
<Value>AppointmentId</Value>
</Value>
<Value name="2">
<Value>EncounterNo</Value>
</Value>
<Value name="3">
<Value>PatientNo</Value>
</Value>
<Value name="4">
<Value>PatientNID</Value>
</Value>
<Value name="5">
<Value>PatientID</Value>
</Value>
<Value name="6">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqDiaReportEvent">
<Super>Ens.Request</Super>
<TimeChanged>64247,45428.309891</TimeChanged>
<TimeCreated>64247,45022.780539</TimeCreated>

<Property name="DiaReportID">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqDiaReportEventDefaultData</DefaultData>
<Data name="reqDiaReportEventDefaultData">
<Subscript>"reqDiaReportEvent"</Subscript>
<Value name="1">
<Value>DiaReportID</Value>
</Value>
<Value name="2">
<Value>EncounterSource</Value>
</Value>
<Value name="3">
<Value>CreationTime</Value>
</Value>
<Value name="4">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqDiagnosisEvent">
<Super>Ens.Request</Super>
<TimeChanged>64266,58140.639603</TimeChanged>
<TimeCreated>64236,63435.288572</TimeCreated>

<Property name="DiagnosisNo">
<Description>
诊断号</Description>
<Type>%String</Type>
</Property>

<Property name="EncounterID">
<Type>%String</Type>
</Property>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
</Property>

<Property name="PatientNO">
<Description>
本次就诊患者号(门诊或住院号)</Description>
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqDiagnosisEventDefaultData</DefaultData>
<Data name="reqDiagnosisEventDefaultData">
<Subscript>"reqDiagnosisEvent"</Subscript>
<Value name="1">
<Value>DiagnosisNo</Value>
</Value>
<Value name="2">
<Value>EncounterNo</Value>
</Value>
<Value name="3">
<Value>PatientNo</Value>
</Value>
<Value name="4">
<Value>PatientNID</Value>
</Value>
<Value name="5">
<Value>EncounterID</Value>
</Value>
<Value name="6">
<Value>EncounterSource</Value>
</Value>
<Value name="7">
<Value>PatientID</Value>
</Value>
<Value name="8">
<Value>PatientNO</Value>
</Value>
<Value name="9">
<Value>CreationTime</Value>
</Value>
<Value name="10">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqDocumentEvent">
<Super>Ens.Request</Super>
<TimeChanged>64280,50748.67321</TimeChanged>
<TimeCreated>64240,42517.879591</TimeCreated>

<Property name="DocumentNo">
<Type>%String</Type>
</Property>

<Property name="EncounterID">
<Type>%String</Type>
</Property>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
</Property>

<Property name="PatientNO">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CallBy">
<Type>%String</Type>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqDocumentEventDefaultData</DefaultData>
<Data name="reqDocumentEventDefaultData">
<Subscript>"reqDocumentEvent"</Subscript>
<Value name="1">
<Value>DocumentNo</Value>
</Value>
<Value name="2">
<Value>EncounterID</Value>
</Value>
<Value name="3">
<Value>PatientID</Value>
</Value>
<Value name="4">
<Value>PatientNID</Value>
</Value>
<Value name="5">
<Value>PatientNO</Value>
</Value>
<Value name="6">
<Value>EncounterSource</Value>
</Value>
<Value name="7">
<Value>CreationTime</Value>
</Value>
<Value name="8">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqEditPatient">
<Super>Ens.Request</Super>
<TimeChanged>64262,76669.148585</TimeChanged>
<TimeCreated>64262,76641.55741</TimeCreated>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqEditPatientDefaultData</DefaultData>
<Data name="reqEditPatientDefaultData">
<Structure>listnode</Structure>
<Subscript>"reqEditPatient"</Subscript>
<Value name="1">
<Value>PatientID</Value>
</Value>
<Value name="2">
<Value>PatientNID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqEncounterEvent">
<Super>Ens.Request</Super>
<TimeChanged>64244,40247.103228</TimeChanged>
<TimeCreated>64125,52508.104898</TimeCreated>

<Property name="EncounterID">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="PatientID">
<Description>
患者ID(门诊或住院)</Description>
<Type>%String</Type>
</Property>

<Property name="PatientNO">
<Description>
本次就诊患者号(门诊或住院号)</Description>
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Description>
身份证号</Description>
<Type>%String</Type>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqEncounterEventDefaultData</DefaultData>
<Data name="reqEncounterEventDefaultData">
<Subscript>"reqEncounterEvent"</Subscript>
<Value name="1">
<Value>PatientID</Value>
</Value>
<Value name="2">
<Value>EncounterID</Value>
</Value>
<Value name="3">
<Value>sfzh</Value>
</Value>
<Value name="4">
<Value>EncounterSource</Value>
</Value>
<Value name="5">
<Value>PatientNO</Value>
</Value>
<Value name="6">
<Value>PatientNID</Value>
</Value>
<Value name="7">
<Value>PatientId</Value>
</Value>
<Value name="8">
<Value>rrrr</Value>
</Value>
<Value name="9">
<Value>CreationTime</Value>
</Value>
<Value name="10">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqEventMonitor">
<Super>Ens.Request</Super>
<TimeChanged>64237,47846.605019</TimeChanged>
<TimeCreated>64125,55044.064862</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Property EventID As %String;

]]></Content>
</UDLText>

<Property name="RowID">
<Type>%String</Type>
</Property>

<Property name="TableName">
<Type>%String</Type>
</Property>

<Property name="SFZ">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property EventTS As %TimeStamp;

]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqEventMonitorDefaultData</DefaultData>
<Data name="reqEventMonitorDefaultData">
<Subscript>"reqEventMonitor"</Subscript>
<Value name="1">
<Value>EventID</Value>
</Value>
<Value name="2">
<Value>TableName</Value>
</Value>
<Value name="3">
<Value>OperationType</Value>
</Value>
<Value name="4">
<Value>EventTS</Value>
</Value>
<Value name="5">
<Value>RowID</Value>
</Value>
<Value name="6">
<Value>SFZH</Value>
</Value>
<Value name="7">
<Value>SFZ</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetAllergy">
<Super>Ens.Request</Super>
<TimeChanged>64271,45036.311706</TimeChanged>
<TimeCreated>64271,44791.254908</TimeCreated>

<Property name="AllergyID">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetAllergyDefaultData</DefaultData>
<Data name="reqGetAllergyDefaultData">
<Subscript>"reqGetAllergy"</Subscript>
<Value name="1">
<Value>AllergyID</Value>
</Value>
<Value name="2">
<Value>PatientID</Value>
</Value>
<Value name="3">
<Value>EncounterID</Value>
</Value>
<Value name="4">
<Value>PatinetNO</Value>
</Value>
<Value name="5">
<Value>PatinetNID</Value>
</Value>
<Value name="6">
<Value>EncounterSource</Value>
</Value>
<Value name="7">
<Value>CreationTime</Value>
</Value>
<Value name="8">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetAppointment">
<Super>Ens.Request</Super>
<TimeChanged>64281,52495.484272</TimeChanged>
<TimeCreated>64281,48621.78789</TimeCreated>

<Property name="PatientNID">
<Description>
患者身份证</Description>
<Type>%String</Type>
</Property>

<Property name="AppointmentId">
<Description>
预约序号</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetAppointmentDefaultData</DefaultData>
<Data name="reqGetAppointmentDefaultData">
<Subscript>"reqGetAppointment"</Subscript>
<Value name="1">
<Value>AppointmentId</Value>
</Value>
<Value name="2">
<Value>PatientNID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetDiaReport">
<Super>Ens.Request</Super>
<TimeChanged>64247,45409.783833</TimeChanged>
<TimeCreated>64247,44894.253961</TimeCreated>

<Property name="DiaReportID">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetDiaReportDefaultData</DefaultData>
<Data name="reqGetDiaReportDefaultData">
<Subscript>"reqGetDiaReport"</Subscript>
<Value name="1">
<Value>DiaReportID</Value>
</Value>
<Value name="2">
<Value>EncounterSource</Value>
</Value>
<Value name="3">
<Value>CreationTime</Value>
</Value>
<Value name="4">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetDiagnosis">
<Super>Ens.Request</Super>
<TimeChanged>64244,40294.709487</TimeChanged>
<TimeCreated>64127,80098.716399</TimeCreated>

<Property name="DiagnosisID">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetDiagnosisDefaultData</DefaultData>
<Data name="reqGetDiagnosisDefaultData">
<Subscript>"reqGetDiagnosis"</Subscript>
<Value name="1">
<Value>DiagnosisID</Value>
</Value>
<Value name="2">
<Value>EncounterSource</Value>
</Value>
<Value name="3">
<Value>CreationTime</Value>
</Value>
<Value name="4">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetDocument">
<Super>Ens.Request</Super>
<TimeChanged>64280,42425.206371</TimeChanged>
<TimeCreated>64280,40482.328216</TimeCreated>

<Property name="DocumentNo">
<Description>
档案编号</Description>
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Description>
就诊类型:门诊\住院\急诊</Description>
<Type>%String</Type>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetDocumentDefaultData</DefaultData>
<Data name="reqGetDocumentDefaultData">
<Subscript>"reqGetDocument"</Subscript>
<Value name="1">
<Value>DocumentNo</Value>
</Value>
<Value name="2">
<Value>EncounterType</Value>
</Value>
<Value name="3">
<Value>CreationTime</Value>
</Value>
<Value name="4">
<Value>EncounterSource</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetEncounter">
<Super>Ens.Request</Super>
<TimeChanged>64244,40304.458071</TimeChanged>
<TimeCreated>64125,50277.267506</TimeCreated>

<Property name="EncounterID">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="PatientNo">
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetEncounterDefaultData</DefaultData>
<Data name="reqGetEncounterDefaultData">
<Subscript>"reqGetEncounter"</Subscript>
<Value name="1">
<Value>EncounterID</Value>
</Value>
<Value name="2">
<Value>sfzh</Value>
</Value>
<Value name="3">
<Value>SFZH</Value>
</Value>
<Value name="4">
<Value>EncounterSource</Value>
</Value>
<Value name="5">
<Value>PatientNO</Value>
</Value>
<Value name="6">
<Value>PatientNID</Value>
</Value>
<Value name="7">
<Value>PatientNo</Value>
</Value>
<Value name="8">
<Value>PatientID</Value>
</Value>
<Value name="9">
<Value>CreationTime</Value>
</Value>
<Value name="10">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetEncounterNoByPatientAndDate">
<Super>Ens.Request</Super>
<TimeChanged>64275,36856.79141</TimeChanged>
<TimeCreated>64259,66347.295745</TimeCreated>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="EpisodeDate">
<Type>%Date</Type>
<InitialExpression>$ZDH("2016-02-02",3)</InitialExpression>
</Property>

<Property name="EpisodeType">
<Description>
inpatient or outpatient</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetEncounterNoByPatientAndDateDefaultData</DefaultData>
<Data name="reqGetEncounterNoByPatientAndDateDefaultData">
<Subscript>"reqGetEncounterNoByPatientAndDate"</Subscript>
<Value name="1">
<Value>PatientNo</Value>
</Value>
<Value name="2">
<Value>EpisodeDate</Value>
</Value>
<Value name="3">
<Value>EpisodeType</Value>
</Value>
<Value name="4">
<Value>PatientID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetLabOrder">
<Super>Ens.Request</Super>
<TimeChanged>64245,55060.23398</TimeChanged>
<TimeCreated>64245,54873.46157</TimeCreated>

<Property name="LabOrderID">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetLabOrderDefaultData</DefaultData>
<Data name="reqGetLabOrderDefaultData">
<Subscript>"reqGetLabOrder"</Subscript>
<Value name="1">
<Value>LabOrderID</Value>
</Value>
<Value name="2">
<Value>EncounterSource</Value>
</Value>
<Value name="3">
<Value>CreationTime</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetObservation">
<Super>Ens.Request</Super>
<TimeChanged>64244,58392.33614</TimeChanged>
<TimeCreated>64244,54750.713174</TimeCreated>

<Property name="ObservationID">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetObservationDefaultData</DefaultData>
<Data name="reqGetObservationDefaultData">
<Subscript>"reqGetObservation"</Subscript>
<Value name="1">
<Value>ObservationID</Value>
</Value>
<Value name="2">
<Value>EncounterSource</Value>
</Value>
<Value name="3">
<Value>CreationTime</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetOrder">
<Super>Ens.Request</Super>
<TimeChanged>64244,40313.506105</TimeChanged>
<TimeCreated>64240,44608.986313</TimeCreated>

<Property name="OrderID">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetOrderDefaultData</DefaultData>
<Data name="reqGetOrderDefaultData">
<Subscript>"reqGetOrder"</Subscript>
<Value name="1">
<Value>OrderID</Value>
</Value>
<Value name="2">
<Value>EncounterSource</Value>
</Value>
<Value name="3">
<Value>CreationTime</Value>
</Value>
<Value name="4">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetPNIDInfoByPNO">
<Super>Ens.Request</Super>
<TimeChanged>64271,52258.018207</TimeChanged>
<TimeCreated>64260,57849.663382</TimeCreated>

<Property name="PatientNo">
<Type>%String</Type>
</Property>

<Property name="EpisodeType">
<Description>
inpatient or outpatient</Description>
<Type>%String</Type>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetPNIDInfoByPNODefaultData</DefaultData>
<Data name="reqGetPNIDInfoByPNODefaultData">
<Subscript>"reqGetPNIDInfoByPNO"</Subscript>
<Value name="1">
<Value>CreationTime</Value>
</Value>
<Value name="2">
<Value>CallBy</Value>
</Value>
<Value name="3">
<Value>PatientNo</Value>
</Value>
<Value name="4">
<Value>EpisodeDate</Value>
</Value>
<Value name="5">
<Value>EpisodeType</Value>
</Value>
<Value name="6">
<Value>ExistMark</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetPatient">
<Super>Ens.Request</Super>
<TimeChanged>64244,40324.019743</TimeChanged>
<TimeCreated>64125,42542.595127</TimeCreated>

<Property name="PID">
<Description>
患者号</Description>
<Type>%String</Type>
</Property>

<Property name="PatientSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="PNID">
<Description>
身份证号</Description>
<Type>%String</Type>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetPatientDefaultData</DefaultData>
<Data name="reqGetPatientDefaultData">
<Subscript>"reqGetPatient"</Subscript>
<Value name="1">
<Value>PID</Value>
</Value>
<Value name="2">
<Value>sfzh</Value>
</Value>
<Value name="3">
<Value>PatientSource</Value>
</Value>
<Value name="4">
<Value>PNID</Value>
</Value>
<Value name="5">
<Value>CreationTime</Value>
</Value>
<Value name="6">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetPatientIDByEncounterID">
<Super>Ens.Request</Super>
<TimeChanged>64236,42343.706454</TimeChanged>
<TimeCreated>64125,55972.819006</TimeCreated>

<Property name="EncounterID">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetPatientIDByEncounterIDDefaultData</DefaultData>
<Data name="reqGetPatientIDByEncounterIDDefaultData">
<Subscript>"reqGetPatientIDByEncounterID"</Subscript>
<Value name="1">
<Value>EncounterID</Value>
</Value>
<Value name="2">
<Value>EncounterSource</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetPatientIDByRegistID">
<Super>Ens.Request</Super>
<TimeChanged>64125,73913.14003</TimeChanged>
<TimeCreated>64125,65518.757212</TimeCreated>

<Property name="RegistID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetPatientIDByRegistIDDefaultData</DefaultData>
<Data name="reqGetPatientIDByRegistIDDefaultData">
<Structure>listnode</Structure>
<Subscript>"reqGetPatientIDByRegistID"</Subscript>
<Value name="1">
<Value>RegistID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetPatientNIDByPID">
<Super>Ens.Request</Super>
<TimeChanged>64238,49995.263737</TimeChanged>
<TimeCreated>64238,49972.483723</TimeCreated>

<Property name="PID">
<Type>%String</Type>
</Property>

<Property name="PatientSource">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetPatientNIDByPIDDefaultData</DefaultData>
<Data name="reqGetPatientNIDByPIDDefaultData">
<Structure>listnode</Structure>
<Subscript>"reqGetPatientNIDByPID"</Subscript>
<Value name="1">
<Value>PID</Value>
</Value>
<Value name="2">
<Value>PatientSource</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetProcedure">
<Super>Ens.Request</Super>
<TimeChanged>64245,46707.414412</TimeChanged>
<TimeCreated>64245,46707.148718</TimeCreated>

<Property name="ProcedureID">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetProcedureDefaultData</DefaultData>
<Data name="reqGetProcedureDefaultData">
<Structure>listnode</Structure>
<Subscript>"reqGetProcedure"</Subscript>
<Value name="1">
<Value>ProcedureID</Value>
</Value>
<Value name="2">
<Value>EncounterSource</Value>
</Value>
<Value name="3">
<Value>CreationTime</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetRegist">
<Super>Ens.Request</Super>
<TimeChanged>64125,73974.434205</TimeChanged>
<TimeCreated>64125,71709.199324</TimeCreated>

<Property name="RegistID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetRegistDefaultData</DefaultData>
<Data name="reqGetRegistDefaultData">
<Structure>listnode</Structure>
<Subscript>"reqGetRegist"</Subscript>
<Value name="1">
<Value>RegistID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetResult">
<Super>Ens.Request</Super>
<TimeChanged>64266,57317.388297</TimeChanged>
<TimeCreated>64247,41194.366216</TimeCreated>

<Property name="ResultNo">
<Description>
结果记录号</Description>
<Type>%String</Type>
</Property>

<Property name="OrderNo">
<Description>
医嘱号</Description>
<Type>%String</Type>
</Property>

<Property name="EncounterNo">
<Description>
就诊号</Description>
<Type>%String</Type>
</Property>

<Property name="PatientNo">
<Description>
患者号/MRN</Description>
<Type>%String</Type>
</Property>

<Property name="EncounterType">
<Description>
就诊类型</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetResultDefaultData</DefaultData>
<Data name="reqGetResultDefaultData">
<Subscript>"reqGetResult"</Subscript>
<Value name="1">
<Value>ResultID</Value>
</Value>
<Value name="2">
<Value>EncounterSource</Value>
</Value>
<Value name="3">
<Value>CreationTime</Value>
</Value>
<Value name="4">
<Value>CallBy</Value>
</Value>
<Value name="5">
<Value>EncounterID</Value>
</Value>
<Value name="6">
<Value>PatientID</Value>
</Value>
<Value name="7">
<Value>OrderNo</Value>
</Value>
<Value name="8">
<Value>ResultNo</Value>
</Value>
<Value name="9">
<Value>EncounterNo</Value>
</Value>
<Value name="10">
<Value>PatientNo</Value>
</Value>
<Value name="11">
<Value>EncounterType</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqGetResultItems">
<Super>Ens.Request</Super>
<TimeChanged>64275,52359.824713</TimeChanged>
<TimeCreated>64259,63624.031027</TimeCreated>

<Property name="SampleNumber">
<Type>%String</Type>
</Property>

<Property name="EpisodeNo">
<Type>%String</Type>
</Property>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqGetResultItemsDefaultData</DefaultData>
<Data name="reqGetResultItemsDefaultData">
<Subscript>"reqGetResultItems"</Subscript>
<Value name="1">
<Value>SampleNumber</Value>
</Value>
<Value name="2">
<Value>EpisodeNo</Value>
</Value>
<Value name="3">
<Value>PatientID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqLabOrderEvent">
<Super>Ens.Request</Super>
<TimeChanged>64246,49536.950318</TimeChanged>
<TimeCreated>64246,49440.131308</TimeCreated>

<Property name="LabOrderID">
<Type>%String</Type>
</Property>

<Property name="EncounterID">
<Type>%String</Type>
</Property>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
</Property>

<Property name="PatientNO">
<Description>
本次就诊患者号(门诊或住院号)</Description>
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqLabOrderEventDefaultData</DefaultData>
<Data name="reqLabOrderEventDefaultData">
<Subscript>"reqLabOrderEvent"</Subscript>
<Value name="1">
<Value>LabOrderID</Value>
</Value>
<Value name="2">
<Value>EncounterID</Value>
</Value>
<Value name="3">
<Value>PatientID</Value>
</Value>
<Value name="4">
<Value>PatientNID</Value>
</Value>
<Value name="5">
<Value>PatientNO</Value>
</Value>
<Value name="6">
<Value>EncounterSource</Value>
</Value>
<Value name="7">
<Value>CreationTime</Value>
</Value>
<Value name="8">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqObservationEvent">
<Super>Ens.Request</Super>
<TimeChanged>64244,55726.110081</TimeChanged>
<TimeCreated>64244,55124.358331</TimeCreated>

<Property name="ObservationID">
<Type>%String</Type>
</Property>

<Property name="EncounterID">
<Type>%String</Type>
</Property>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
</Property>

<Property name="PatientNo">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqObservationEventDefaultData</DefaultData>
<Data name="reqObservationEventDefaultData">
<Subscript>"reqObservationEvent"</Subscript>
<Value name="1">
<Value>ObservationID</Value>
</Value>
<Value name="2">
<Value>EncounterID</Value>
</Value>
<Value name="3">
<Value>PatientID</Value>
</Value>
<Value name="4">
<Value>PatientNID</Value>
</Value>
<Value name="5">
<Value>PatientNo</Value>
</Value>
<Value name="6">
<Value>EncounterSource</Value>
</Value>
<Value name="7">
<Value>CallBy</Value>
</Value>
<Value name="8">
<Value>CreationTime</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqOrderEvent">
<Super>Ens.Request</Super>
<TimeChanged>64244,48073.337022</TimeChanged>
<TimeCreated>64240,42517.879591</TimeCreated>

<Property name="OrderID">
<Type>%String</Type>
</Property>

<Property name="EncounterID">
<Type>%String</Type>
</Property>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
</Property>

<Property name="PatientNO">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqOrderEventDefaultData</DefaultData>
<Data name="reqOrderEventDefaultData">
<Subscript>"reqOrderEvent"</Subscript>
<Value name="1">
<Value>OrderID</Value>
</Value>
<Value name="2">
<Value>EncounterID</Value>
</Value>
<Value name="3">
<Value>PatientID</Value>
</Value>
<Value name="4">
<Value>PatientNID</Value>
</Value>
<Value name="5">
<Value>PatientNO</Value>
</Value>
<Value name="6">
<Value>EncounterSource</Value>
</Value>
<Value name="7">
<Value>CreationTime</Value>
</Value>
<Value name="8">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqProcedureEvent">
<Super>Ens.Request</Super>
<TimeChanged>64245,53707.083114</TimeChanged>
<TimeCreated>64245,46843.993441</TimeCreated>

<Property name="ProcedureID">
<Type>%String</Type>
</Property>

<Property name="EncounterID">
<Type>%String</Type>
</Property>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
</Property>

<Property name="PatientNo">
<Type>%String</Type>
</Property>

<Property name="EncounterSource">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="CallBy">
<Description>
调用程序 【 OPOrder / IPOrder /OPEncounter/IPEncounter/OPDiagnosis/O】</Description>
<Type>%String</Type>
</Property>

<Property name="CreationTime">
<Description>
创建时间</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$Zd($h,3)_" "_$zt($P($h,",",2))</InitialExpression>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqProcedureEventDefaultData</DefaultData>
<Data name="reqProcedureEventDefaultData">
<Subscript>"reqProcedureEvent"</Subscript>
<Value name="1">
<Value>ProcedureID</Value>
</Value>
<Value name="2">
<Value>EncounterID</Value>
</Value>
<Value name="3">
<Value>PatientID</Value>
</Value>
<Value name="4">
<Value>PatientNID</Value>
</Value>
<Value name="5">
<Value>PatientNo</Value>
</Value>
<Value name="6">
<Value>EncounterSource</Value>
</Value>
<Value name="7">
<Value>CreationTime</Value>
</Value>
<Value name="8">
<Value>CallBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqResultEvent">
<Super>Ens.Request</Super>
<TimeChanged>64275,44085.281797</TimeChanged>
<TimeCreated>64247,41603.3849</TimeCreated>

<Property name="OrderNo">
<Description>
医嘱号</Description>
<Type>%String</Type>
</Property>

<Property name="ResultNo">
<Description>
检验结果编号</Description>
<Type>%String</Type>
</Property>

<Property name="EncounterType">
<Description>
就诊类型</Description>
<Type>%String</Type>
</Property>

<Property name="EncounterID">
<Type>%String</Type>
</Property>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
</Property>

<Property name="PatientNO">
<Description>
本次就诊患者号(门诊或住院号)</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqResultEventDefaultData</DefaultData>
<Data name="reqResultEventDefaultData">
<Subscript>"reqResultEvent"</Subscript>
<Value name="1">
<Value>OrderNo</Value>
</Value>
<Value name="2">
<Value>ResultNo</Value>
</Value>
<Value name="3">
<Value>EncounterType</Value>
</Value>
<Value name="4">
<Value>EncounterID</Value>
</Value>
<Value name="5">
<Value>PatientID</Value>
</Value>
<Value name="6">
<Value>PatientNID</Value>
</Value>
<Value name="7">
<Value>PatientNO</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqSampleNumber">
<Super>Ens.Request</Super>
<TimeChanged>64259,63624.252338</TimeChanged>
<TimeCreated>64259,63624.031027</TimeCreated>

<Property name="SampleNumber">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqSampleNumberDefaultData</DefaultData>
<Data name="reqSampleNumberDefaultData">
<Structure>listnode</Structure>
<Subscript>"reqSampleNumber"</Subscript>
<Value name="1">
<Value>SampleNumber</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqUpdatePatientByRest">
<Super>Ens.Request</Super>
<TimeChanged>64262,62242.092299</TimeChanged>
<TimeCreated>64262,52968.816159</TimeCreated>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqUpdatePatientByRestDefaultData</DefaultData>
<Data name="reqUpdatePatientByRestDefaultData">
<Subscript>"reqUpdatePatientByRest"</Subscript>
<Value name="1">
<Value>PatientID</Value>
</Value>
<Value name="2">
<Value>PatientNID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.reqUpdatePatientEvent">
<Super>Ens.Request</Super>
<TimeChanged>64262,68070.114979</TimeChanged>
<TimeCreated>64262,68069.847776</TimeCreated>

<Property name="PID">
<Type>%String</Type>
</Property>

<Property name="PNID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>reqUpdatePatientEventDefaultData</DefaultData>
<Data name="reqUpdatePatientEventDefaultData">
<Structure>listnode</Structure>
<Subscript>"reqUpdatePatientEvent"</Subscript>
<Value name="1">
<Value>PID</Value>
</Value>
<Value name="2">
<Value>PNID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resEditPatient">
<Super>Ens.Response</Super>
<TimeChanged>64262,76720.70408</TimeChanged>
<TimeCreated>64262,76720.546313</TimeCreated>

<Property name="Patient">
<Type>CDR.Patient</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resEditPatientDefaultData</DefaultData>
<Data name="resEditPatientDefaultData">
<Structure>listnode</Structure>
<Subscript>"resEditPatient"</Subscript>
<Value name="1">
<Value>Patient</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetAllergy">
<Super>Ens.Response</Super>
<TimeChanged>64271,44864.403154</TimeChanged>
<TimeCreated>64271,44864.195676</TimeCreated>

<Property name="Allergy">
<Type>CDR.Allergy</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetAllergyDefaultData</DefaultData>
<Data name="resGetAllergyDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetAllergy"</Subscript>
<Value name="1">
<Value>Allergy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetAppointment">
<Super>Ens.Response</Super>
<TimeChanged>64281,50163.185018</TimeChanged>
<TimeCreated>64281,50163.017254</TimeCreated>

<Property name="Appointment">
<Type>CDR.Appointment</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetAppointmentDefaultData</DefaultData>
<Data name="resGetAppointmentDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetAppointment"</Subscript>
<Value name="1">
<Value>Appointment</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetDiaReport">
<Super>Ens.Response</Super>
<TimeChanged>64247,44954.950724</TimeChanged>
<TimeCreated>64247,44954.747742</TimeCreated>

<Property name="DiagnosticReport">
<Type>CDR.DiagnosticReport</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetDiaReportDefaultData</DefaultData>
<Data name="resGetDiaReportDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetDiaReport"</Subscript>
<Value name="1">
<Value>DiagnosticReport</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetDiagnosis">
<Super>Ens.Response</Super>
<TimeChanged>64127,80143.907834</TimeChanged>
<TimeCreated>64127,80143.511813</TimeCreated>

<Property name="Diagnosis">
<Type>CDR.Diagnosis</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetDiagnosisDefaultData</DefaultData>
<Data name="resGetDiagnosisDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetDiagnosis"</Subscript>
<Value name="1">
<Value>Diagnosis</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetDocument">
<Super>Ens.Response</Super>
<TimeChanged>64280,40558.672568</TimeChanged>
<TimeCreated>64280,40558.510508</TimeCreated>

<Property name="Document">
<Type>CDR.Document</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetDocumentDefaultData</DefaultData>
<Data name="resGetDocumentDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetDocument"</Subscript>
<Value name="1">
<Value>Document</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetEncounter">
<Super>Ens.Response</Super>
<TimeChanged>64125,50271.763466</TimeChanged>
<TimeCreated>64125,50271.512225</TimeCreated>

<Property name="Encounter">
<Type>CDR.Encounter</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetEncounterDefaultData</DefaultData>
<Data name="resGetEncounterDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetEncounter"</Subscript>
<Value name="1">
<Value>Encounter</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetEncounterNoByPatientAndDate">
<Super>Ens.Response</Super>
<TimeChanged>64259,66381.832205</TimeChanged>
<TimeCreated>64259,66381.611576</TimeCreated>

<Property name="EncounterNo">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetEncounterNoByPatientAndDateDefaultData</DefaultData>
<Data name="resGetEncounterNoByPatientAndDateDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetEncounterNoByPatientAndDate"</Subscript>
<Value name="1">
<Value>EncounterNo</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetLabOrder">
<Super>Ens.Response</Super>
<TimeChanged>64245,54918.822878</TimeChanged>
<TimeCreated>64245,54918.62867</TimeCreated>

<Property name="LabOrder">
<Type>CDR.LabOrder</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetLabOrderDefaultData</DefaultData>
<Data name="resGetLabOrderDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetLabOrder"</Subscript>
<Value name="1">
<Value>LabOrder</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetObservation">
<Super>Ens.Response</Super>
<TimeChanged>64244,55743.16507</TimeChanged>
<TimeCreated>64244,54909.185831</TimeCreated>

<Property name="Observation">
<Type>CDR.Observation</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetObservationDefaultData</DefaultData>
<Data name="resGetObservationDefaultData">
<Subscript>"resGetObservation"</Subscript>
<Value name="1">
<Value>Observation</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetOrder">
<Super>Ens.Response</Super>
<TimeChanged>64240,44688.389344</TimeChanged>
<TimeCreated>64240,44688.012302</TimeCreated>

<Property name="Order">
<Type>CDR.Order</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetOrderDefaultData</DefaultData>
<Data name="resGetOrderDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetOrder"</Subscript>
<Value name="1">
<Value>Order</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetPNIDInfoByPNO">
<Super>Ens.Response</Super>
<TimeChanged>64271,52347.549005</TimeChanged>
<TimeCreated>64260,58158.365525</TimeCreated>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="PatientNID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetPNIDInfoByPNODefaultData</DefaultData>
<Data name="resGetPNIDInfoByPNODefaultData">
<Subscript>"resGetPNIDInfoByPNO"</Subscript>
<Value name="1">
<Value>PatientID</Value>
</Value>
<Value name="2">
<Value>EpisodeType</Value>
</Value>
<Value name="3">
<Value>CreationTime</Value>
</Value>
<Value name="4">
<Value>CallBy</Value>
</Value>
<Value name="5">
<Value>PatientNID</Value>
</Value>
<Value name="6">
<Value>ExistMark</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetPatient">
<Super>Ens.Response</Super>
<TimeChanged>64125,42584.873755</TimeChanged>
<TimeCreated>64125,42584.620649</TimeCreated>

<Property name="Patient">
<Type>CDR.Patient</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetPatientDefaultData</DefaultData>
<Data name="resGetPatientDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetPatient"</Subscript>
<Value name="1">
<Value>Patient</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetPatientID">
<Super>Ens.Response</Super>
<TimeChanged>64125,65611.238859</TimeChanged>
<TimeCreated>64125,65605.008682</TimeCreated>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetPatientIDDefaultData</DefaultData>
<Data name="resGetPatientIDDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetPatientID"</Subscript>
<Value name="1">
<Value>PatientID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetPatientIDByEncounterID">
<Super>Ens.Response</Super>
<TimeChanged>64238,48762.812628</TimeChanged>
<TimeCreated>64125,55970.646106</TimeCreated>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="PatientNationalID">
<Description>
SFZH</Description>
<Type>%String</Type>
</Property>

<Property name="PatientNO">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetPatientIDByEncounterIDDefaultData</DefaultData>
<Data name="resGetPatientIDByEncounterIDDefaultData">
<Subscript>"resGetPatientIDByEncounterID"</Subscript>
<Value name="1">
<Value>PatientID</Value>
</Value>
<Value name="2">
<Value>PatientNationalID</Value>
</Value>
<Value name="3">
<Value>PatientNO</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetPatientNIDByPID">
<Super>Ens.Response</Super>
<TimeChanged>64238,50120.183353</TimeChanged>
<TimeCreated>64238,50097.694455</TimeCreated>

<Property name="PatientNID">
<Description>
身份号</Description>
<Type>%String</Type>
</Property>

<Property name="PatientNo">
<Description>
门诊/住院号</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetPatientNIDByPIDDefaultData</DefaultData>
<Data name="resGetPatientNIDByPIDDefaultData">
<Subscript>"resGetPatientNIDByPID"</Subscript>
<Value name="1">
<Value>PatientNID</Value>
</Value>
<Value name="2">
<Value>PatientNo</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetProcedure">
<Super>Ens.Response</Super>
<TimeChanged>64245,46927.644228</TimeChanged>
<TimeCreated>64245,46927.427147</TimeCreated>

<Property name="Procedure">
<Type>CDR.Procedure</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetProcedureDefaultData</DefaultData>
<Data name="resGetProcedureDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetProcedure"</Subscript>
<Value name="1">
<Value>Procedure</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetRegist">
<Super>Ens.Response</Super>
<TimeChanged>64126,35688.717841</TimeChanged>
<TimeCreated>64125,71866.595323</TimeCreated>

<Property name="Regist">
<Type>CDR.Regist</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetRegistDefaultData</DefaultData>
<Data name="resGetRegistDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetRegist"</Subscript>
<Value name="1">
<Value>Regist</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetResult">
<Super>Ens.Response</Super>
<TimeChanged>64247,41263.473648</TimeChanged>
<TimeCreated>64247,41263.26428</TimeCreated>

<Property name="Result">
<Type>CDR.Result</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetResultDefaultData</DefaultData>
<Data name="resGetResultDefaultData">
<Structure>listnode</Structure>
<Subscript>"resGetResult"</Subscript>
<Value name="1">
<Value>Result</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resGetResultItems">
<Super>Ens.Response</Super>
<TimeChanged>64268,57973.925247</TimeChanged>
<TimeCreated>64259,63713.743453</TimeCreated>

<Property name="Result">
<Type>CDR.Result</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resGetResultItemsDefaultData</DefaultData>
<Data name="resGetResultItemsDefaultData">
<Subscript>"resGetResultItems"</Subscript>
<Value name="1">
<Value>Result</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.MSG.resUpdatePatientByRest">
<Super>Ens.Response</Super>
<TimeChanged>64262,53777.365152</TimeChanged>
<TimeCreated>64262,53247.786775</TimeCreated>

<Property name="Patient">
<Type>CDR.Patient</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>resUpdatePatientByRestDefaultData</DefaultData>
<Data name="resUpdatePatientByRestDefaultData">
<Subscript>"resUpdatePatientByRest"</Subscript>
<Value name="1">
<Value>Success</Value>
</Value>
<Value name="2">
<Value>UpdateSuccess</Value>
</Value>
<Value name="3">
<Value>Patient</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HIP.RUL.Test">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64125,65743.717636</TimeChanged>
<TimeCreated>64125,65637.407771</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>Ens.Rule.GeneralBusinessRuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="HIP.BP.EncounterEvent.Context" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<when condition="Encounter.AdmissionType=&quot;outpatient&quot;">
<return>1</return>
</when>
<otherwise>
<return>0</return>
</otherwise>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="HIP.Setting">
<Super>%RegisteredObject</Super>
<TimeChanged>64281,58997.087856</TimeChanged>
<TimeCreated>64265,41225.230107</TimeCreated>

<Method name="GetHomeFacility">
<Description>
^HIPSetting("HomeFacility")设置默认的医疗数据发生医疗机构的名称，用于HL7消息
^HIPSetting("HomeFacility")="NKYY"
^HIPSetting("HistoryUploadHL7")设置是否正在处理历史数据，如果不是，那么会自动生成HL7
^HIPSetting("HistoryUploadHL7")=1</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $G(^HIPSetting("HomeFacility"))
]]></Implementation>
</Method>

<Method name="IsHistory">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit +$G(^HIPSetting("HistoryUploadHL7"))
]]></Implementation>
</Method>
</Class>


<Class name="HIP.Tools">
<Super>%RegisteredObject</Super>
<TimeChanged>64343,3697.778728</TimeChanged>
<TimeCreated>64261,62462.85004</TimeCreated>

<Method name="Patient2HL7">
<Description>
将患者的所有记录导出为单一的HL7文件</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPatientId,pPath="D:\HS\HistoryHL7\",pDebug=0</FormalSpec>
<Implementation><![CDATA[
	#define  HIPErrorLog(%DT,%ID,%Err)  Set ^HIPErrorLog($I(^HIPErrorLog))="Tranform error with "_%DT_" on Object ID:"_%ID_" is "_%Err
	#define  DeubgOutput(%MSG) w %MSG," at ",$ZDT($H,3),!
	
	Set tFile=##class(%Stream.FileCharacter).%New()
	Set tTS = $ZDT($H,3)
	Set tFileName = pPatientId_"-"_##class(CDR.Tools.Tools).TS2HL7STR(tTS)
	Set tSC=tFile.LinkToFile(pPath_tFileName_".hl7")
	set tFile.TranslateTable="UTF8"
	
	Set tTempStream = ##class(%Stream.GlobalCharacter).%New()
	
	If (pDebug=1) $$$DeubgOutput("Begin loop encounters:")
	 
	SET tQuery = "SELECT ID FROM CDR.Encounter WHERE patient = ? order by ID asc "
	SET tStatement = ##class(%SQL.Statement).%New()
	SET tSC = tStatement.%Prepare(tQuery)
	IF tSC'=1 { WRITE "%Prepare failed",$System.Status.DisplayError(tSC) QUIT}
	SET tRS = tStatement.%Execute(pPatientId)
	
	WHILE tRS.%Next()
	{
		Set tEncoutnerId=tRS.%GetData(1)
	
		Set tHL7 = ""
		If (pDebug=1) $$$DeubgOutput("encounter="_tEncoutnerId_" Begin:")
		Set tEncounter = ##class(CDR.Encounter).%OpenId(tEncoutnerId)
		Set tSC = ##class(HIP.DT.Encounter2HL7).Transform(tEncounter,.tHL7)
		if $$$ISERR(tSC)
		{
			$$$HIPErrorLog("HIP.DT.Encounter2HL7", tEncoutnerId,$System.Status.GetErrorText(tSC))
			Quit 
		}
		
		// write HL7 to file
		Do tTempStream.Write(tHL7.OutputToString())
		//Do tTempStream.WriteLine($C(10)_$C(13))
		Do tTempStream.Write($C(10,13))
		If (pDebug=1) $$$DeubgOutput("encounter="_tEncoutnerId_" End:")
		
		#dim tOrder As CDR.Order
		For i=1:1:tEncounter.Orders.Count()
		{
			Set tOrder = tEncounter.Orders.GetAt(i)
			if tOrder.#ORDERITEMTYPE="MED"
			{
				If (pDebug=1) $$$DeubgOutput("Medication="_tOrder_" Begin:")
				Set tSC = ##class(HIP.DT.Medication2HL7).Transform(tOrder,.tHL7)
				if $$$ISERR(tSC)
				{
					$$$HIPErrorLog("HIP.DT.Medication2HL7", tOrder.%Id(),$System.Status.GetErrorText(tSC))
					Quit 
				}
				
				// write HL7 to file
				Do tTempStream.Write(tHL7.OutputToString())
				//Do tTempStream.WriteLine($C(10)_$C(13))
				Do tTempStream.Write($C(10,13))
				If (pDebug=1) $$$DeubgOutput("Medication="_tOrder_" End:")

			}
			elseif ((tOrder.#ORDERITEMTYPE="LAB") || (tOrder.#ORDERITEMTYPE="RAD"))
			{
				If (pDebug=1) $$$DeubgOutput("Lab="_tOrder_" Begin:")
				Set tSC = ##class(HIP.DT.Order2HL7).Transform(tOrder,.tHL7)
				if $$$ISERR(tSC)
				{
					$$$HIPErrorLog("HIP.DT.Order2HL7", tOrder.%Id(),$System.Status.GetErrorText(tSC))
					Quit 
				}
				// write HL7 to file
				Do tTempStream.Write(tHL7.OutputToString())
				//Do tTempStream.WriteLine($C(10)_$C(13))
				Do tTempStream.Write($C(10,13))
				Set tResult = tOrder.Results.GetAt(1)
				if $ISOBJECT(tResult)
				{
					If (pDebug=1) $$$DeubgOutput("Result="_tResult_" Begin:")
					Set tSC = ##class(HIP.DT.Result2HL7).Transform(tResult,.tHL7)
					if $$$ISERR(tSC)
					{
						$$$HIPErrorLog("HIP.DT.Result2HL7", tResult.%Id(),$System.Status.GetErrorText(tSC))
						Quit 
					}
					// write HL7 to file
					Do tTempStream.Write(tHL7.OutputToString())
					//Do tTempStream.WriteLine($C(10)_$C(13))
					Do tTempStream.Write($C(10,13))
					If (pDebug=1) $$$DeubgOutput("Result="_tResult_" End:")
				}
				If (pDebug=1) $$$DeubgOutput("Lab="_tOrder_" End:")
			}
		}
		
		For i=1:1:tEncounter.Documents.Count()
		{
			Set tDocument = tEncounter.Documents.GetAt(i)
			If (pDebug=1) $$$DeubgOutput("doc="_tDocument_" Begin:")
			Set tSC = ##class(HIP.DT.Document2HL7).Transform(tDocument,.tHL7)
			if $$$ISERR(tSC)
			{
				$$$HIPErrorLog("HIP.DT.Document2HL7", tDocument.%Id(),$System.Status.GetErrorText(tSC))
				Quit 
			}
			
			// write HL7 to file
			Do tTempStream.Write(tHL7.OutputToString())
			//Do tTempStream.WriteLine($C(10)_$C(13))
			Do tTempStream.Write($C(10,13))
			If (pDebug=1) $$$DeubgOutput("doc="_tDocument_" End:")
		}
		
	}
	
	SET tQuery = "SELECT ID FROM CDR.Appointment WHERE patient = ? order by ID asc "
	SET tStatement = ##class(%SQL.Statement).%New()
	SET tSC = tStatement.%Prepare(tQuery)
	IF tSC'=1 { WRITE "%Prepare failed",$System.Status.DisplayError(tSC) QUIT}
	SET tRS = tStatement.%Execute(pPatientId)
	
	WHILE tRS.%Next()
	{
		Set tHL7 = "", tAppointmentId=tRS.%GetData(1)
		Set tAppointment = ##class(CDR.Appointment).%OpenId(tAppointmentId)
		If (pDebug=1) $$$DeubgOutput("Appointment="_tAppointmentId_" Begin:")
		Set tSC = ##class(HIP.DT.Appointment2HL7).Transform(tAppointment,.tHL7)
		if $$$ISERR(tSC)
		{
			$$$HIPErrorLog("HIP.DT.Appointment2HL7", tAppointmentId,$System.Status.GetErrorText(tSC))
			Quit 
		}
		// write HL7 to file
		Do tTempStream.Write(tHL7.OutputToString())
		//Do tTempStream.WriteLine($C(10)_$C(13))
		Do tTempStream.Write($C(10,13))
		If (pDebug=1) $$$DeubgOutput("Appointment="_tAppointmentId_" End:")
	}
	
	If (pDebug=1) $$$DeubgOutput("Start stream copy")
	Do tFile.CopyFrom(tTempStream)
	w tFile.%Save()
	If (pDebug=1) $$$DeubgOutput("End stream copy")
	
	Set (tTempStream,tHL7,tRS)=""
	
	If (pDebug=1) $$$DeubgOutput(" All End:")
]]></Implementation>
</Method>

<Method name="LoopPatientHistory">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set tPatientId = $O(^CDR.PatientD(""))
	While tPatientId
	{
		Do ..Patient2HL7(tPatientId)
		Set tPatientId = $O(^CDR.PatientD(tPatientId))
	}
]]></Implementation>
</Method>

<Method name="TestLabOrderDT">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLabOrderId</FormalSpec>
<Implementation><![CDATA[
	Set tOrder = ##class(CDR.LabOrder).%OpenId(pLabOrderId)
	Set tSC = ##class(HIP.DT.Order2HL7).Transform(tOrder,.tHL7)
	if $$$ISERR(tSC)
	{
		Set x = $System.Status.GetErrorText(tSC)
		w x,!
		Quit 
	}
	
	// output HL7 
	w tHL7.OutputToString(),!
]]></Implementation>
</Method>

<Method name="TestRadOrderDT">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRadOrderId</FormalSpec>
<Implementation><![CDATA[
	Set tOrder = ##class(CDR.RadOrder).%OpenId(pRadOrderId)
	Set tSC = ##class(HIP.DT.Order2HL7).Transform(tOrder,.tHL7)
	if $$$ISERR(tSC)
	{
		Set x = $System.Status.GetErrorText(tSC)
		w x,!
		Quit 
	}
	
	// output HL7 
	w tHL7.OutputToString(),!
]]></Implementation>
</Method>

<Method name="TestResultDT">
<ClassMethod>1</ClassMethod>
<FormalSpec>pResultId</FormalSpec>
<Implementation><![CDATA[
	Set tResult = ##class(CDR.Result).%OpenId(pResultId)
	Set tSC = ##class(HIP.DT.Result2HL7).Transform(tResult,.tHL7)
	if $$$ISERR(tSC)
	{
		Set x = $System.Status.GetErrorText(tSC)
		w x,!
		Quit 
	}
	
	// output HL7 
	w tHL7.OutputToString(),!
]]></Implementation>
</Method>

<Method name="TestDocumentDT">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDocumentId</FormalSpec>
<Implementation><![CDATA[
	Set tDocument = ##class(CDR.Document).%OpenId(pDocumentId)
	Set tSC = ##class(HIP.DT.Document2HL7).Transform(tDocument,.tHL7)
	if $$$ISERR(tSC)
	{
		Set x = $System.Status.GetErrorText(tSC)
		w x,!
		Quit 
	}
	
	// output HL7 
	w tHL7.OutputToString(),!
]]></Implementation>
</Method>

<Method name="StreamTest">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set stream=##class(%Stream.FileBinary).%New()
	Set sc=stream.LinkToFile("c:\myfile.txt")
	
	Set tDoc = ##class(CDR.Document).%OpenId(3)
	Do stream.CopyFrom(tDoc.Stream)
	Quit stream.%Save()
]]></Implementation>
</Method>
</Class>


<Class name="HIP.Util.ExtendedRuleFunctions">
<Super>Ens.Rule.FunctionSet</Super>
<TimeChanged>64861,41599.509022</TimeChanged>
<TimeCreated>64550,56654.294733</TimeCreated>

<Method name="GetAge">
<Description>
以生日计算年龄</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>DOB:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[ quit ((+$H-$ZDTH(DOB,8)) \ 365.25)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.Util.Test">
<Super>%RegisteredObject</Super>
<TimeChanged>64576,55658.206577</TimeChanged>
<TimeCreated>64550,56654.294733</TimeCreated>

<Property name="StyleSheets">
<Type>%XML.XSLT.CompiledStyleSheet</Type>
<Collection>array</Collection>
<Private>1</Private>
</Property>

<Property name="XSLTCacheMode">
<Type>%String</Type>
<InitialExpression>"T"</InitialExpression>
<Parameter name="DISPLAYLIST" value=",Always,Timestamp,Never"/>
<Parameter name="VALUELIST" value=",A,T,N"/>
</Property>

<Property name="Filenames">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
<Private>1</Private>
</Property>

<Method name="TestXSLT">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	//Open the object
	set a=##class(CDR.Encounter).ukEncounterNoOpen(1000)
 	
 	 //Write to XML	
	Set writer=##class(%XML.Writer).%New()
 	Set writer.Indent=1
 	set status=writer.OutputToStream(.tSource) 
 	Set status=writer.RootObject(a) 
 	
	//Get the XSL file from a file
	set XSLFilePath ="D:\working\HIP\01_MedicalRecordSummary.xsl"
	Set tXSL = ##class(%Stream.FileBinary).%New()
	set status=tXSL.LinkToFile(XSLFilePath)
	Set tSC=##class(%XML.XSLT.CompiledStyleSheet).CreateFromStream(tXSL,.tCompiledStyleSheet)
		
	#; Get a Callback handler to handle the extension calls to cache-evaluate()	
	Set tCallbackHandler=##Class(HIP.Util.XSLTHelper).%New()
         	
 	 #; Transform the source according to the XSL
       	Set tSC=##class(%XML.XSLT2.Transformer).TransformStream(tSource,tXSL,.tOutput,,,tCallbackHandler)
       	//Set tSC=##class(%XML.XSLT.Transformer).TransformStreamWithCompiledXSL(tSource,tCompiledStyleSheet,.tOutput)
        
        //close CompliedStyleSheet
        //	Do tCompiledStyleSheet.%Close()
	
	#; Output the result to the screen
	Set tOutputStream=##class(%Stream.TmpCharacter).%New()
	Do tOutputStream.Write(tOutput)
	Do tOutputStream.Rewind()
        #; Output the result to a file
#;		Set file = ##class(%File).%New("c:\temp\a02.txt")
#;		Set tSC = file.Open("WRN")
#;		If $$$ISERR(tSC) quit
#;		
#;		While 'tOutputStream.AtEnd {
#;			Set tSC = file.Write(tOutputStream.ReadLine())
#;			If $$$ISERR(tSC) quit
#;		}
#;		Do file.Close()
	Quit 1
]]></Implementation>
</Method>

<Method name="getStyleSheet">
<FormalSpec>pLocation:%String="",*pXSL:%XML.XSLT.CompiledStyleSheet</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK
	Try {
		Set tScheme=$ZCVT($P(pLocation,":",1),"L")
		
		
		
			#; XSL is from a file
			Set tSC=..getFilename(pLocation,.tFilename) Quit:$$$ISERR(tSC)
			Set tKey=$ZCVT(tFilename,"L")
			Set pXSL=..StyleSheets.GetAt(tKey)
			
			#; There is an entry, bail if not expired
			If pXSL]"" {
				If ..XSLTCacheMode="A" Quit  //$$$TRACE("Using cached file: "_tFilename) Quit
				If ..XSLTCacheMode="T" {
					If $G(..Timestamps(tKey))=..getLastModified(tFilename) Quit  //$$$TRACE("Using cached file: "_tFilename) Quit
					//$$$TRACE("Expired cached file: "_tFilename)
				}
			}
		
			#; Entry is missing or expired, load stylesheet from file
			//$$$TRACE("Loading XSLT file: "_tFilename)
			Set tSC = ##class(%XML.XSLT.CompiledStyleSheet).CreateFromFile(tFilename,.pXSL) Quit:$$$ISERR(tSC)
			If ..XSLTCacheMode'="N" {
				Set tSC=..StyleSheets.SetAt(pXSL,tKey) Quit:$$$ISERR(tSC)
				If ..XSLTCacheMode="T" {
					Set ..Timestamps(tKey)=..getLastModified(tFilename)
				}		
			
		}
	} Catch ex { Set tSC=ex.AsStatus() }
	Quit tSC
]]></Implementation>
</Method>

<Method name="testservice">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set tStatus=##class(%XML.XPATH.Document).CreateFromFile("d:\sample4IOT.xml", .tDocument)
	Set tStatus = tDocument.EvaluateExpression("//PRPA_IN201305UV02/controlActProcess/queryByParameter/parameterList/livingSubjectId/semanticsText", "text()", .tResults)
]]></Implementation>
</Method>
</Class>


<Class name="HIP.Util.XSLTHelperCopy">
<Description>
Include HS.Common
This class handles callbacks from the XSLT processor. You should create a subclass this class and override the 
'evaluate' method to perform the processing that you require. An example of an stylesheet using this function is
shown in the example XSL contained in the %XML.XSLT.Transformer class</Description>
<Super>%XML.XSLT.CallbackHandler</Super>
<TimeChanged>64549,40621.569082</TimeChanged>
<TimeCreated>60165,61419.967336</TimeCreated>

<Method name="evaluate">
<FormalSpec>Args...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q 1
]]></Implementation>
</Method>

<Method name="dateNoDash">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $TR(pDate,"-")
]]></Implementation>
</Method>

<Method name="timestamp">
<Description>
Compute a timestamp</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pEpoch:%String=$Horolog,pTimeZoneOffsetMinutes:%Integer=$ZTimeZone</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tMinus = 0
	If $Extract(pTimeZoneOffsetMinutes)="-" Set tMinus = 1 Set pTimeZoneOffsetMinutes = -pTimeZoneOffsetMinutes
	Set tHours = pTimeZoneOffsetMinutes\60
	Set:tHours<10 tHours = "0"_tHours
	Set tMins = pTimeZoneOffsetMinutes#60
	Set:tMins<10 tMins = "0"_tMins
	Set tTimeZoneOffsetHHMM = $Select(tMinus=1:"-",1:"")_tHours_tMins
	
	If pEpoch["," {
		Quit $TR("YyXxMmDdHhNnSs","YyXx-Mm-Dd Hh:Nn:Ss",$ZDT(pEpoch,3))_$e($fn(-tTimeZoneOffsetHHMM,"+"),1)_$E($zabs(tTimeZoneOffsetHHMM)+10000,2,5)
	} Else {
		Quit $TR("YyXxMmDd","YyXx-Mm-Dd",$ZDT(pEpoch,3))
	}
]]></Implementation>
</Method>

<Method name="timestamptoxml">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>pTS:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$TR("YyXx-Mm-DdTHh:Nn:SsZ","YyXx-Mm-Dd Hh:Nn:Ss",pTS)
]]></Implementation>
</Method>

<Method name="returnAsUTC">
<Description>
Used to take a standard date/time (YYYY-MM-DD HH:MM:SS) and return as UTC (YYYY-MM-DDTHH:MM:SSZ)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>datetime:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Try { 
		Set tReturn=$tr($ZDT($ZDTH(datetime,3,4),3,7),"T:-")
	} Catch {
		Set tReturn=""
	}
	quit tReturn
]]></Implementation>
</Method>

<Method name="xmltimestampisbefore">
<Description>
Compare two XML timestamps, returns true if pTS1 is the same as or before pTS2</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTS1:%String,pTS2:%String="{$ZDateTime($Horolog, 3)}"</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set tH1 = $S(pTS1'="":$ZDTH($tr("YyXx-Mm-Dd Hh:Nn:Ss","YyXx-Mm-DdTHh:Nn:SsZ",pTS1),3),1:0)
	Set tH2 = $S(pTS2'="":$ZDTH($tr("YyXx-Mm-Dd Hh:Nn:Ss","YyXx-Mm-DdTHh:Nn:SsZ",pTS2),3),1:9999999999)
	Set tResult = $S(+tH1<+tH2:1,+tH1>+tH2:0,1:$P(tH1,",",2)<=$P(tH2,",",2))
	
	Quit tResult
]]></Implementation>
</Method>

<Method name="xmltimestamp">
<Description>
Convert an HL7 date of the form YYYYMMDDHHMM into a standard XML date</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDate</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// TODO: Handle YYYY and YYYYMM. Right now we reject them.
	Quit:$Length(pDate)<8 ""
	
	If $Extract(pDate,7,8)="00"!($Extract(pDate,5,6)="00") Quit ""
	
	// Account for an HL7 date that has a time zone offset AND leaves the seconds off the time.
	If pDate?1N.N1"-"4N!(pDate?1N.N1"+"4N) {
		Set tDelim = $Extract(pDate,$Length(pDate)-4)
		Set tDate1=$Piece(pDate,tDelim,1),tDate2=$Piece(pDate,tDelim,2)
		If $Length(tDate1)=12 Set tDate1=tDate1_"00" Set pDate=tDate1_tDelim_tDate2
	}
	
	Quit $tr("YyXx-Mm-DdTHh:Nn:SsZ","YyXxMmDdHhNnSs",$ZSTRIP($P(pDate,"+"),"<>W")_"00000000000000")
]]></Implementation>
</Method>

<Method name="dateDiff">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDatePart:%String="",pStartDateODBCFormat:%String="",pEndDateODBCFormat:%String={$ZDateTime($Horolog, 3)}</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim eException As %Exception.AbstractException
	
	Try {
		Set tDateDiff = $System.SQL.DATEDIFF(pDatePart, pStartDateODBCFormat, pEndDateODBCFormat)
	}
	Catch eException {
		Set tDateDiff = ""
	}
	
	Quit tDateDiff
]]></Implementation>
</Method>

<Method name="getOIDForCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCode:%String="",pType:%String="",pDefault:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pCode="" Quit pDefault
	Set tNamespace=$$$OIDMapCacheNS
	Set tOID = $Get(^CacheTemp.OIDMap(tNamespace,"CodeTypeIndex",$ZCVT(pCode,"U")))
	If tOID'="" Quit tOID
	// Do not pass pDefault into GetOIDForCode, to avoid caching pDefault.
	Set tOID = ##class(HS.Data.OIDMap).GetOIDForCode(pCode,pCode)
	// tOID=pCode means OID not found. In that case, use pDefault if provided, and do not cache.
	If tOID=pCode Set:pDefault'="" tOID=pDefault Quit tOID
	Set ^CacheTemp.OIDMap(tNamespace,"CodeTypeIndex",$ZCVT(pCode,"U")) = tOID
	Quit tOID
]]></Implementation>
</Method>

<Method name="getURLForCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCode:%String="",pType:%String="",pDefault:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pCode="" Quit pDefault
	Set tNamespace=$$$OIDMapCacheNS
	Set tURL = $Get(^CacheTemp.OIDMap(tNamespace,"CodeTypeURLIndex",$ZCVT(pCode,"U")))
	If tURL'="" Quit tURL
	// Do not pass pDefault into GetURLForCode, to avoid caching pDefault.
	Set tURL = ##class(HS.Data.OIDMap).GetURLForCode(pCode,pCode)
	// tURL=pCode means URL not found. In that case, use pDefault if provided, and do not cache.
	If tURL=pCode Set:pDefault'="" tURL=pDefault Quit tURL
	Set ^CacheTemp.OIDMap(tNamespace,"CodeTypeURLIndex",$ZCVT(pCode,"U")) = tURL
	Quit tURL
]]></Implementation>
</Method>

<Method name="getCodeForOID">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOID:%String="",pType:%String="",pDefault:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pOID="" Quit pOID
	Set tNamespace=$$$OIDMapCacheNS
	Set tCode = $Get(^CacheTemp.OIDMap(tNamespace,"OIDIndex",pOID))
	If tCode'="" Quit tCode
	// Do not pass pDefault into GetCodeForOID, to avoid caching pDefault.
	Set tCode = ##class(HS.Data.OIDMap).GetCodeForOID(pOID,pOID)
	// tCode=pOID means Code not found. In that case, use pDefault if provided, and do not cache.
	If tCode=pOID Set:pDefault'="" tCode=pDefault Quit tCode
	Set ^CacheTemp.OIDMap(tNamespace,"OIDIndex",pOID) = tCode
	Quit tCode
]]></Implementation>
</Method>

<Method name="getCodeForURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>pURL:%String="",pType:%String="",pDefault:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pURL="" Quit pURL
	Set tNamespace=$$$OIDMapCacheNS
	Set tCode = $Get(^CacheTemp.OIDMap(tNamespace,"URLIndex",pURL))
	If tCode'="" Quit tCode
	// Do not pass pDefault into GetCodeForURL, to avoid caching pDefault.
	Set tCode = ##class(HS.Data.OIDMap).GetCodeForURL(pURL,pURL)
	// tCode=pURL means Code not found. In that case, use pDefault if provided, and do not cache.
	If tCode=pURL Set:pDefault'="" tCode=pDefault Quit tCode
	Set ^CacheTemp.OIDMap(tNamespace,"URLIndex",pURL) = tCode
	Quit tCode
]]></Implementation>
</Method>

<Method name="getDescriptionForOID">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOID:%String="",pType:%String="",pDefault:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tDescription = ##class(HS.Data.OIDMap).OIDDescription(pOID, pType)
	Quit $Case(tDescription = "", 1:pDefault, :tDescription)
]]></Implementation>
</Method>

<Method name="getDescriptionForURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>pURL:%String="",pType:%String="",pDefault:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tDescription = ##class(HS.Data.OIDMap).URLDescription(pURL, pType)
	Quit $Case(tDescription = "", 1:pDefault, :tDescription)
]]></Implementation>
</Method>

<Method name="getSystemOID">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSystem:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (pSystem = "InterSystems")		{ Quit ..getOIDForCode("ISC", "Organization") }
	ElseIf (pSystem = "Cache")			{ Quit ..getOIDForCode("ISC-Cache", "SoftwareProduct") }
	ElseIf (pSystem = "Ensemble")		{ Quit ..getOIDForCode("ISC-Ensemble", "SoftwareProduct") }
	ElseIf (pSystem = "HealthShare")	{ Quit ..getOIDForCode("ISC-HealthShare", "SoftwareProduct") }
	ElseIf (pSystem = "TrakCare")		{ Quit ..getOIDForCode("ISC-TrakCare", "SoftwareProduct") }
	ElseIf (pSystem = "DeepSee")		{ Quit ..getOIDForCode("ISC-DeepSee", "SoftwareProduct") }
	Else { Quit "" }
]]></Implementation>
</Method>

<Method name="lookup">
<Description>
Convert a lookup</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>table,value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set value=$ZSTRIP(value,"<>W")
	
	If table="resultstatus" {
		Quit $S(value="F":"FIN",value="C":"COR",1:"ENT")
	} ElseIf table="idtype" {
		Quit $S("/MR/MRN/PI/"[("/"_value_"/"):"MRN","/SSN/DL/"[("/"_value_"/"):value,1:"OTH")
	} ElseIf table="patientclass" {
		Quit $S("/I/E/O/N/"[("/"_value_"/"):value,1:"O")
	} ElseIf table="orderstatus" {
		Quit $S("/DC/CA/RP/"[("/"_value_"/"):"D",value="HD":"H","/IP/SC/"[("/"_value_"/"):"IP",value="CM":"EXE",1:"INT")
	} Else {
		Quit value
	}
]]></Implementation>
</Method>

<Method name="lookupIHETransaction">
<Description>
Lookup an IHE transaction code and return the display name</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pIHETransactionType:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim eException As %Exception.AbstractException
	
	Set tStatus = $$$OK
	Try {
		If (pIHETransactionType = "") Set tDisplayString = "Unknown Transaction Type" Quit

		#; IHE-specified transactions
		Set tValues("ITI-1") = "Maintain Time"
		Set tValues("ITI-2") = "Get User Authentication"
		Set tValues("ITI-3") = "Get Service Ticket"
		Set tValues("ITI-4") = "Kerberized Communication"
		Set tValues("ITI-5") = "Join Context"
		Set tValues("ITI-6") = "Change Context"
		Set tValues("ITI-7") = "Leave Context"
		Set tValues("ITI-8") = "Patient Identity Feed"
		Set tValues("ITI-9") = "PIX Query"
		Set tValues("ITI-10") = "PIX Update Notification"
		Set tValues("ITI-11") = "Retrieve Specific Information for Display"
		Set tValues("ITI-12") = "Retrieve Document for Display"
		Set tValues("ITI-13") = "Follow Context"
		Set tValues("ITI-14") = "Register Document Set"
		Set tValues("ITI-15") = "Provide and Register Document Set"
		Set tValues("ITI-16") = "Query Registry"
		Set tValues("ITI-17") = "Retrieve Document"
		Set tValues("ITI-18") = "Registry Stored Query"
		Set tValues("ITI-19") = "Authenticate Node"
		Set tValues("ITI-20") = "Record Audit Event"
		Set tValues("ITI-21") = "Patient Demographics Query"
		Set tValues("ITI-22") = "Patient Demographics and Visit Query"
		Set tValues("ITI-23") = "Find Personnel White Pages"
		Set tValues("ITI-24") = "Query Personnel White Pages"
		Set tValues("ITI-25") = "Send Notification"
		Set tValues("ITI-26") = "Receive Notifications"
		Set tValues("ITI-27") = "Send Acknowledgement"
		Set tValues("ITI-28") = "Receive Acknowledgement"
		Set tValues("ITI-29") = "Cross Enterprise User Authentication"
		Set tValues("ITI-30") = "Patient Identity Management"
		Set tValues("ITI-31") = "Patient Encounter Management"
		Set tValues("ITI-32") = "Distribute Document Set on Media"
		Set tValues("ITI-33") = "Send Document Set"
		Set tValues("ITI-34") = "Retrieve Form"
		Set tValues("ITI-35") = "Submit Form"
		Set tValues("ITI-36") = "Archive Form"
		Set tValues("ITI-37") = "Retrieve Clarifications"
		Set tValues("ITI-38") = "Cross Gateway Query"
		Set tValues("ITI-39") = "Cross Gateway Retrieve"
		Set tValues("ITI-40") = "Provide X-User Assertion"
		Set tValues("ITI-41") = "Provide and Register Document Set-b"
		Set tValues("ITI-42") = "Register Document Set-b"
		Set tValues("ITI-43") = "Retrieve Document Set"
		Set tValues("ITI-44") = "Patient Identity Feed HL7 V3"
		Set tValues("ITI-45") = "PIXV3 Query"
		Set tValues("ITI-46") = "PIXV3 Update Notification"
		Set tValues("ITI-47") = "Patient Demographics Query HL7 V3"
		Set tValues("ITI-48") = "Retrieve Value Set"
		Set tValues("ITI-49") = "Convey Printed Referral Request"
		Set tValues("ITI-50") = "Request Referral"
		Set tValues("ITI-56") = "XCPD Patient Discovery"
		Set tValues("ITI-61") = "Register On-Demand Document"
		
		#; ISC-invented transactions, based on IHE requirements
		Set tValues("IHE-AStart") = "Actor Start"
		Set tValues("IHE-AStop") = "Actor Stop"
		Set tValues("IHE-SA") = "Security Alert"
		Set tDisplayString = $Get(tValues(pIHETransactionType), "Unknown Transaction Type")
	}
	Catch eException {
		Set tStatus = eException.AsStatus()
	}
	
	Quit $Case($$$ISOK(tStatus), 1:tDisplayString, :$System.Status.GetOneErrorText(tStatus))
]]></Implementation>
</Method>

<Method name="hex2dec">
<Description>
Convert a hexidecimal number to decimal
While $ZHEX has a max hex input length of 16, this method
has no limit -- only cpu/ram will affect max input length</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pHex:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	For i=1:1:$l(pHex) {
		#;shift
		Set j="" For { Set j=$o(tDigits(j)) Quit:j=""  
			Set tDigits(j)=tDigits(j)*16 
		}
		
		#;increment
		Set tDigits(1)=$g(tDigits(1))+$ZHEX($e(pHex,i))
		
		#;carry
		Set j="" For { Set j=$o(tDigits(j)) Quit:j=""  
			If tDigits(j)>9 {
				Set tDigits(j+1)=$g(tDigits(j+1))+(tDigits(j)\10)
				Set tDigits(j)=tDigits(j)#10
			}
		}
	}
	
	#;convert to string
	If '$d(tDigits) Quit ""
	Set (tDec,i)="" For { Set i=$o(tDigits(i),1,v) Quit:i=""  
		Set tDec=tDigits(i)_tDec 
	}
	q tDec
]]></Implementation>
</Method>

<Method name="createID">
<Description>
Create a generic XML element ID unique for the current transform, with optional prefix</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPrefix:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pPrefix="" Set pPrefix="id"
	Quit pPrefix_..varInc("","_id",pPrefix)
]]></Implementation>
</Method>

<Method name="uuid2oid">
<ClassMethod>1</ClassMethod>
<FormalSpec>pUUID:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#;See IHE ITI 2x: B.6
	Quit "2.25."_..hex2dec($tr(pUUID,"-",""))
]]></Implementation>
</Method>

<Method name="createUUID">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#;UUID must be lowercase, see IHE ITI 3: 4.1.12.3
	Quit $ZCVT($SYSTEM.Util.CreateGUID(),"L")
]]></Implementation>
</Method>

<Method name="createOID">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..uuid2oid(..createUUID())
]]></Implementation>
</Method>

<Method name="createHL7Timestamp">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#;All XDSb timestamps must be UTC (IHE ITI 3: 4.1.7)
	Quit $TR($P($ZDT($ZTS,3,,3),".",1),"-:TZ ","")
]]></Implementation>
</Method>

<Method name="getConfigValue">
<Description>
DEPRECATED -- This method is no longer supported by InterSystems and will be removed

Return the UUID of the previous submission for the given document key, if any
Return a registry config value for the given key</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pKey]"" {
		Quit ##class(HS.Registry.Config).GetKeyValue(pKey)
	}
	Quit ""
]]></Implementation>
</Method>

<Method name="getHierarchicalConfigValue">
<Description><![CDATA[
Return the most specific registry config value for the given root and children
For example here are some outputs given the following keys:
		\a     = apple
  \a\b   = banana
		\a\b\c = carrot
  \a\\c  = cucumber
getHierarchialConfigValue("\a",,,"b","c") -> carrot
getHierarchialConfigValue("\a",,,"b")     -> banana
getHierarchialConfigValue("\a",,,"x","y") -> apple
getHierarchialConfigValue("\a",,,"","c")  -> cucumber

This is used by the XDSb Document metadata generator transform to allow overriding coded entries (aka Classifications) based on context]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String="",Args...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tReturn = ##class(HS.Registry.Config).GetKeyValue(pKey)
	For i=3:1:$G(Args) {
		Set pKey = pKey _ "\" _ $G(Args(i))		
		Kill tValue,tID
		Do ##class(HS.Registry.Config).FindByName(pKey, .tValue, .tID)
		If tID]"" Set tReturn = tValue
	}
	Quit tReturn
]]></Implementation>
</Method>

<Method name="getCodedEntryConfig">
<Description>
Return the most specific coded entry XSL nodes for the given coded entry type as code^desc^scheme</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodeType:%String="",Args...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tConfigValue = ..getHierarchicalConfigValue("\IHE\XDSb\"_pCodeType, Args...)
	If tConfigValue ] "" {
		Set tCode = $P(tConfigValue,"^",1)	
		Set tDesc = $P(tConfigValue,"^",2)	
		Set tScheme = $P(tConfigValue,"^",3)	
		
		If (tCode="")||(tScheme="") {
			$$$LOGWARNING("Configuration registry value for "_pCodeType_" must specify code and scheme")
		}
		ElseIf '##class(HS.IHE.CodedEntry).UniqueIndexExists(pCodeType,tScheme,tCode,.tConfigID) {
			$$$LOGWARNING("Configured "_pCodeType_" does not exist: "_tCode_"/"_tScheme)
		}
		Else {
			If tDesc = "",tConfigID]"" {
				Set tDesc = ##class(HS.IHE.CodedEntry).DescriptionGetStored(tConfigID)
				Set tConfigValue = tCode_"^"_tDesc_"^"_tScheme
			} 
		}
	}
	Quit tConfigValue
]]></Implementation>
</Method>

<Method name="getServiceNameFromOID">
<Description>
Return a registry service name given an oid</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOID:%String="",pOIDType:%String="",pFunction:%String="",pServiceType:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim tEP As HS.Registry.Service.Abstract
	Set tName = ""
	Try {
		Set:pServiceType="" pServiceType="SOAP"
		Set tEP = ##class(HS.Registry.Service.SOAP).EndPointForOID(pOID,pOIDType,pFunction,pServiceType,.tSC) $$$ThrowOnError(tSC)
		If $IsObject(tEP) Set tName = tEP.Name
	} Catch ex { $$$LOGSTATUS(ex.AsStatus()) }
	Quit tName
]]></Implementation>
</Method>

<Method name="getServiceHostFromOID">
<Description>
Return a registry service host given an oid</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOID:%String="",pOIDType:%String="",pFunction:%String="",pServiceType:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim tEP As HS.Registry.Service.Abstract
	Set tHost = ""
	Try {
		Set:pServiceType="" pServiceType="SOAP"
		Set tEP = ##class(HS.Registry.Service.SOAP).EndPointForOID(pOID,pOIDType,pFunction,pServiceType,.tSC) $$$ThrowOnError(tSC)
		If $IsObject(tEP) Set tHost = tEP.Host
	} Catch ex { $$$LOGSTATUS(ex.AsStatus()) }
	Quit tHost
]]></Implementation>
</Method>

<Method name="getServiceURLFromOID">
<Description>
Return a domain and URL (e.g., http://host:port/url) given an OID</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOID:%String="",pOIDType:%String="",pFunction:%String="",pServiceType:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim tEP As HS.Registry.Service.Abstract
	Set tURL = ""
	Try {
		Set:pServiceType="" pServiceType="SOAP"
		Set tEP = ##class(HS.Registry.Service.Abstract).EndPointForOID(pOID,pOIDType,pFunction,pServiceType,.tSC) $$$ThrowOnError(tSC)
		If $IsObject(tEP) {
			Set tHTTP = $Select(tEP.SSLConfig'="":"https://",1:"http://")
			Set tPort = $Select(tEP.Port'="":":"_tEP.Port,1:"")
			Set tURL = tHTTP_tEP.Host_tPort_tEP.URL
		}
	} Catch ex { $$$LOGSTATUS(ex.AsStatus()) }
	Quit tURL
]]></Implementation>
</Method>

<Method name="getServiceNameFromURL">
<Description>
Return a registry service name given an URL</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pURL:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tEndPoint = ##class(HS.Registry.Service.SOAP).EndPointForURL(pURL)
	If $IsObject(tEndPoint)	Quit tEndPoint.Name
	Quit ""
]]></Implementation>
</Method>

<Method name="getServiceOIDFromURL">
<Description>
Return a registry service OID given an URL</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pURL:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim tEndPoint As HS.Registry.Service.SOAP
	Set tEndPoint = ##class(HS.Registry.Service.SOAP).EndPointForURL(pURL)
	If $IsObject(tEndPoint)	{
		Set tOID = ""
		For i="Device","Repository","HomeCommunity" {
			If tEndPoint.OIDMapCode.IsDefined(i) {
				Set tCode= tEndPoint.OIDMapCode.GetAt(i)
				Set tOID = ##class(HS.Data.OIDMap).OIDForType(tCode,i,"")
				If tOID]"" Quit
			}
		}
		Quit tOID
	}
	Quit ""
]]></Implementation>
</Method>

<Method name="varArgsToNameValue">
<Description>
Turn an arg list into a variable name and optionally a value</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pHasValue:%Boolean=0,&pName:%String,Args...]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#; Start with the variable cache name
	If $Get(pName)="" Set pName="%HSUtilXSLTHelper"
	
	#; Add subscripts, ignorning value if appropriate 
	#; Append " " to ensure non-null subscript
	For i=2:1:($G(Args)-pHasValue) {
		Set pName=pName_$s(pName["(":",",1:"(")
		Set pName=pName_""" "_$G(Args(i))_""""
	}
	If pName["(" Set pName=pName_")"
	
	#; Return the last arg if there is a value, "" otherwise
	Quit $S(pHasValue:$G(Args($G(Args))),1:"")
]]></Implementation>
</Method>

<Method name="varReset">
<Description>
Clear the variable cache. Call before each transform either from code or the XSL itself</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..varKill()
]]></Implementation>
</Method>

<Method name="varKill">
<Description>
Kill a variable in the cache.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Args...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Do ..varArgsToNameValue(0,.tVar)
	Kill @tVar
	Quit ""
]]></Implementation>
</Method>

<Method name="varSet">
<Description>
Set a variable in the cache</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Args...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tValue=..varArgsToNameValue(1,.tVar,Args...)
	Set @tVar=tValue
	Quit tValue
]]></Implementation>
</Method>

<Method name="varGet">
<Description>
Get a variable</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Args...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Do ..varArgsToNameValue(0,.tVar,Args...)
	Quit $G(@tVar)
]]></Implementation>
</Method>

<Method name="varInc">
<Description>
Increment a variable</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Args...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Do ..varArgsToNameValue(0,.tVar,Args...)
	Quit $I(@tVar)
]]></Implementation>
</Method>

<Method name="varData">
<Description>
Check for data in a var</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Args...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Do ..varArgsToNameValue(0,.tVar,Args...)
	Quit $D(@tVar)
]]></Implementation>
</Method>

<Method name="varConcat">
<Description>
Concatenate a value onto a variable in the cache</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Args...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tValue=..varArgsToNameValue(1,.tVar,Args...)
	Set @tVar=$G(@tVar)_tValue
	Quit @tVar
]]></Implementation>
</Method>

<Method name="varDebug">
<Description>
Merge the variable cache into a debug global</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Args...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tGlobal=$G(Args(2))
	If tGlobal]"" {
		Do ..varArgsToNameValue(0,.tVar)
		Set %=$i(@tGlobal)
		Merge @tGlobal@(%)=@tVar
	}
	Quit ""
]]></Implementation>
</Method>

<Method name="makeURL">
<Description>
Create a valid URL</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Args...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tURL=Args(2)
	Set tDelim="?"
	For i=3:2:Args {
		Set tURL=tURL_tDelim_Args(i)_"="_$ZCVT($G(Args(i+1)),"O","URL")
		Set tDelim="&"
	}
	Quit tURL
]]></Implementation>
</Method>

<Method name="getUniqueTime">
<Description>
Work around for bug in viewer that looses documents with same date/time over different encounters
It will return a unique timestamp for the current transform as close to the input timestamp as possible</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String="",pValue:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tValue=pValue,i=0
	
	#; keep adding 1ms to the time value until it hasn't been seen
	#; bail if we would move to the next second
	while ..varData(pKey,tValue) {
		Set i=i+1 If i>999 Quit  
		Set tValue=$p(pValue,"Z",1)_"."_$tr($j(i,3)," ",0)_"Z"
	}
	
	#; mark this value as seen
	Do ..varSet(pKey,tValue,1)
	
	Quit tValue
]]></Implementation>
</Method>

<Method name="xmltimestampToUTC">
<Description>
Convert xmltimestamp with offset to timestamp with UTC</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDateTime</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#; if not a full date return what we are given
	Quit:$l(pDateTime)<8 pDateTime
	Set dt=$zdh($e(pDateTime,1,8),8),tm=$e(pDateTime,9,*)
	#; return the same precision as given
	Set offsetpos=$f(pDateTime,"-") set:'offsetpos offsetpos=$f(pDateTime,"+")
	#; if no offset return what we are given
	If 'offsetpos Quit pDateTime
	Set len=$s('offsetpos:$l(pDateTime),1:offsetpos-2)

	Set offset=$e(pDateTime,offsetpos-1,*),tm=$e(pDateTime,9,offsetpos-2),offset=$e(offset)_($e(offset,2,3)*3600+($e(offset,4,5)*60))
	Set tm=$zth($e(tm,1,2)_":"_$e(tm_"00",3,4)_":"_$e(tm_"00",5,6)),tm=tm-offset s:tm<0 tm=86400-tm,dt=dt-1 s:tm>86399 tm=tm-86400,dt=dt+1
	Quit $E($zd(dt,8)_$tr($zt(tm),":"),1,len)
]]></Implementation>
</Method>

<Method name="getQuickStream">
<Description>
Method to return the contents of a quickstream.  For security purposes, the stream ID
must be one explictly labeled as one to be passed into here, starting with TXSLTHelper
(perhaps followed by $J)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStreamId</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Quit:pStreamId'?1"TXSLTHelper".E ""
	Set tStream=##class(HS.SDA3.QuickStream).%OpenId(pStreamId)
	Quit:'$IsObject(tStream) ""
	Do tStream.Rewind()
	Quit ##class(%XML.XSLT.StreamAdapter).%New(tStream)
]]></Implementation>
</Method>

<Method name="getMeasuresTemplates">
<Description>
getMeasuresTemplates returns a vertical bar-delimited string
of the templateId OIDs for the Quality Measures specified
in a vertical bar-delimited input string.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMeasureCodes:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $Translate(pMeasureCodes,"|")="" Quit ""
	Set tTemplates = ""
	For i = 1:1:$Length(pMeasureCodes,"|") Set tTemplates = tTemplates_..getMeasureTemplates($Piece(pMeasureCodes,"|",i))
	// De-duplicate the Ids before returning.
	For i = 1:1:$Length(tTemplates,"|") Set tP = $Piece(tTemplates,"|",i) If tP'="" Set tArr(tP)=""
	Set tTemplates = ""
	Set tP = "" For  Set tP = $Order(tArr(tP)) Quit:tP=""  Set tTemplates = tTemplates_"|"_tP
	If tTemplates'="" Set tTemplates = tTemplates_"|"
	Quit tTemplates
]]></Implementation>
</Method>

<Method name="getMeasureTemplates">
<Description>
getMeasureTemplates returns a vertical bar-delimited string
of the templateId OIDs for a the specified Quality Measure.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMeasureCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $Translate(pMeasureCode,"|")="" Quit ""
	Set tObj = ##class(HS.Registry.QualityMeasure).ObjectForCode(pMeasureCode)
	If '$IsObject(tObj) Quit ""
	Set tTemplates = ""
	For j = 1:1:tObj.TemplateIds.Count() Set tTemplates = tTemplates_"|"_tObj.TemplateIds.GetAt(j)
	If tTemplates'="" Set tTemplates = tTemplates_"|"
	Quit tTemplates
]]></Implementation>
</Method>

<Method name="getMeasuresHeaderInfo">
<Description>
getMeasuresHeaderInfo takes a vertical bar-delimited string of Measure Codes
and returns an XML representation of all of the specified Measures.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMeasureCodes:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $Translate(pMeasureCodes,"|")="" Quit ""
	Set tMeasuresInfo = ""
	For i = 1:1:$Length(pMeasureCodes,"|") Set tMeasuresInfo = tMeasuresInfo_..getMeasureHeaderInfo($Piece(pMeasureCodes,"|",i))
	Quit tMeasuresInfo
]]></Implementation>
</Method>

<Method name="getMeasureHeaderInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMeasureCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $Translate(pMeasureCode,"|")="" Quit ""
	
	Set tMeasureInfo = ""
	
	Set tObj=##class(HS.Registry.QualityMeasure).CodeIndexOpen(pMeasureCode)
	If '$IsObject(tObj) Quit ""
	
	Set tMeasureInfo = "Code!"_tObj.Code
	Set tMeasureInfo = tMeasureInfo_"^VersionSpecificId!"_$Translate(tObj.VersionSpecificId,$Char(0))
	Set tMeasureInfo = tMeasureInfo_"^NQFNumber!"_$Translate(tObj.NQFNumber,$Char(0))
	Set tMeasureInfo = tMeasureInfo_"^Title!"_$Translate(tObj.Title,$Char(0))
	Set tMeasureInfo = tMeasureInfo_"^AuthoringToolIdExtension!"_$Translate(tObj.AuthoringToolIdExtension,$Char(0))
	Set tMeasureInfo = tMeasureInfo_"^VersionNeutralId!"_$Translate(tObj.VersionNeutralId,$Char(0))
	Set tMeasureInfo = tMeasureInfo_"^VersionNumber!"_$Translate(tObj.VersionNumber,$Char(0))
	Set tMeasureInfo = tMeasureInfo_"^|"
	
	Quit tMeasureInfo
]]></Implementation>
</Method>

<Method name="getMeasuresSetIds">
<Description>
getMeasuresSetIds returns the setIds (aka Version Neutral Id) for
the specified Measures in a vertical bar-delimited string.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMeasureCodes:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $Translate(pMeasureCodes,"|")="" Quit ""
	Set tSetIds = ""
	For i = 1:1:$Length(pMeasureCodes,"|") Set tSetIds = tSetIds_..getMeasureSetId($Piece(pMeasureCodes,"|",i))_"|"
	Quit tSetIds
]]></Implementation>
</Method>

<Method name="getMeasureSetId">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMeasureCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $Translate(pMeasureCode,"|")="" Quit ""
	
	Set tObj=##class(HS.Registry.QualityMeasure).CodeIndexOpen(pMeasureCode)
	If '$IsObject(tObj) Quit ""
	
	Set tSetId = $Translate(tObj.VersionNeutralId,$Char(0))
	
	Quit tSetId
]]></Implementation>
</Method>

<Method name="getValueSetOIDs">
<Description>
getValueSetOIDs returns a vertical bar-delimited string of OIDs
for the values sets in which pCode+pCodeSystem are found for the
specified quality measures.  pMeasures is a vertical bar-delimited
string of measure Version Neutral Ids (aka setIds).</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCode:%String="",pCodeSystem:%String="",pMeasureIds:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tValueSetOIDs = ""
	
	Set tStatement = ##class(%SQL.Statement).%New()
	Set tStatement.%SelectMode=2
	Set tQuery = "SELECT ValueSetOID,MeasureId FROM HS_Data.ValueSet WHERE ConceptCode=? AND ConceptCodeSystem=?"
	Set tStatus = tStatement.%Prepare(tQuery)
	Set tResultSet = tStatement.%Execute(pCode, pCodeSystem)
	While tResultSet.%Next() {
		Set tO = tResultSet.ValueSetOID
		If $Data(tOIDs(tO))=0 {
			If $Translate(pMeasureIds,"|")="" Set tValueSetOIDs = tValueSetOIDs_tO_"|" Set tOIDs(tO)=""
			If pMeasureIds[("|"_tResultSet.MeasureId_"|") Set tValueSetOIDs = tValueSetOIDs_tO_"|" Set tOIDs(tO)=""
		}
	}
	Kill tResultSet
	Kill tStatement
	
	/*
	Set tP = ""
	For {
		Set tP = $Order(^HS.ValueSet(pCode,pCodeSystem,tP))
		If tP="" Quit
		Set tO = ""
		For {
			Set tO = $Order(^HS.ValueSet(pCode,pCodeSystem,tP,tO))
			If tO="" Quit
			If $Data(tOIDs(tO))=0 {
				If $Translate(pMeasureIds,"|")="" Set tValueSetOIDs = tValueSetOIDs_tO_"|"
				If pMeasureIds[("|"_tResultSet.MeasureId_"|") Set tValueSetOIDs = tValueSetOIDs_tO_"|"
			}
			Set tOIDs(tO)=""
		}
	}
	*/
	
	Kill tStatement
	
	Quit tValueSetOIDs
]]></Implementation>
</Method>

<Method name="setHSValueSetEntry">
<ClassMethod>1</ClassMethod>
<FormalSpec>pValueSetOID,pValueSetName,pValueSetVersion,pConceptCode,pConceptCodeSystem,pConceptCodeSystemVersion,pConceptDescription,pMeasureId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	
	Try {
		Set tObj = ##class(HS.Data.ValueSet).%New()
		Set tObj.ConceptCode = pConceptCode
		Set tObj.ConceptCodeSystem = pConceptCodeSystem
		Set tObj.ConceptCodeSystemVersion = pConceptCodeSystemVersion
		Set tObj.ConceptDescription = pConceptDescription
		Set tObj.ValueSetName = pValueSetName
		Set tObj.ValueSetOID = pValueSetOID
		Set tObj.ValueSetVersion = pValueSetVersion
		Set tObj.MeasureId = pMeasureId
		Set tSC = tObj.%Save()
		
		//Set ^HS.ValueSet(pConceptCode,pConceptCodeSystem,pMeasureId,pValueSetOID)=""
		
	} Catch eException {
		Set tSC = eException.AsStatus()
	}
	
	Quit tSC
]]></Implementation>
</Method>
</Class>


</Export>
